create schema deserialize_func1;
set current_schema = deserialize_func1;
create sequence test_seq;
create or replace function test_func() return int
as
begin
return 1;
end;
/
create table t1(key int, id int default nextval('test_seq'));
create table t2(key int, id int default test_func());
select * from pg_get_tabledef('deserialize_func1.t1');
                   pg_get_tabledef                    
------------------------------------------------------
 SET search_path = deserialize_func1;                +
 CREATE TABLE t1 (                                   +
     key integer,                                    +
     id integer DEFAULT nextval('test_seq'::regclass)+
 )                                                   +
 WITH (orientation=row, compression=no);
(1 row)

select * from pg_get_tabledef('deserialize_func1.t2');
             pg_get_tabledef             
-----------------------------------------
 SET search_path = deserialize_func1;   +
 CREATE TABLE t2 (                      +
     key integer,                       +
     id integer DEFAULT test_func()     +
 )                                      +
 WITH (orientation=row, compression=no);
(1 row)

alter schema deserialize_func1 rename to deserialize_func2;
select * from pg_get_tabledef('deserialize_func2.t1');
                            pg_get_tabledef                             
------------------------------------------------------------------------
 SET search_path = deserialize_func2;                                  +
 CREATE TABLE t1 (                                                     +
     key integer,                                                      +
     id integer DEFAULT nextval('deserialize_func2.test_seq'::regclass)+
 )                                                                     +
 WITH (orientation=row, compression=no);
(1 row)

select * from pg_get_tabledef('deserialize_func2.t2');
                   pg_get_tabledef                    
------------------------------------------------------
 SET search_path = deserialize_func2;                +
 CREATE TABLE t2 (                                   +
     key integer,                                    +
     id integer DEFAULT deserialize_func2.test_func()+
 )                                                   +
 WITH (orientation=row, compression=no);
(1 row)

alter table deserialize_func2.t1 alter column id drop default;
alter table deserialize_func2.t1 alter column id set default nextval('deserialize_func2.test_seq');
select * from pg_get_tabledef('deserialize_func2.t1');
                            pg_get_tabledef                             
------------------------------------------------------------------------
 SET search_path = deserialize_func2;                                  +
 CREATE TABLE t1 (                                                     +
     key integer,                                                      +
     id integer DEFAULT nextval('deserialize_func2.test_seq'::regclass)+
 )                                                                     +
 WITH (orientation=row, compression=no);
(1 row)

alter table deserialize_func2.t2 alter column id drop default;
alter table deserialize_func2.t2 alter column id set default deserialize_func2.test_func();
select * from pg_get_tabledef('deserialize_func2.t2');
                   pg_get_tabledef                    
------------------------------------------------------
 SET search_path = deserialize_func2;                +
 CREATE TABLE t2 (                                   +
     key integer,                                    +
     id integer DEFAULT deserialize_func2.test_func()+
 )                                                   +
 WITH (orientation=row, compression=no);
(1 row)

set current_schema = deserialize_func2;
create type type1 as (a int);
create view v1 as select '(1)'::type1;
alter type type1 rename to type2;
select pg_get_viewdef('v1');
        pg_get_viewdef         
-------------------------------
 SELECT '(1)'::type2 AS type1;
(1 row)

drop view v1 cascade;
create table atest12 as select x as a, 10001-x as b from generate_series(1, 10000) x;
create function func1(integer, integer) returns boolean as $$begin return $1 < $2; end $$ language plpgsql immutable;
create operator <<< (procedure=func1, leftarg=integer, rightarg=integer, restrict=scalarltsel);
create view atest12v as select * from atest12 where b <<< 5;
select pg_get_viewdef('atest12v');
                 pg_get_viewdef                  
-------------------------------------------------
 SELECT  * FROM atest12 WHERE (atest12.b <<< 5);
(1 row)

drop schema if exists deserialize_func1 cascade;
NOTICE:  schema "deserialize_func1" does not exist, skipping
drop schema if exists deserialize_func2 cascade;
NOTICE:  drop cascades to 9 other objects
DETAIL:  drop cascades to sequence test_seq
drop cascades to function test_func()
drop cascades to table t1
drop cascades to table t2
drop cascades to type type2
drop cascades to table atest12
drop cascades to function func1(integer,integer)
drop cascades to operator <<<(integer,integer)
drop cascades to view atest12v
