DROP DATABASE IF EXISTS test_db;
NOTICE:  database "test_db" does not exist, skipping
CREATE DATABASE test_db DBCOMPATIBILITY 'B';
CREATE USER "Root_Test" WITH PASSWORD 'openGauss@123';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
GRANT ALL PRIVILEGES TO "Root_Test";
\c test_db
SET ROLE "Root_Test" PASSWORD 'openGauss@123';
CREATE USER "Test_User" with password 'openGauss@123';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
CREATE VIEW definer_test_view1 AS SELECT log(10, 100);
CREATE DEFINER="Test_User" VIEW definer_test_view2 AS SELECT log(10, 100);
ERROR:  permission denied for schema public
DETAIL:  N/A
CREATE OR REPLACE DEFINER="Test_User" VIEW definer_test_view3 AS SELECT log(10, 100);
ERROR:  permission denied for schema public
DETAIL:  N/A
GRANT ALL PRIVILEGES TO "Test_User";
CREATE DEFINER="Test_User" VIEW definer_test_view2 AS SELECT log(10, 100);
CREATE OR REPLACE DEFINER="Test_User" VIEW definer_test_view3 AS SELECT log(10, 100);
SELECT c.relname as view_name, u.usename as rolname FROM pg_class c, pg_user u WHERE u.usesysid = c.relowner AND relname like '%definer_test_view%' order by view_name;
     view_name      |  rolname  
--------------------+-----------
 definer_test_view1 | Root_Test
 definer_test_view2 | Test_User
 definer_test_view3 | Test_User
(3 rows)

CREATE USER test_user2 with password 'openGauss@123';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
SELECT * FROM definer_test_view1;
        log         
--------------------
 2.0000000000000000
(1 row)

ALTER VIEW definer_test_view1 AS SELECT log(10, 1000);
SELECT * FROM definer_test_view1;
        log         
--------------------
 3.0000000000000000
(1 row)

ALTER DEFINER=test_user2 VIEW definer_test_view2 AS SELECT log(10, 100);
create table tab_1107262(id int,c1 int);
create or replace procedure pro_1107262(n int)
as
begin
repeat
insert into tab_1107262 values(n,n*2);
n:=n+1;
until n>10 end repeat;
end;
/
SELECT c.relname as view_name, u.usename as rolname FROM pg_class c, pg_user u WHERE u.usesysid = c.relowner AND relname like '%definer_test_view%' order by view_name;
     view_name      |  rolname   
--------------------+------------
 definer_test_view1 | Root_Test
 definer_test_view2 | test_user2
 definer_test_view3 | Test_User
(3 rows)

-- dump all views
\! @abs_bindir@/gs_dump test_db -p @portstring@ --include-depend-objs --exclude-self --disable-progress | grep -vE '^SET|^REVOKE|^GRANT|^--|^gs_dump|^COMMENT|^DROP'| tr -s '\n' > @abs_bindir@/definer_view_dump.sql 2>&1
\! cat @abs_bindir@/definer_view_dump.sql

CREATE SCHEMA "Test_User";
ALTER SCHEMA "Test_User" OWNER TO "Test_User";
CREATE SCHEMA test_user2;
ALTER SCHEMA test_user2 OWNER TO test_user2;
CREATE DEFINER = "Root_Test" PROCEDURE pro_1107262(n int)  NOT SHIPPABLE
 AS  DECLARE begin
repeat
insert into tab_1107262 values(n,n*2);
n:=n+1;
until n>10 end repeat;
end;
/
ALTER PROCEDURE public.pro_1107262(n integer) OWNER TO "Root_Test";
CREATE VIEW definer_test_view1(log) AS
    SELECT log((10)::number, (1000)::number) AS log;
ALTER VIEW public.definer_test_view1 OWNER TO "Root_Test";
CREATE VIEW definer_test_view2(log) AS
    SELECT log((10)::number, (100)::number) AS log;
ALTER VIEW public.definer_test_view2 OWNER TO test_user2;
CREATE VIEW definer_test_view3(log) AS
    SELECT log((10)::number, (100)::number) AS log;
ALTER VIEW public.definer_test_view3 OWNER TO "Test_User";
CREATE TABLE tab_1107262 (
    id integer,
    c1 integer
)
WITH (orientation=row, compression=no);
ALTER TABLE public.tab_1107262 OWNER TO "Root_Test";
COPY public.tab_1107262 (id, c1) FROM stdin;
\.
;
\! @abs_bindir@/gs_dump test_db -p @portstring@ -F c -f @abs_bindir@/definer_view_dump.dmp --disable-progress
--?gs_dump[port='@portstring@'][test_db].*
--?gs_dump[port='@portstring@'][test_db].*
--?gs_dump[port='@portstring@'][test_db].*
--?gs_dump[port='@portstring@'][test_db].*
--?gs_dump[port='@portstring@'][test_db].*
--?gs_dump[port='@portstring@'][test_db].*
CREATE DATABASE target DBCOMPATIBILITY 'B';
\! @abs_bindir@/gs_restore -d target -p @portstring@ @abs_bindir@/definer_view_dump.dmp --disable-progress
start restore operation ...
end restore operation ...
restore operation successful
--?.*
SELECT * FROM definer_test_view1;
        log         
--------------------
 3.0000000000000000
(1 row)

SELECT * FROM definer_test_view2;
        log         
--------------------
 2.0000000000000000
(1 row)

SELECT * FROM definer_test_view3;
        log         
--------------------
 2.0000000000000000
(1 row)

SELECT c.relname as view_name, u.usename as rolname FROM pg_class c, pg_user u WHERE u.usesysid = c.relowner AND relname like '%definer_test_view%' order by view_name;
     view_name      |  rolname   
--------------------+------------
 definer_test_view1 | Root_Test
 definer_test_view2 | test_user2
 definer_test_view3 | Test_User
(3 rows)

RESET ROLE;
create database test_1;
\c test_1
create table startwith_t(id int, level int, connect_by_isleaf int, connect_by_iscycle int);
create view startwith_v as select id, connect_by_isleaf as level, level as connect_by_isleaf from startwith_t;
\! @abs_bindir@/gs_dump test_1 -p @portstring@ -f @abs_bindir@/dump_postgres.sql --disable-progress
--?gs_dump[port='@portstring@'][test_1].*
--?gs_dump[port='@portstring@'][test_1].*
--?gs_dump[port='@portstring@'][test_1].*
--?gs_dump[port='@portstring@'][test_1].*
--?gs_dump[port='@portstring@'][test_1].*
--?gs_dump[port='@portstring@'][test_1].*
drop database if exists test_2;
NOTICE:  database "test_2" does not exist, skipping
create database test_2;
\! @abs_bindir@/gsql -d test_2 -p @portstring@ -f @abs_bindir@/dump_postgres.sql
SET
SET
SET
SET
SET
SET
SET
SET
SET
SET
CREATE TABLE
ALTER TABLE
CREATE VIEW
ALTER VIEW
REVOKE
REVOKE
GRANT
GRANT
--?.*
\! @abs_bindir@/gsql -d test_2 -p @portstring@ -c "select * from startwith_v;"
 id | level | connect_by_isleaf 
----+-------+-------------------
(0 rows)

\c test_db
create user use_a_1144425 identified by 'A@123456';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
create user use_b_1144425 identified by 'A@123456';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
create table sql_security_1144425(id int,cal int);
insert into sql_security_1144425 values(1,1);
insert into sql_security_1144425 values(2,2);
insert into sql_security_1144425 values(3,3);
--user a can create view in shcema
grant all on schema public to use_a_1144425;
-- definer 
create definer=use_a_1144425 sql security definer view v_1144425_2 as select * from sql_security_1144425;
-- invoker 
create definer=use_a_1144425 sql security invoker view v_1144425_1 as select * from sql_security_1144425;
--user a call view shoule be failed cause table operation
set role use_a_1144425 password 'A@123456';
select * from sql_security_1144425 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
-- call definer\invoker  view shoule be failed
select * from v_1144425_2 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_1144425_1 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
-- root user shoule success in invoker ,failed in definer
reset role;
select * from v_1144425_2 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_1144425_1 order by 1,2;
 id | cal 
----+-----
  1 |   1
  2 |   2
  3 |   3
(3 rows)

--user b call view shoule filed , no view permission both
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
ERROR:  permission denied for relation v_1144425_2
DETAIL:  N/A
select * from v_1144425_1 order by 1,2;
ERROR:  permission denied for relation v_1144425_1
DETAIL:  N/A
--give user b permission of view , no table permission both
reset role;
grant all on table v_1144425_2 to use_b_1144425;
grant all on table v_1144425_1 to use_b_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_1144425_1 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
-- give user b permission of table , invoker success 
reset role;
grant all on table sql_security_1144425 to use_b_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_1144425_1 order by 1,2;
 id | cal 
----+-----
  1 |   1
  2 |   2
  3 |   3
(3 rows)

-- give user a permission of table , definer  success 
reset role;
grant all on table sql_security_1144425 to use_a_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
 id | cal 
----+-----
  1 |   1
  2 |   2
  3 |   3
(3 rows)

-- revoke user b permision of table , definer success, invoker failed
reset role;
revoke all on table sql_security_1144425 from use_b_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
 id | cal 
----+-----
  1 |   1
  2 |   2
  3 |   3
(3 rows)

select * from v_1144425_1 order by 1,2;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
reset role;
-- test auth passdown for multi view;
--clear all 
drop table sql_security_1144425 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to view v_1144425_2
drop cascades to view v_1144425_1
drop user use_a_1144425 cascade;
drop user use_b_1144425 cascade;
create user use_a_1144425 identified by 'A@123456';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
create user use_b_1144425 identified by 'A@123456';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
create table sql_security_1144425(id int,cal int);
insert into sql_security_1144425 values(1,1);
--user a can create view in shcema
grant all on schema public to use_a_1144425;
-- definer view v_d_inner
create definer=use_a_1144425 sql security definer view v_d_inner as select * from sql_security_1144425;
-- invoker view v_i_inner
create definer=use_a_1144425 sql security invoker view v_i_inner as select * from sql_security_1144425;
-- definer view v_d_d_outer
create definer=use_a_1144425 sql security definer view v_d_d_outer as select * from v_d_inner;
-- definer view v_d_i_outer
create definer=use_a_1144425 sql security definer view v_d_i_outer as select * from v_i_inner;
-- definer view v_i_d_outer
create definer=use_a_1144425 sql security invoker view v_i_d_outer as select * from v_d_inner;
-- definer view v_i_i_outer
create definer=use_a_1144425 sql security invoker view v_i_i_outer as select * from v_i_inner;
-- root could only success in vii 
select * from v_i_i_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

select * from v_i_d_outer;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_d_i_outer;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_d_d_outer;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
-- give user b permisson of view;
grant all on table v_i_i_outer to use_b_1144425;
grant all on table v_i_d_outer to use_b_1144425;
grant all on table v_d_i_outer to use_b_1144425;
grant all on table v_d_d_outer to use_b_1144425;
-- user b got error of table ,in vdi ,vdd. vii ,vid got view error
set role use_b_1144425 password 'A@123456';
select * from v_i_i_outer;
ERROR:  permission denied for relation v_i_inner
DETAIL:  N/A
select * from v_i_d_outer;
ERROR:  permission denied for relation v_d_inner
DETAIL:  N/A
select * from v_d_i_outer;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
select * from v_d_d_outer;
ERROR:  permission denied for relation sql_security_1144425
DETAIL:  N/A
--now give user a permission of table 
reset role;
grant all on table sql_security_1144425 to use_a_1144425;
-- root could  success in all 
select * from v_i_i_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

select * from v_i_d_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

select * from v_d_i_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

select * from v_d_d_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

-- user b only success in  vdd , vdi
set role use_b_1144425 password 'A@123456';
select * from v_i_i_outer;
ERROR:  permission denied for relation v_i_inner
DETAIL:  N/A
select * from v_i_d_outer;
ERROR:  permission denied for relation v_d_inner
DETAIL:  N/A
select * from v_d_i_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

select * from v_d_d_outer;
 id | cal 
----+-----
  1 |   1
(1 row)

reset role;
-- coverage test
create view v1 as select * from sql_security_1144425;
create or replace view v1 as select * from sql_security_1144425;
create or replace definer=use_a_1144425 view v1 as select * from sql_security_1144425;
create sql security invoker view v2 as select * from sql_security_1144425;
create or replace sql security invoker view v2 as select * from sql_security_1144425;
create or replace definer=use_a_1144425 sql security invoker view v2 as select * from sql_security_1144425;
alter view v1 as select * from sql_security_1144425;
alter definer=use_a_1144425 view v1 as select * from sql_security_1144425;
alter sql security definer view v2 as select * from sql_security_1144425;
alter definer=use_a_1144425 sql security definer view v2 as select * from sql_security_1144425;
alter sql security definer view v1 as select * from sql_security_1144425;
alter definer=use_a_1144425 sql security definer view v1 as select * from sql_security_1144425;
--pg_dump test 
--see view_definer_test.source
--clear all 
drop table sql_security_1144425 cascade;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to view v_d_inner
drop cascades to view v_d_d_outer
drop cascades to view v_i_d_outer
drop cascades to view v_i_inner
drop cascades to view v_d_i_outer
drop cascades to view v_i_i_outer
drop cascades to view v2
drop cascades to view v1
drop user use_a_1144425 cascade;
drop user use_b_1144425 cascade;
\c contrib_regression
drop database test_db;
drop database test_1;
drop database test_2;
drop database target;
DROP USER "Test_User";
DROP USER test_user2;
DROP USER "Root_Test" CASCADE;
