set dolphin.b_compatibility_mode to off;
drop database if exists b_databaselock;
NOTICE:  database "b_databaselock" does not exist, skipping
create database b_databaselock dbcompatibility 'b';
\c b_databaselock
--all failed
select get_lock();
ERROR:  function get_lock() does not exist
LINE 1: select get_lock();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: get_lock
select get_lock('');
ERROR:  Incorrect user-level lock name ''
CONTEXT:  referenced column: get_lock
select get_lock('',1);
ERROR:  Incorrect user-level lock name ''
CONTEXT:  referenced column: get_lock
select is_free_lock();
ERROR:  function is_free_lock() does not exist
LINE 1: select is_free_lock();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: is_free_lock
select is_free_lock('');
ERROR:  Incorrect user-level lock name ''
CONTEXT:  referenced column: is_free_lock
select is_used_lock();
ERROR:  function is_used_lock() does not exist
LINE 1: select is_used_lock();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: is_used_lock
select is_used_lock('');
ERROR:  Incorrect user-level lock name ''
CONTEXT:  referenced column: is_used_lock
select release_lock();
ERROR:  function release_lock() does not exist
LINE 1: select release_lock();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: release_lock
select release_lock('');
ERROR:  Incorrect user-level lock name ''
CONTEXT:  referenced column: release_lock
\c postgres
drop database if exists b_databaselock;
