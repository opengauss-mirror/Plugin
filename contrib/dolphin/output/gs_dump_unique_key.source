create database envision with dbcompatibility 'b';
\c envision
create schema envision;
set current_schema TO envision;
CREATE TABLE IF NOT EXISTS `yx_channel` (
  `yx_id` bigint NOT NULL,
  `channel` tinyint unsigned NOT NULL,
  `raw_data` tinyint unsigned DEFAULT NULL,
  `q` bigint DEFAULT NULL,
  `ld_alias` varchar(64) DEFAULT NULL,
  `order_no` smallint DEFAULT '-1',
  `gin` bigint DEFAULT NULL,
  `source_mode` tinyint unsigned DEFAULT NULL,
  `change_time` bigint DEFAULT '0',
  PRIMARY KEY (`yx_id`,`channel`),
  Unique KEY `i_yx_channel_1` (`ld_alias`,`channel`,`order_no`)
) ;
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "yx_channel_pkey" for table "yx_channel"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "i_yx_channel_1" for table "yx_channel"
CREATE or replace FUNCTION "ti_yx_channel_trigger_function"() RETURNS "trigger"
    LANGUAGE "plpgsql" NOT SHIPPABLE
AS $$
DECLARE
    num1 INTEGER;
BEGIN
    IF NEW.ld_alias IS NOT NULL AND NEW.order_no >= 0 THEN
        SELECT COUNT(*) INTO num1 FROM yx_channel
          WHERE channel = NEW.channel AND ld_alias = NEW.ld_alias AND order_no = NEW.order_no ;
        IF num1 > 0 THEN
        END IF ;
    END IF ;
    RETURN NEW;
END$$;
CREATE TRIGGER "ti_yx_channel" BEFORE INSERT ON "yx_channel" FOR EACH ROW EXECUTE PROCEDURE "ti_yx_channel_trigger_function"();
-- schema
\! @abs_bindir@/gs_dump -p @portstring@ -s -E=utf8 -n envision --lock-wait-timeout=300000 -c envision -f @abs_bindir@/gs_dump_unique_key.sql >/dev/null 2>&1; echo $?
0
\! @abs_bindir@/gsql -d envision -p @portstring@ -f "@abs_bindir@/gs_dump_unique_key.sql";
SET
SET
SET
SET
SET
SET
SET
SET
SET
SET
DROP TRIGGER
ALTER TABLE
ALTER TABLE
DROP TABLE
DROP FUNCTION
DROP SCHEMA
SET
SET
CREATE SCHEMA
ALTER SCHEMA
SET
CREATE FUNCTION
ALTER FUNCTION
SET
SET
CREATE TABLE
ALTER TABLE
ALTER TABLE
ALTER TABLE
CREATE TRIGGER
--?.*
drop schema envision cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to function ti_yx_channel_trigger_function()
drop cascades to table yx_channel
\c postgres
drop database envision;
