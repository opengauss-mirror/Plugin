create schema test_json_depth;
set current_schema to 'test_json_depth';
select json_depth('{}');
 json_depth 
------------
          1
(1 row)

select json_depth('[]');
 json_depth 
------------
          1
(1 row)

select json_depth('[10,20]');
 json_depth 
------------
          2
(1 row)

select json_depth('[{},[]]');
 json_depth 
------------
          2
(1 row)

select json_depth('true');
 json_depth 
------------
          1
(1 row)

select json_depth('null');
 json_depth 
------------
          1
(1 row)

select json_depth('[}');
ERROR:  invalid input syntax for type json
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 1: [}
referenced column: json_depth
select json_depth('true');
 json_depth 
------------
          1
(1 row)

select json_depth('"dan"');
 json_depth 
------------
          1
(1 row)

select json_depth('null');
 json_depth 
------------
          1
(1 row)

select json_depth('[[1,{"a":1}],[1],[[[[[1]]]]]]');
 json_depth 
------------
          7
(1 row)

select json_depth('[2,[2],[],{"a":1,"b":{"c":"daf"}}]');
 json_depth 
------------
          4
(1 row)

select json_depth('[2,[2],[],{"a":1,"b":{"c":"d[{]{af"}}]');
 json_depth 
------------
          4
(1 row)

SELECT JSON_DEPTH('[10, {"a": 20}]');
 json_depth 
------------
          3
(1 row)

SELECT JSON_DEPTH('[10,{"a":1,"b":{"d":2,"e":{"balec":"bule"}}}]');
 json_depth 
------------
          5
(1 row)

select json_depth('{          }');
 json_depth 
------------
          1
(1 row)

select json_depth('{"a":{"b":2},"c":3}');
 json_depth 
------------
          3
(1 row)

select json_depth('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}');
 json_depth 
------------
          7
(1 row)

select json_depth('[[[[[[[1]]]]]],2,3,4,5]');
 json_depth 
------------
          8
(1 row)

select json_depth('{"a":[{"b":2},3]}');
 json_depth 
------------
          4
(1 row)

create table test1(data json);
insert into test1 values('{"a":1}');
insert into test1 values('{"a":1}');
insert into test1 values('[1,{"a":1},{"a":1,"B":{"c":1}}]');
select *from test1;
              data               
---------------------------------
 {"a":1}
 {"a":1}
 [1,{"a":1},{"a":1,"B":{"c":1}}]
(3 rows)

select json_depth(data) from test1;
 json_depth 
------------
          2
          2
          4
(3 rows)

drop table test1;
set dolphin.b_compatibility_mode = on;
create table test_json_table
(
   `char` char(100),
   `varchar` varchar(100),
   `json` json,
   `int1` tinyint,
   `binary` binary(100)
);
insert into test_json_table values ('[1,2,3,4,5]', '[1,2,3,4,5]', json_object('a', 1, 'b', 2), 1, '[1,2,3,4,5]');
select json_depth(`char`), json_depth(`varchar`), json_depth(`json`), pg_typeof(json_depth(`char`)), pg_typeof(json_depth(`varchar`)), pg_typeof(json_depth(`json`)) from test_json_table;
 json_depth | json_depth | json_depth | pg_typeof | pg_typeof | pg_typeof 
------------+------------+------------+-----------+-----------+-----------
          2 |          2 |          2 | bigint    | bigint    | bigint
(1 row)

create table test1 as select json_depth(`char`) as c1, json_depth(`varchar`) as c2, json_depth(`json`) as c3 from test_json_table;
-- expect error
select json_depth(`int1`) from test_json_table;
ERROR:  Invalid data type for JSON data in argument 1 to function json_depth
CONTEXT:  referenced column: json_depth
select json_depth(`binary`) from test_json_table;
ERROR:  Invalid data type for JSON data in argument 1 to function json_depth
CONTEXT:  referenced column: json_depth
drop table test1;
drop table test_json_table;
drop schema test_json_depth cascade;
reset current_schema;
