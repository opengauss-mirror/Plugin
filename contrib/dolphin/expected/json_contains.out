drop database if exists test_c;
NOTICE:  database "test_c" does not exist, skipping
create database test_c dbcompatibility 'b';
\c test_c
select json_contains('1',null);
 json_contains 
---------------
 
(1 row)

select json_contains(null,'1');
 json_contains 
---------------
 
(1 row)

select json_contains('[1,2,3]','1','$[0]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3]','1',null);
 json_contains 
---------------
 
(1 row)

select json_contains('[1,2,3]',null,'$[0]');
 json_contains 
---------------
 
(1 row)

select json_contains(null,'1','$[0]');
 json_contains 
---------------
 
(1 row)

select json_contains('1','null');
 json_contains 
---------------
 f
(1 row)

select json_contains('null','null');
 json_contains 
---------------
 t
(1 row)

select json_contains('1',1);
ERROR:  function json_contains(unknown, integer) does not exist
LINE 1: select json_contains('1',1);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: json_contains
select json_contains('-1','-1');
 json_contains 
---------------
 t
(1 row)

select json_contains('true','true');
 json_contains 
---------------
 t
(1 row)

select json_contains('true','false');
 json_contains 
---------------
 f
(1 row)

select json_contains('true','"true"');
 json_contains 
---------------
 f
(1 row)

select json_contains('6','6');
 json_contains 
---------------
 t
(1 row)

select json_contains('6','"6"');
 json_contains 
---------------
 f
(1 row)

select json_contains('null','null');
 json_contains 
---------------
 t
(1 row)

select json_contains('null','"null"');
 json_contains 
---------------
 f
(1 row)

select json_contains('null','true');
 json_contains 
---------------
 f
(1 row)

select json_contains('[1,2,3,4,5]','1');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,4,5]','[1,3,5]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[[[[[[[1]]]]]],2,3,4,5]','[[[1]]]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[[[[[[[1]]]]]],2,3,4,5]','[[[1,3,5]]]');
 json_contains 
---------------
 f
(1 row)

select json_contains('[1,2,3,[4]]','[1,4]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,[4]]','[[1,4]]');
 json_contains 
---------------
 f
(1 row)

select json_contains('{"a":{"b":2},"c":3}','{"c":3}');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":[1,2,3],"b":4,"c":5}','{"a":2}');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":{"b":2},"c":3}','{"a":{"b":1}}');
 json_contains 
---------------
 f
(1 row)

select json_contains('{"a":{"b":2},"c":3}','{"a":{"b":2}}');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":[1,2,3],"b":4,"c":5}','[1,2]');
 json_contains 
---------------
 f
(1 row)

select json_contains('{"a":[1,2,3],"b":4,"c":5}','4');
 json_contains 
---------------
 f
(1 row)

select json_contains('[1,2,3,4,5]','');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('[1,2,3,4,5]','');
                                           ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
referenced column: json_contains
select json_contains('[1,2,3,4,5]','[1,2');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('[1,2,3,4,5]','[1,2');
                                           ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,2
referenced column: json_contains
select json_contains('[1,2,3,4,5]','[1,]');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('[1,2,3,4,5]','[1,]');
                                           ^
DETAIL:  Expected JSON value, but found "]".
CONTEXT:  JSON data, line 1: [1,]
referenced column: json_contains
select json_contains('','1');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('','1');
                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
referenced column: json_contains
select json_contains('[1,2,3','1');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('[1,2,3','1');
                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: [1,2,3
referenced column: json_contains
select json_contains('[1,2,]','1');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('[1,2,]','1');
                             ^
DETAIL:  Expected JSON value, but found "]".
CONTEXT:  JSON data, line 1: [1,2,]
referenced column: json_contains
select json_contains('{"a":{"b":2},"c":3}','{"c:3}');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('{"a":{"b":2},"c":3}','{"c:3}');
                                                   ^
DETAIL:  Token ""c:3}" is invalid.
CONTEXT:  JSON data, line 1: {"c:3}
referenced column: json_contains
select json_contains('{"a":{"b":2},"c":3}','{"c":}');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('{"a":{"b":2},"c":3}','{"c":}');
                                                   ^
DETAIL:  Expected JSON value, but found "}".
CONTEXT:  JSON data, line 1: {"c":}
referenced column: json_contains
select json_contains('{"a":{"b":2},"c":3}','{"c":null}');
 json_contains 
---------------
 f
(1 row)

select json_contains('{"a":{"b":2},null:3}','{"c":3}');
ERROR:  invalid input syntax for type json
LINE 1: select json_contains('{"a":{"b":2},null:3}','{"c":3}');
                             ^
DETAIL:  Expected string, but found "null".
CONTEXT:  JSON data, line 1: {"a":{"b":2},null...
referenced column: json_contains
select json_contains('[1,2,3,4]','[2,4]','');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','[2,4]',);
ERROR:  syntax error at or near ")"
LINE 1: select json_contains('[1,2,3,4]','[2,4]',);
                                                 ^
select json_contains('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e.f');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e');
 json_contains 
---------------
 f
(1 row)

select json_contains('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3][3]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,[4,5,6,{"a":[7,8,9]}]]','[7,9]','$[3][3].a');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":[{"b":2},3]}','2','$.a[0]."b"');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,4]','2','$[1]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,4]','2','$[5]');
 json_contains 
---------------
 
(1 row)

select json_contains('{"a":1,"b":2}','2','$.a');
 json_contains 
---------------
 f
(1 row)

select json_contains('{"a":1,"b":2}','2','$.b');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":1,"b":2}','2','$.b.a');
 json_contains 
---------------
 
(1 row)

select json_contains('{"a":1,"b":2}','2','$."b"');
 json_contains 
---------------
 t
(1 row)

select json_contains('{"a":1,"b":2}','2','$.c');
 json_contains 
---------------
 
(1 row)

select json_contains('{"a":1,"b":2}','2','$.');
 json_contains 
---------------
 
(1 row)

select json_contains('{"a":1,"b":2}','2','$$.b');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('{"a":1,"b":2}','2','.b');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('{"a":1,"b":2}','2','$..b');
 json_contains 
---------------
 
(1 row)

select json_contains('{"a":1,"b":2}','2','$."b".');
 json_contains 
---------------
 
(1 row)

select json_contains('[1,2,3,4]','2','$[1]');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,4]','2','$[1]]');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','2','$[[1]]');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','1','$[]');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','2','$1');
ERROR:  Invalid jsonpath expression
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','[2,4]','$');
 json_contains 
---------------
 t
(1 row)

select json_contains('[1,2,3,4]','[2,4]','$[*]');
ERROR:  in this situation, path expressions may not contain the * and ** tokens
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,[4,5]]','2','$**[1]');
ERROR:  in this situation, path expressions may not contain the * and ** tokens
CONTEXT:  referenced column: json_contains
create table json_contains_test (
    target json,
    candidate json,
    path text
);
insert into json_contains_test values('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e.f');
insert into json_contains_test values('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e');
insert into json_contains_test values('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3][3]');
insert into json_contains_test values('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3]');
insert into json_contains_test values('[1,2,3,[4,5,6,{"a":[7,8,9]}]]','[7,9]','$[3][3].a');
insert into json_contains_test values('[1,2,3,[4,5,6,{"a":[7,8,9]}]]','[7,9]','$[3][3].a');
insert into json_contains_test values('{"a":[{"b":2},3]}','2','$.a[0]."b"');
insert into json_contains_test values('[1,2,3,4]','[2,4]','$');
select *, json_contains(target, candidate, path) from json_contains_test;
                   target                    | candidate |     path      | json_contains 
---------------------------------------------+-----------+---------------+---------------
 {"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3} | 2         | $.a.b.c.d.e.f | t
 {"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3} | 2         | $.a.b.c.d.e   | f
 [1,2,3,[4,5,6,[7,8,9]]]                     | [7,8]     | $[3][3]       | t
 [1,2,3,[4,5,6,[7,8,9]]]                     | [7,8]     | $[3]          | t
 [1,2,3,[4,5,6,{"a":[7,8,9]}]]               | [7,9]     | $[3][3].a     | t
 [1,2,3,[4,5,6,{"a":[7,8,9]}]]               | [7,9]     | $[3][3].a     | t
 {"a":[{"b":2},3]}                           | 2         | $.a[0]."b"    | t
 [1,2,3,4]                                   | [2,4]     | $             | t
(8 rows)

drop table json_contains_test;
\c postgres
drop database if exists test_c;
