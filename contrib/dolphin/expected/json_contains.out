create schema test_json_contains;
set current_schema to 'test_json_contains';
select json_contains('1',null);
 json_contains 
---------------
              
(1 row)

select json_contains(null,'1');
 json_contains 
---------------
              
(1 row)

select json_contains('[1,2,3]','1','$[0]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3]','1',null);
 json_contains 
---------------
              
(1 row)

select json_contains('[1,2,3]',null,'$[0]');
 json_contains 
---------------
              
(1 row)

select json_contains(null,'1','$[0]');
 json_contains 
---------------
              
(1 row)

select json_contains('1','null');
 json_contains 
---------------
             0
(1 row)

select json_contains('null','null');
 json_contains 
---------------
             1
(1 row)

select json_contains('1',1);
ERROR:  Invalid data type for JSON data in argument 2 to function json_contains
CONTEXT:  referenced column: json_contains
select json_contains('-1','-1');
 json_contains 
---------------
             1
(1 row)

select json_contains('true','true');
 json_contains 
---------------
             1
(1 row)

select json_contains('true','false');
 json_contains 
---------------
             0
(1 row)

select json_contains('true','"true"');
 json_contains 
---------------
             0
(1 row)

select json_contains('6','6');
 json_contains 
---------------
             1
(1 row)

select json_contains('6','"6"');
 json_contains 
---------------
             0
(1 row)

select json_contains('null','null');
 json_contains 
---------------
             1
(1 row)

select json_contains('null','"null"');
 json_contains 
---------------
             0
(1 row)

select json_contains('null','true');
 json_contains 
---------------
             0
(1 row)

select json_contains('[1,2,3,4,5]','1');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,4,5]','[1,3,5]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[[[[[[[1]]]]]],2,3,4,5]','[[[1]]]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[[[[[[[1]]]]]],2,3,4,5]','[[[1,3,5]]]');
 json_contains 
---------------
             0
(1 row)

select json_contains('[1,2,3,[4]]','[1,4]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,[4]]','[[1,4]]');
 json_contains 
---------------
             0
(1 row)

select json_contains('{"a":{"b":2},"c":3}','{"c":3}');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":[1,2,3],"b":4,"c":5}','{"a":2}');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":{"b":2},"c":3}','{"a":{"b":1}}');
 json_contains 
---------------
             0
(1 row)

select json_contains('{"a":{"b":2},"c":3}','{"a":{"b":2}}');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":[1,2,3],"b":4,"c":5}','[1,2]');
 json_contains 
---------------
             0
(1 row)

select json_contains('{"a":[1,2,3],"b":4,"c":5}','4');
 json_contains 
---------------
             0
(1 row)

select json_contains('[1,2,3,4,5]','');
ERROR:  Invalid JSON text in argument 2 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4,5]','[1,2');
ERROR:  Invalid JSON text in argument 2 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4,5]','[1,]');
ERROR:  Invalid JSON text in argument 2 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('','1');
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3','1');
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,]','1');
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":{"b":2},"c":3}','{"c:3}');
ERROR:  Invalid JSON text in argument 2 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":{"b":2},"c":3}','{"c":}');
ERROR:  Invalid JSON text in argument 2 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":{"b":2},"c":3}','{"c":null}');
 json_contains 
---------------
             0
(1 row)

select json_contains('{"a":{"b":2},null:3}','{"c":3}');
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','[2,4]','');
ERROR:  Invalid JSON path expression. The error is around character position 0.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','[2,4]',);
ERROR:  syntax error at or near ")"
LINE 1: select json_contains('[1,2,3,4]','[2,4]',);
                                                 ^
select json_contains('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e.f');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e');
 json_contains 
---------------
             0
(1 row)

select json_contains('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3][3]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,[4,5,6,{"a":[7,8,9]}]]','[7,9]','$[3][3].a');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":[{"b":2},3]}','2','$.a[0]."b"');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,4]','2','$[1]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,4]','2','$[5]');
 json_contains 
---------------
              
(1 row)

select json_contains('{"a":1,"b":2}','2','$.a');
 json_contains 
---------------
             0
(1 row)

select json_contains('{"a":1,"b":2}','2','$.b');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":1,"b":2}','2','$.b.a');
 json_contains 
---------------
              
(1 row)

select json_contains('{"a":1,"b":2}','2','$."b"');
 json_contains 
---------------
             1
(1 row)

select json_contains('{"a":1,"b":2}','2','$.c');
 json_contains 
---------------
              
(1 row)

select json_contains('{"a":1,"b":2}','2','$.');
ERROR:  Invalid JSON path expression. The error is around character position 2.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":1,"b":2}','2','$$.b');
ERROR:  Invalid JSON path expression. The error is around character position 1.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":1,"b":2}','2','.b');
ERROR:  Invalid JSON path expression. The error is around character position 1.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":1,"b":2}','2','$..b');
ERROR:  Invalid JSON path expression. The error is around character position 2.
CONTEXT:  referenced column: json_contains
select json_contains('{"a":1,"b":2}','2','$."b".');
ERROR:  Invalid JSON path expression. The error is around character position 6.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','2','$[1]');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,4]','2','$[1]]');
ERROR:  Invalid JSON path expression. The error is around character position 4.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','2','$[[1]]');
ERROR:  Invalid JSON path expression. The error is around character position 2.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','1','$[]');
ERROR:  Invalid JSON path expression. The error is around character position 2.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','2','$1');
ERROR:  Invalid JSON path expression. The error is around character position 1.
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,4]','[2,4]','$');
 json_contains 
---------------
             1
(1 row)

select json_contains('[1,2,3,4]','[2,4]','$[*]');
ERROR:  in this situation, path expressions may not contain the * and ** tokens
CONTEXT:  referenced column: json_contains
select json_contains('[1,2,3,[4,5]]','2','$**[1]');
ERROR:  in this situation, path expressions may not contain the * and ** tokens
CONTEXT:  referenced column: json_contains
select json_contains(1, null) as cons;
ERROR:  Invalid data type for JSON data in argument 1 to function json_contains
CONTEXT:  referenced column: cons
select json_contains('d',null);
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('看', null);
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
select json_contains('——', null);
ERROR:  Invalid JSON text in argument 1 to function json_contains.
CONTEXT:  referenced column: json_contains
create table json_contains_test (
    target text,
    candidate text,
    path text
);
insert into json_contains_test values('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e.f');
insert into json_contains_test values('{"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3}','2','$.a.b.c.d.e');
insert into json_contains_test values('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3][3]');
insert into json_contains_test values('[1,2,3,[4,5,6,[7,8,9]]]','[7,8]','$[3]');
insert into json_contains_test values('[1,2,3,[4,5,6,{"a":[7,8,9]}]]','[7,9]','$[3][3].a');
insert into json_contains_test values('[1,2,3,[4,5,6,{"a":[7,8,9]}]]','[7,9]','$[3][3].a');
insert into json_contains_test values('{"a":[{"b":2},3]}','2','$.a[0]."b"');
insert into json_contains_test values('[1,2,3,4]','[2,4]','$');
select *, json_contains(target, candidate, path) from json_contains_test;
                   target                    | candidate |     path      | json_contains 
---------------------------------------------+-----------+---------------+---------------
 {"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3} | 2         | $.a.b.c.d.e.f |             1
 {"a":{"b":{"c":{"d":{"e":{"f":2}}}}},"c":3} | 2         | $.a.b.c.d.e   |             0
 [1,2,3,[4,5,6,[7,8,9]]]                     | [7,8]     | $[3][3]       |             1
 [1,2,3,[4,5,6,[7,8,9]]]                     | [7,8]     | $[3]          |             1
 [1,2,3,[4,5,6,{"a":[7,8,9]}]]               | [7,9]     | $[3][3].a     |             1
 [1,2,3,[4,5,6,{"a":[7,8,9]}]]               | [7,9]     | $[3][3].a     |             1
 {"a":[{"b":2},3]}                           | 2         | $.a[0]."b"    |             1
 [1,2,3,4]                                   | [2,4]     | $             |             1
(8 rows)

drop table json_contains_test;
set dolphin.b_compatibility_mode = on;
set dolphin.b_compatibility_mode = on;
create table test_json_table
(
   `char` char(100),
   `varchar` varchar(100),
   `json` json,
   `int1` tinyint,
   `binary` binary(100)
);
insert into test_json_table values ('[1,2,3,4,5]', '[1,2,3,4,5]', json_object('a', 1, 'b', 2), 1, '[1,2,3,4,5]');
select json_contains(`char`, `json`), json_contains(`varchar`, `json`), json_contains(`json`, `json`), pg_typeof(json_contains(`char`, `json`)), pg_typeof(json_contains(`varchar`, `json`)), pg_typeof(json_contains(`json`, `json`)) from test_json_table;
 json_contains | json_contains | json_contains | pg_typeof | pg_typeof | pg_typeof 
---------------+---------------+---------------+-----------+-----------+-----------
             0 |             0 |             1 | bigint    | bigint    | bigint
(1 row)

create table test1 as select json_contains(`char`, `json`) as c1, json_contains(`varchar`, `json`) as c2, json_contains(`json`, `json`) as c3 from test_json_table;
-- expect error
select json_contains(`int1`, `json`) from test_json_table;
ERROR:  Invalid data type for JSON data in argument 1 to function json_contains
CONTEXT:  referenced column: json_contains
select json_contains(`binary`, `json`) from test_json_table;
ERROR:  Invalid data type for JSON data in argument 1 to function json_contains
CONTEXT:  referenced column: json_contains
drop table test1;
drop table test_json_table;
drop schema test_json_contains cascade;
reset current_schema;
