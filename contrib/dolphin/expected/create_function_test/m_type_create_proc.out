create schema m_create_proc_type;
set current_schema to 'm_create_proc_type';
--test create procedure 
delimiter //
CREATE PROCEDURE p()
  BEGIN
  DECLARE v INT DEFAULT 1;
  CASE v
  WHEN 2 THEN SELECT v;
  WHEN 3 THEN SELECT 0;
  ELSE
  BEGIN
  END;
  END CASE;
END;
//
DROP PROCEDURE IF EXISTS p//
CREATE PROCEDURE p()
  BEGIN
  END;
//
CREATE PROCEDURE proc1 ()
       BEGIN
         SELECT 1;
       END;
//
delimiter ;
-- test proc call
create table item(c1 int, c2 int);
create procedure procedure_1(a int, b int)
as
begin
   insert into item values(a, b);
end;
/
call procedure_1(1,2);
 procedure_1 
-------------
 
(1 row)

delimiter //
CREATE PROCEDURE procedure_1_m (c1 int, c2 int)
       BEGIN
         insert into item values(c1, c2);
       END;
//
delimiter ;
call procedure_1_m(6,9);
 procedure_1_m 
---------------
 
(1 row)

select * from item;
 c1 | c2 
----+----
  1 |  2
  6 |  9
(2 rows)

select procedure_1_m(6,9);
 procedure_1_m 
---------------
 
(1 row)

select * from procedure_1_m(6,9);
 procedure_1_m 
---------------
 
(1 row)

select * from item;
 c1 | c2 
----+----
  1 |  2
  6 |  9
  6 |  9
  6 |  9
(4 rows)

-- test declare
create table test (a int);
CREATE PROCEDURE testpro(a int) as
declare
b int;
begin
b  := 5;
insert into test values (a + b);
end;
/
call testpro (2);
 testpro 
---------
 
(1 row)

--error
delimiter //
CREATE PROCEDURE testpro_m() 
declare
b int;
begin
b  := 5;
insert into test values (a + b);
end;
//
ERROR:  syntax error at or near "declare
b int"
LINE 2: declare
        ^
delimiter ;
--success
delimiter //
CREATE PROCEDURE testpro_m(a int)
begin
declare 
b int;
b  := 5;
insert into test values (a + b);
end;
//
delimiter ;
call testpro_m (5);
 testpro_m 
-----------
 
(1 row)

select * from test;
 a  
----
  7
 10
(2 rows)

--testmulti declare
 delimiter //
 DROP PROCEDURE IF EXISTS testpro_m6//
NOTICE:  function testpro_m6() does not exist, skipping
 CREATE PROCEDURE testpro_m6(a int)
 begin
 declare b int;
 declare c int;
 b:= 9;
 insert into test values (a + b);
    begin 
    declare d int;
    insert into test values (a + b);
    end;
 end;
 //
DROP PROCEDURE IF EXISTS testpro_m6//
CREATE PROCEDURE testpro_m6(a int)
    begin
        declare b int;
        declare c int;
        b:= 9;
        insert into test values (a + b);
        begin
            insert into test values (a + b);
        end;
end//
 delimiter ;
 delimiter //
 CREATE PROCEDURE testpro_m7(a int)
 begin
 declare b int;
 declare c int;
 b := 9;
 insert into test values (a + b);
    begin 
    declare d int;
    insert into test values (a + b);
          begin
         declare e int;
         insert into test values (a + b);
         end;
         end;
 end;
 //
delimiter ;
call testpro_m6(10);
 testpro_m6 
------------
 
(1 row)

call testpro_m7(11);
 testpro_m7 
------------
 
(1 row)

select * from test;
 a  
----
  7
 10
 19
 19
 20
 20
 20
(7 rows)

-- test options 
delimiter //
CREATE PROCEDURE procedure_1_m_o (c1 int, c2 int) LANGUAGE SQL
       BEGIN
         insert into item values(88,88);
       END;
//
delimiter ;
delimiter //
CREATE PROCEDURE procedure_2_m_o() NO SQL READS SQL DATA LANGUAGE SQL
       BEGIN
         insert into item values(99, 99);
       END;
//
delimiter ;
-- issue fix 
-- test while
drop table if exists test9;
NOTICE:  table "test9" does not exist, skipping
create table test9(
id int(11) unsigned not null auto_increment,
sname varchar(255) not null,
  primary key (id)
)engine=innodb default charset=utf8;
WARNING:  CHARACTER SET for TABLE is not supported for current version. skipped
NOTICE:  CREATE TABLE will create implicit sequence "test9_id_seq" for serial column "test9.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test9_pkey" for table "test9"
drop procedure if exists test_proc;
NOTICE:  function test_proc() does not exist, skipping
delimiter //
create procedure test_proc()
begin
    declare i int;
	i := 1;
    while i<=10 do
        insert into test9 values(null,rand()*10);
        i := i+1;
    end while;
end;
//
delimiter ;
call test_proc();
 test_proc 
-----------
 
(1 row)

--test loop,if
delimiter //
create or replace procedure doiterate(p1 int)
begin
LABEL1:loop
p1 := p1+1;
if p1 < 10 then
raise notice '123';
end if;
exit LABEL1;
end loop LABEL1;
end;
//
delimiter ;
call doiterate(2);
NOTICE:  123
 doiterate 
-----------
 
(1 row)

--test repeat
delimiter //
CREATE or replace PROCEDURE dorepeat(p1 INT)
BEGIN
declare
i int = 0;
<<label>>
repeat
i = i + 1;
until i >p1 end repeat label;
raise notice '%',i;
end;
//
delimiter ;
select dorepeat(5);
NOTICE:  6
CONTEXT:  referenced column: dorepeat
 dorepeat 
----------
 
(1 row)

-- test  case
delimiter //
CREATE or replace PROCEDURE docase(p1 INT)
BEGIN
declare
i int = p1;
<<label>>
case i
when i > 10 then raise notice '%','big';
when i < 1 then raise notice '%','small';
else  raise notice '%','good';
end case;
end;
//
delimiter ;
select docase(4);
NOTICE:  good
CONTEXT:  referenced column: docase
 docase 
--------
 
(1 row)

select docase(0);
NOTICE:  big
CONTEXT:  referenced column: docase
 docase 
--------
 
(1 row)

select docase(100);
NOTICE:  good
CONTEXT:  referenced column: docase
 docase 
--------
 
(1 row)

--test empty 
drop procedure  if exists doempty;
NOTICE:  function doempty() does not exist, skipping
delimiter //
CREATE or replace PROCEDURE doempty()
BEGIN
end;
//
delimiter ;
call doempty();
 doempty 
---------
 
(1 row)

drop schema m_create_proc_type cascade;
NOTICE:  drop cascades to 18 other objects
DETAIL:  drop cascades to function p()
drop cascades to function proc1()
drop cascades to table item
drop cascades to function procedure_1(integer,integer)
drop cascades to function procedure_1_m(integer,integer)
drop cascades to table test
drop cascades to function testpro(integer)
drop cascades to function testpro_m(integer)
drop cascades to function testpro_m6(integer)
drop cascades to function testpro_m7(integer)
drop cascades to function procedure_1_m_o(integer,integer)
drop cascades to function procedure_2_m_o()
drop cascades to table test9
drop cascades to function test_proc()
drop cascades to function doiterate(integer)
drop cascades to function dorepeat(integer)
drop cascades to function docase(integer)
drop cascades to function doempty()
reset current_schema;
