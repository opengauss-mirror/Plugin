drop database if exists mysql_test;
NOTICE:  database "mysql_test" does not exist, skipping
create database mysql_test dbcompatibility 'b';
\c mysql_test
--验证DAYOFMONTH() DAYOFWEEK() DAYOFYEAR() HOUR() MICROSECOND() MINUTE() QUARTER() SECOND() WEEKDAY() WEEKOFYEAR() YEAR()
select DAYOFMONTH(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
         4
(1 row)

select DAYOFWEEK(timestamp '2021-11-4 16:30:44.341191');
 ?column? 
----------
        5
(1 row)

select DAYOFYEAR(timestamp '2021-12-31 16:30:44.341191');
 date_part 
-----------
       365
(1 row)

select HOUR(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
        16
(1 row)

select MICROSECOND(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
    341191
(1 row)

select MINUTE(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
        30
(1 row)

select QUARTER(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
         4
(1 row)

select SECOND(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
        44
(1 row)

select WEEKDAY(timestamp '2021-11-4 16:30:44.341191');
 ?column? 
----------
        3
(1 row)

select WEEKOFYEAR(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
        44
(1 row)

select YEAR(timestamp '2021-11-4 16:30:44.341191');
 date_part 
-----------
      2021
(1 row)

--测试点：LOCATE(substr,str)
select locate('test','testgood');
 locate 
--------
      1
(1 row)

select locate('','testgood');
 locate 
--------
      1
(1 row)

select locate(NULL,'testgood');
 locate 
--------
       
(1 row)

select locate(true,'testgood');
 locate 
--------
      0
(1 row)

select locate(false,'testgood');
 locate 
--------
      0
(1 row)

--测试点：LOCATE(substr,str,pos)
select locate('test','11testgood',5);
 locate 
--------
      0
(1 row)

select locate('test','11testgood',3);
 locate 
--------
      3
(1 row)

--测试点：IFNULL
SELECT IFNULL(NULL, 'test');
 nvl  
------
 test
(1 row)

SELECT IFNULL('test', NULL);
 nvl  
------
 test
(1 row)

SELECT IFNULL(NULL, NULL);
 nvl 
-----
 
(1 row)

SELECT IFNULL('test', '');
 nvl  
------
 test
(1 row)

SELECT IFNULL('', 'test');
 nvl 
-----
 
(1 row)

--测试点：IF(expr1,expr2,expr3)
SELECT IF(TRUE,'A','B');
 case 
------
 A
(1 row)

SELECT IF(1,'A','B');
 case 
------
 A
(1 row)

SELECT IF(12.35,'A','B');
 case 
------
 A
(1 row)

SELECT IF(-12,'A','B');
 case 
------
 A
(1 row)

SELECT IF('12.35abc','A','B');
ERROR:  invalid input syntax for type boolean: "12.35abc"
LINE 1: SELECT IF('12.35abc','A','B');
                  ^
CONTEXT:  referenced column: case
SELECT IF('打上卡','A','B');
ERROR:  invalid input syntax for type boolean: "打上卡"
LINE 1: SELECT IF('打上卡','A','B');
                  ^
CONTEXT:  referenced column: case
SELECT IF(FALSE,'A','B');
 case 
------
 B
(1 row)

SELECT IF(NULL,'A','B');
 case 
------
 B
(1 row)

SELECT IF(0,'A','B');
 case 
------
 B
(1 row)

SELECT IF(NULL,'A','B');
 case 
------
 B
(1 row)

SELECT IF('','A','B');
ERROR:  invalid input syntax for type boolean: ""
LINE 1: SELECT IF('','A','B');
                  ^
CONTEXT:  referenced column: case
SELECT IF('12.25abc','A','B');
ERROR:  invalid input syntax for type boolean: "12.25abc"
LINE 1: SELECT IF('12.25abc','A','B');
                  ^
CONTEXT:  referenced column: case
--测试点：验证bit_length（返回位数）
select * from pg_proc where proname in ('db_b_parser_bit_length');
 proname | pronamespace | proowner | prolang | procost | prorows | provariadic | protransform | proisagg | proiswindow | prosecdef | proleakproof | proisstrict | proretset | provolatile | pronargs | pronargdefaults | prorettype | proargtypes | proallargtypes | proargmodes | proargnames | proargdefaults | prosrc | probin | proconfig | proacl | prodefaultargpos | fencedmode | proshippable | propackage | prokind | proargsrc | propackageid | proisprivate | proargtypesext | prodefaultargposext | allargtypes | allargtypesext 

(0 rows)

--返回8、8、16
select bit_length(b'1'), bit_length(b'101'), bit_length(b'1011111111');
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |          8 |         16
(1 row)

--返回8、24、80
select bit_length('1'), bit_length('101'), bit_length('1011111111');
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |         24 |         80
(1 row)

--返回72、16、24
select bit_length('哈1哈\n'),bit_length('\n'),bit_length('\\n');
 bit_length | bit_length | bit_length 
------------+------------+------------
         72 |         16 |         24
(1 row)

--返回0、8、空值
select bit_length(''),bit_length(' '),bit_length(NULL);
 bit_length | bit_length | bit_length 
------------+------------+------------
          0 |          8 |           
(1 row)

--测试点：验证octet_length（返回字节数）
select * from pg_proc where proname in ('db_b_parser_octet_length');
 proname | pronamespace | proowner | prolang | procost | prorows | provariadic | protransform | proisagg | proiswindow | prosecdef | proleakproof | proisstrict | proretset | provolatile | pronargs | pronargdefaults | prorettype | proargtypes | proallargtypes | proargmodes | proargnames | proargdefaults | prosrc | probin | proconfig | proacl | prodefaultargpos | fencedmode | proshippable | propackage | prokind | proargsrc | propackageid | proisprivate | proargtypesext | prodefaultargposext | allargtypes | allargtypesext 

(0 rows)

--返回1、1、2
select octet_length(b'1'), octet_length(b'101'), octet_length(b'1011111111');
 octet_length | octet_length | octet_length 
--------------+--------------+--------------
            1 |            1 |            2
(1 row)

--返回1、3、10
select octet_length('1'), octet_length('101'), octet_length('1011111111');
 octet_length | octet_length | octet_length 
--------------+--------------+--------------
            1 |            3 |           10
(1 row)

--返回9、2、3
select octet_length('哈1哈\n'),octet_length('\n'),octet_length('\\n');--一个汉字3个字节；数字、字母、特殊字符一个字节
 octet_length | octet_length | octet_length 
--------------+--------------+--------------
            9 |            2 |            3
(1 row)

--返回0、8、空值
select octet_length(''),bit_length(' '),bit_length(NULL);
 octet_length | bit_length | bit_length 
--------------+------------+------------
            0 |          8 |           
(1 row)

--测试点：验证length（返回字符数）
select * from pg_proc where proname in ('db_b_parser_length');
 proname | pronamespace | proowner | prolang | procost | prorows | provariadic | protransform | proisagg | proiswindow | prosecdef | proleakproof | proisstrict | proretset | provolatile | pronargs | pronargdefaults | prorettype | proargtypes | proallargtypes | proargmodes | proargnames | proargdefaults | prosrc | probin | proconfig | proacl | prodefaultargpos | fencedmode | proshippable | propackage | prokind | proargsrc | propackageid | proisprivate | proargtypesext | prodefaultargposext | allargtypes | allargtypesext 

(0 rows)

--返回1、1、2
select length(b'1'), length(b'101'), length(b'1011111111');
 length | length | length 
--------+--------+--------
      1 |      1 |      2
(1 row)

--返回1、3、10
select length('1'), length('101'), length('1011111111');
 length | length | length 
--------+--------+--------
      1 |      3 |     10
(1 row)

--返回8、1、2
select length(E'哈1哈\n'),length(E'\n'),length(E'\\n');
 length | length | length 
--------+--------+--------
      8 |      1 |      2
(1 row)

--返回0、1、空
select length(''),length(' '),length(NULL);
 length | length | length 
--------+--------+--------
      0 |      1 |       
(1 row)

\c postgres
drop database if exists mysql_test;
