create schema db_b_parser2;
set current_schema to 'db_b_parser2';
--验证DAYOFMONTH() DAYOFWEEK() DAYOFYEAR() HOUR() MICROSECOND() MINUTE() QUARTER() SECOND() WEEKDAY() WEEKOFYEAR() YEAR()
select DAYOFMONTH(datetime '2021-11-4 16:30:44.341191');
 dayofmonth 
------------
          4
(1 row)

select DAYOFWEEK(datetime '2021-11-4 16:30:44.341191');
 dayofweek 
-----------
         5
(1 row)

select DAYOFYEAR(datetime '2021-12-31 16:30:44.341191');
 dayofyear 
-----------
       365
(1 row)

select HOUR(datetime '2021-11-4 16:30:44.341191');
 hour 
------
   16
(1 row)

select MICROSECOND(datetime '2021-11-4 16:30:44.341191');
 microsecond 
-------------
      341191
(1 row)

select MINUTE(datetime '2021-11-4 16:30:44.341191');
 minute 
--------
     30
(1 row)

select QUARTER(datetime '2021-11-4 16:30:44.341191');
 quarter 
---------
       4
(1 row)

select SECOND(datetime '2021-11-4 16:30:44.341191');
 second 
--------
     44
(1 row)

select WEEKDAY(datetime '2021-11-4 16:30:44.341191');
 weekday 
---------
       3
(1 row)

select WEEKOFYEAR(datetime '2021-11-4 16:30:44.341191');
 weekofyear 
------------
         44
(1 row)

select YEAR(datetime '2021-11-4 16:30:44.341191');
 year 
------
 2021
(1 row)

SELECT dayofmonth('2022-10-09 09:55:28.12345');
 dayofmonth 
------------
          9
(1 row)

SELECT dayofweek('2022-10-09 09:55:28.12345');
 dayofweek 
-----------
         1
(1 row)

SELECT dayofyear('2022-10-09 09:55:28.12345');
 dayofyear 
-----------
       282
(1 row)

SELECT hour('2022-10-09 09:55:28.12345');
 hour 
------
    9
(1 row)

SELECT microsecond('2022-10-09 09:55:28.12345');
 microsecond 
-------------
      123450
(1 row)

SELECT minute('2022-10-09 09:55:28.12345');
 minute 
--------
     55
(1 row)

SELECT quarter('2022-10-09 09:55:28.12345');
 quarter 
---------
       4
(1 row)

SELECT second('2022-10-09 09:55:28.12345');
 second 
--------
     28
(1 row)

SELECT weekday('2022-10-09 09:55:28.12345');
 weekday 
---------
       6
(1 row)

SELECT weekofyear('2022-10-09 09:55:28.12345');
 weekofyear 
------------
         40
(1 row)

select now(),dayofmonth(now()),dayofmonth('2022-06-13');
        now()        | dayofmonth | dayofmonth 
---------------------+------------+------------
--?13.*
(1 row)

select now(),dayofyear(now()),dayofyear('2022-06-13');
        now()        | dayofyear | dayofyear 
---------------------+-----------+-----------
--?164.*
(1 row)

select second('10:20:30');
 second 
--------
     30
(1 row)

select second('30:20:10.123456');
 second 
--------
     10
(1 row)

select second('2022-10-09 11:22:33');
 second 
--------
     33
(1 row)

select second('2022-10-09 11:22:33.456789');
 second 
--------
     33
(1 row)

select second('20221009112233');
 second 
--------
     33
(1 row)

select second('373839');
 second 
--------
     39
(1 row)

select second('2022-10-09');
WARNING:  invalid input syntax for type time: "2022-10-09"
CONTEXT:  referenced column: second
 second 
--------
     22
(1 row)

select minute('10:20:30');
 minute 
--------
     20
(1 row)

select minute('30:20:10.123456');
 minute 
--------
     20
(1 row)

select minute('2022-10-09 11:22:33');
 minute 
--------
     22
(1 row)

select minute('2022-10-09 11:22:33.456789');
 minute 
--------
     22
(1 row)

select minute('20221009112233');
 minute 
--------
     22
(1 row)

select minute('373839');
 minute 
--------
     38
(1 row)

select minute('2022-10-09');
WARNING:  invalid input syntax for type time: "2022-10-09"
CONTEXT:  referenced column: minute
 minute 
--------
     20
(1 row)

select microsecond('10:20:30');
 microsecond 
-------------
           0
(1 row)

select microsecond('30:20:10.123456');
 microsecond 
-------------
      123456
(1 row)

select microsecond('2022-10-09 11:22:33');
 microsecond 
-------------
           0
(1 row)

select microsecond('2022-10-09 11:22:33.456789');
 microsecond 
-------------
      456789
(1 row)

select microsecond('20221009112233');
 microsecond 
-------------
           0
(1 row)

select microsecond('373839');
 microsecond 
-------------
           0
(1 row)

select microsecond('2022-10-09');
WARNING:  invalid input syntax for type time: "2022-10-09"
CONTEXT:  referenced column: microsecond
 microsecond 
-------------
           0
(1 row)

select hour('10:20:30');
 hour 
------
   10
(1 row)

select hour('30:20:10.123456');
 hour 
------
   30
(1 row)

select hour('2022-10-09 11:22:33');
 hour 
------
   11
(1 row)

select hour('2022-10-09 11:22:33.456789');
 hour 
------
   11
(1 row)

select hour('20221009112233');
 hour 
------
   11
(1 row)

select hour('373839');
 hour 
------
   37
(1 row)

select hour('2022-10-09');
WARNING:  invalid input syntax for type time: "2022-10-09"
CONTEXT:  referenced column: hour
 hour 
------
    0
(1 row)

SELECT dayofmonth(20221009);
 dayofmonth 
------------
          9
(1 row)

SELECT dayofweek(20221009);
 dayofweek 
-----------
         1
(1 row)

SELECT dayofyear(20221009);
 dayofyear 
-----------
       282
(1 row)

SELECT quarter(20221009);
 quarter 
---------
       4
(1 row)

SELECT weekday(20221009);
 weekday 
---------
       6
(1 row)

SELECT weekofyear(20221009);
 weekofyear 
------------
         40
(1 row)

select year('');
WARNING:  invalid input syntax for type timestamp: ""
CONTEXT:  referenced column: year
 year 
------
     
(1 row)

select year('2022');
WARNING:  invalid input syntax for type timestamp: "2022"
CONTEXT:  referenced column: year
 year 
------
     
(1 row)

select year('2022-06');
WARNING:  invalid input syntax for type timestamp: "2022-06"
CONTEXT:  referenced column: year
 year 
------
     
(1 row)

select year('2022-06-13');
 year 
------
 2022
(1 row)

select year('9999-06-13');
 year 
------
 9999
(1 row)

select year('10000-06-13');
 year 
------
     
(1 row)

select year(20221009);
 year 
------
 2022
(1 row)

--测试点：LOCATE(substr,str)
select locate('test','testgood');
 locate 
--------
      1
(1 row)

select locate('','testgood');
 locate 
--------
      1
(1 row)

select locate(NULL,'testgood');
 locate 
--------
       
(1 row)

select locate(true,'testgood');
 locate 
--------
      0
(1 row)

select locate(false,'testgood');
 locate 
--------
      0
(1 row)

--测试点：LOCATE(substr,str,pos)
select locate('test','11testgood',5);
 locate 
--------
      0
(1 row)

select locate('test','11testgood',3);
 locate 
--------
      3
(1 row)

--测试点：IFNULL
SELECT IFNULL(NULL, 'test');
 ifnull 
--------
 test
(1 row)

SELECT IFNULL('test', NULL);
 ifnull 
--------
 test
(1 row)

SELECT IFNULL(NULL, NULL);
 ifnull 
--------
 
(1 row)

SELECT IFNULL('test', '');
 ifnull 
--------
 test
(1 row)

SELECT IFNULL('', 'test');
 ifnull 
--------
 
(1 row)

--测试点：IF(expr1,expr2,expr3)
SELECT IF(TRUE,'A','B');
 case 
------
 A
(1 row)

SELECT IF(1,'A','B');
 case 
------
 A
(1 row)

SELECT IF(12.35,'A','B');
 case 
------
 A
(1 row)

SELECT IF(-12,'A','B');
 case 
------
 A
(1 row)

SELECT IF('12.35abc','A','B');
ERROR:  invalid input syntax for type boolean: "12.35abc"
LINE 1: SELECT IF('12.35abc','A','B');
                  ^
CONTEXT:  referenced column: case
SELECT IF('打上卡','A','B');
ERROR:  invalid input syntax for type boolean: "打上卡"
LINE 1: SELECT IF('打上卡','A','B');
                  ^
CONTEXT:  referenced column: case
SELECT IF(FALSE,'A','B');
 case 
------
 B
(1 row)

SELECT IF(NULL,'A','B');
 case 
------
 B
(1 row)

SELECT IF(0,'A','B');
 case 
------
 B
(1 row)

SELECT IF(NULL,'A','B');
 case 
------
 B
(1 row)

SELECT IF('','A','B');
ERROR:  invalid input syntax for type boolean: ""
LINE 1: SELECT IF('','A','B');
                  ^
CONTEXT:  referenced column: case
SELECT IF('12.25abc','A','B');
ERROR:  invalid input syntax for type boolean: "12.25abc"
LINE 1: SELECT IF('12.25abc','A','B');
                  ^
CONTEXT:  referenced column: case
--测试点：验证bit_length（返回位数）
select * from pg_proc where proname in ('db_b_parser_bit_length');
 proname | pronamespace | proowner | prolang | procost | prorows | provariadic | protransform | proisagg | proiswindow | prosecdef | proleakproof | proisstrict | proretset | provolatile | pronargs | pronargdefaults | prorettype | proargtypes | proallargtypes | proargmodes | proargnames | proargdefaults | prosrc | probin | proconfig | proacl | prodefaultargpos | fencedmode | proshippable | propackage | prokind | proargsrc | propackageid | proisprivate | proargtypesext | prodefaultargposext | allargtypes | allargtypesext 

(0 rows)

--返回8、8、16
select bit_length(b'1'), bit_length(b'101'), bit_length(b'1011111111');
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |          8 |         16
(1 row)

--返回8、24、80
select bit_length('1'), bit_length('101'), bit_length('1011111111');
 bit_length | bit_length | bit_length 
------------+------------+------------
          8 |         24 |         80
(1 row)

--返回72、16、24
select bit_length('哈1哈\n'),bit_length('\n'),bit_length('\\n');
 bit_length | bit_length | bit_length 
------------+------------+------------
         72 |         16 |         24
(1 row)

--返回0、8、空值
select bit_length(''),bit_length(' '),bit_length(NULL);
 bit_length | bit_length | bit_length 
------------+------------+------------
          0 |          8 |           
(1 row)

--测试点：验证octet_length（返回字节数）
select * from pg_proc where proname in ('db_b_parser_octet_length');
 proname | pronamespace | proowner | prolang | procost | prorows | provariadic | protransform | proisagg | proiswindow | prosecdef | proleakproof | proisstrict | proretset | provolatile | pronargs | pronargdefaults | prorettype | proargtypes | proallargtypes | proargmodes | proargnames | proargdefaults | prosrc | probin | proconfig | proacl | prodefaultargpos | fencedmode | proshippable | propackage | prokind | proargsrc | propackageid | proisprivate | proargtypesext | prodefaultargposext | allargtypes | allargtypesext 

(0 rows)

--返回1、1、2
select octet_length(b'1'), octet_length(b'101'), octet_length(b'1011111111');
 octet_length | octet_length | octet_length 
--------------+--------------+--------------
            1 |            1 |            2
(1 row)

--返回1、3、10
select octet_length('1'), octet_length('101'), octet_length('1011111111');
 octet_length | octet_length | octet_length 
--------------+--------------+--------------
            1 |            3 |           10
(1 row)

--返回9、2、3
select octet_length('哈1哈\n'),octet_length('\n'),octet_length('\\n');--一个汉字3个字节；数字、字母、特殊字符一个字节
 octet_length | octet_length | octet_length 
--------------+--------------+--------------
            9 |            2 |            3
(1 row)

--返回0、8、空值
select octet_length(''),bit_length(' '),bit_length(NULL);
 octet_length | bit_length | bit_length 
--------------+------------+------------
            0 |          8 |           
(1 row)

--测试点：验证length（返回字符数）
select * from pg_proc where proname in ('db_b_parser_length');
 proname | pronamespace | proowner | prolang | procost | prorows | provariadic | protransform | proisagg | proiswindow | prosecdef | proleakproof | proisstrict | proretset | provolatile | pronargs | pronargdefaults | prorettype | proargtypes | proallargtypes | proargmodes | proargnames | proargdefaults | prosrc | probin | proconfig | proacl | prodefaultargpos | fencedmode | proshippable | propackage | prokind | proargsrc | propackageid | proisprivate | proargtypesext | prodefaultargposext | allargtypes | allargtypesext 

(0 rows)

--返回1、1、2
select length(b'1'), length(b'101'), length(b'1011111111');
 length | length | length 
--------+--------+--------
      1 |      1 |      2
(1 row)

--返回1、3、10
select length('1'), length('101'), length('1011111111');
 length | length | length 
--------+--------+--------
      1 |      3 |     10
(1 row)

--返回8、1、2
select length(E'哈1哈\n'),length(E'\n'),length(E'\\n');
 length | length | length 
--------+--------+--------
      8 |      1 |      2
(1 row)

--返回0、1、空
select length(''),length(' '),length(NULL);
 length | length | length 
--------+--------+--------
      0 |      1 |       
(1 row)

create table fchar_test(fchar char(10));
insert into fchar_test values('零一二三四五六七八九');
insert into fchar_test values('零一二三四五六七八九0');
ERROR:  value too long for type character(10)
CONTEXT:  referenced column: fchar
insert into fchar_test values('零一二三四五六七八九十');
ERROR:  value too long for type character(10)
CONTEXT:  referenced column: fchar
select fchar,length(fchar) from fchar_test order by 1,2;
        fchar         | length 
----------------------+--------
 零一二三四五六七八九 |     10
(1 row)

drop table fchar_test;
drop schema db_b_parser2 cascade;
reset current_schema;
drop database if exists db_char_latin1;
NOTICE:  database "db_char_latin1" does not exist, skipping
create database db_char_latin1 dbcompatibility 'B' encoding 'latin1' LC_CTYPE 'en_US' lc_collate 'en_US';
\c db_char_latin1
\encoding latin1;
create table t1(a character(4));
insert into t1 values('四个字符');
insert into t1 values('四个字0');
insert into t1 values('一二三四五');
ERROR:  value too long for type character(4)
CONTEXT:  referenced column: a
insert into t1 values('四个字01');
ERROR:  value too long for type character(4)
CONTEXT:  referenced column: a
\c postgres
drop database if exists db_char_latin1;
drop database if exists db_char_utf8;
NOTICE:  database "db_char_utf8" does not exist, skipping
create database db_char_utf8 dbcompatibility 'b' encoding 'utf8';
\c db_char_utf8
\encoding utf8;
create table t1(a character(4));
insert into t1 values('四个字符');
insert into t1 values('四个字0');
insert into t1 values('一二三四五');
ERROR:  value too long for type character(4)
CONTEXT:  referenced column: a
insert into t1 values('四个字01');
ERROR:  value too long for type character(4)
CONTEXT:  referenced column: a
\c postgres
drop database if exists db_char_utf8;
drop database if exists db_char_ascii;
NOTICE:  database "db_char_ascii" does not exist, skipping
create database db_char_ascii dbcompatibility 'b' encoding 'sql_ascii';
\c db_char_ascii
\encoding sql_ascii;
create table t1(a character(4));
insert into t1 values('四个字符');
insert into t1 values('四个字0');
insert into t1 values('一二三四五');
ERROR:  value too long for type character(4)
CONTEXT:  referenced column: a
insert into t1 values('四个字01');
ERROR:  value too long for type character(4)
CONTEXT:  referenced column: a
\c postgres
drop database if exists db_char_ascii;
