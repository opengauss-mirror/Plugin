create schema db_b_new_gram_test;
set current_schema to 'db_b_new_gram_test';
-- CREATE TABLE engine test
CREATE TABLE test_engine_1 (a int) engine = InnoDB;
CREATE TABLE  IF NOT EXISTS test_engine_2 (a int) engine = InnoDB;
CREATE TYPE test_engine_type1 AS (a int, b text);
CREATE TABLE test_engine_type_table1 OF test_engine_type1 engine = InnoDB;
CREATE TYPE test_engine_type2 AS (a int, b text);
CREATE TABLE IF NOT EXISTS test_engine_type_table2 OF test_engine_type2 engine = InnoDB;
CREATE TABLE test_engine_unreserved_keyword (a int) engine = memory;
CREATE TABLE test_engine_colname_keyword (a int) engine = between;
CREATE TABLE test_engine_1_1 (a int) engine = 'InnoDB';
CREATE TABLE  IF NOT EXISTS test_engine_2_1 (a int) engine = 'InnoDB';
CREATE TYPE test_engine_type1_1 AS (a int, b text);
CREATE TABLE test_engine_type_table1_1 OF test_engine_type1_1 engine = 'InnoDB';
CREATE TYPE test_engine_type2_1 AS (a int, b text);
CREATE TABLE IF NOT EXISTS test_engine_type_table2_1 OF test_engine_type2_1 engine = 'InnoDB';
CREATE TABLE test_engine_as engine = InnoDB as select a from test_engine_1;
-- CREATE TABLE COMPRESSION test
CREATE TABLE test_compression_1_pglz (a int) COMPRESSION = pglz;
\d+ test_compression_1_pglz
         Table "db_b_new_gram_test.test_compression_1_pglz"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=1

CREATE TABLE  IF NOT EXISTS test_compression_create_2_pglz (a int) COMPRESSION = pglz;
\d+ test_compression_create_2_pglz
      Table "db_b_new_gram_test.test_compression_create_2_pglz"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=1

CREATE TABLE test_compression_type_table_1_pglz OF test_engine_type1 COMPRESSION = pglz;
\d+ test_compression_type_table_1_pglz
    Table "db_b_new_gram_test.test_compression_type_table_1_pglz"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 a      | integer |           | plain    |              | 
 b      | text    |           | extended |              | 
Typed table of type: test_engine_type1
Has OIDs: no
Options: orientation=row, compresstype=1

CREATE TABLE IF NOT EXISTS test_compression_create_type_table_2_pglz OF test_engine_type2 COMPRESSION = pglz;
\d+ test_compression_create_type_table_2_pglz
 Table "db_b_new_gram_test.test_compression_create_type_table_2_pglz"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 a      | integer |           | plain    |              | 
 b      | text    |           | extended |              | 
Typed table of type: test_engine_type2
Has OIDs: no
Options: orientation=row, compresstype=1

CREATE TABLE test_compression_as_pglz COMPRESSION = pglz as select a from test_compression_1_pglz;
\d+ test_compression_as_pglz
         Table "db_b_new_gram_test.test_compression_as_pglz"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=1

CREATE TABLE test_compression_1_zstd (a int) COMPRESSION = zstd;
\d+ test_compression_1_zstd
         Table "db_b_new_gram_test.test_compression_1_zstd"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=2

CREATE TABLE  IF NOT EXISTS test_compression_create_2_zstd (a int) COMPRESSION = zstd;
\d+ test_compression_create_2_zstd
      Table "db_b_new_gram_test.test_compression_create_2_zstd"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=2

CREATE TABLE test_compression_type_table_1_zstd OF test_engine_type1 COMPRESSION = zstd;
\d+ test_compression_type_table_1_zstd
    Table "db_b_new_gram_test.test_compression_type_table_1_zstd"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 a      | integer |           | plain    |              | 
 b      | text    |           | extended |              | 
Typed table of type: test_engine_type1
Has OIDs: no
Options: orientation=row, compresstype=2

CREATE TABLE IF NOT EXISTS test_compression_create_type_table_2_zstd OF test_engine_type2 COMPRESSION = zstd;
\d+ test_compression_create_type_table_2_zstd
 Table "db_b_new_gram_test.test_compression_create_type_table_2_zstd"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 a      | integer |           | plain    |              | 
 b      | text    |           | extended |              | 
Typed table of type: test_engine_type2
Has OIDs: no
Options: orientation=row, compresstype=2

CREATE TABLE test_compression_as_zstd COMPRESSION = zstd as select a from test_compression_1_zstd;
\d+ test_compression_as_zstd
         Table "db_b_new_gram_test.test_compression_as_zstd"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=2

CREATE TABLE test_compression_1_none (a int) COMPRESSION = 'none';
\d+ test_compression_1_none
         Table "db_b_new_gram_test.test_compression_1_none"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=0, compression=no

CREATE TABLE  IF NOT EXISTS test_compression_create_2_none (a int) COMPRESSION = 'none';
\d+ test_compression_create_2_none
      Table "db_b_new_gram_test.test_compression_create_2_none"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=0, compression=no

CREATE TABLE test_compression_type_table_1_none OF test_engine_type1 COMPRESSION = 'none';
\d+ test_compression_type_table_1_none
    Table "db_b_new_gram_test.test_compression_type_table_1_none"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 a      | integer |           | plain    |              | 
 b      | text    |           | extended |              | 
Typed table of type: test_engine_type1
Has OIDs: no
Options: orientation=row, compresstype=0, compression=no

CREATE TABLE IF NOT EXISTS test_compression_create_type_table_2_none OF test_engine_type2 COMPRESSION = 'none';
\d+ test_compression_create_type_table_2_none
 Table "db_b_new_gram_test.test_compression_create_type_table_2_none"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 a      | integer |           | plain    |              | 
 b      | text    |           | extended |              | 
Typed table of type: test_engine_type2
Has OIDs: no
Options: orientation=row, compresstype=0, compression=no

CREATE TABLE test_compression_as_none COMPRESSION = none as select a from test_compression_1_none;
\d+ test_compression_as_none
         Table "db_b_new_gram_test.test_compression_as_none"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
Has OIDs: no
Options: orientation=row, compresstype=0, compression=no

CREATE TABLE test_compression_1_aaaa (a int) COMPRESSION = aaaa;
ERROR:  unrecognized compress type
CREATE TABLE  IF NOT EXISTS test_compression_create_2_aaaa (a int) COMPRESSION = aaaa;
ERROR:  unrecognized compress type
CREATE TABLE test_compression_type_table_1_aaaa OF test_engine_type1 COMPRESSION = aaaa;
ERROR:  unrecognized compress type
CREATE TABLE IF NOT EXISTS test_compression_create_type_table_2_aaaa OF test_engine_type2 COMPRESSION = aaaa;
ERROR:  unrecognized compress type
CREATE TABLE test_compression_as_aaaa COMPRESSION = aaaa as select a from test_compression_1_aaaa;
ERROR:  unrecognized compress type
-- ALTER TABLE COMPRESSION test
ALTER TABLE test_compression_1_pglz COMPRESSION = zstd;
ERROR:  syntax error at or near "COMPRESSION"
LINE 1: ALTER TABLE test_compression_1_pglz COMPRESSION = zstd;
                                            ^
-- DROP INDEX ... ON TABLE
CREATE TABLE test (a int);
CREATE INDEX test_index1 ON test USING btree(a);
CREATE INDEX test_index2 ON test USING btree(a);
DROP INDEX test_index1 ON test;
DROP INDEX IF EXISTS test_index2 ON test;
DROP TABLE test;
-- LIST PARTITION TEST
CREATE TABLE test_list1 (col1 int, col2 int)
PARTITION BY list(col1)
(
PARTITION p1 VALUES (2000),
PARTITION p2 VALUES (3000),
PARTITION p3 VALUES (4000),
PARTITION p4 VALUES (5000)
);
\d+ test_list1
                Table "db_b_new_gram_test.test_list1"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 col1   | integer |           | plain   |              | 
 col2   | integer |           | plain   |              | 
Partition By LIST(col1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

CREATE TABLE test_list2 (col1 int, col2 int)
PARTITION BY list(col1)
(
PARTITION p1 VALUES IN (2000),
PARTITION p2 VALUES IN (3000),
PARTITION p3 VALUES IN (4000),
PARTITION p4 VALUES IN (5000)
);
\d+ test_list2
                Table "db_b_new_gram_test.test_list2"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 col1   | integer |           | plain   |              | 
 col2   | integer |           | plain   |              | 
Partition By LIST(col1)
Number of partitions: 4 (View pg_partition to check each partition range.)
Has OIDs: no
Options: orientation=row, compression=no

-- INSERT
INSERT test_engine_1 VALUES (1);
-- VALUES and VALUE
INSERT INTO test_engine_1 VALUES (2);
INSERT INTO test_engine_1 VALUE (3);
-- INSERT and VALUE
INSERT test_engine_1 VALUE (4);
-- SELECT DISTINCT
INSERT INTO test_engine_1 VALUES (2) ORDER BY 1;
SELECT DISTINCT * FROM test_engine_1 ORDER BY 1;
 a 
---
 1
 2
 3
 4
(4 rows)

SELECT DISTINCT ON (a % 2) * FROM test_engine_1 ORDER BY (a % 2);
 a 
---
 2
 1
(2 rows)

SELECT DISTINCTROW * FROM test_engine_1 ORDER BY 1;
 a 
---
 1
 2
 3
 4
(4 rows)

SELECT DISTINCTROW ON (a % 2) * FROM test_engine_1 ORDER BY (a % 2);
 a 
---
 2
 1
(2 rows)

-- DROP PREPARE
PREPARE instr_test_1(int) AS INSERT INTO test_engine_1 VALUES ($1);
PREPARE instr_test_2(int) AS INSERT INTO test_engine_1 VALUES ($1);
PREPARE instr_test_3(int) AS INSERT INTO test_engine_1 VALUES ($1);
SELECT count(*) FROM PG_PREPARED_STATEMENTS WHERE name LIKE '%instr_test%';
 count 
-------
     3
(1 row)

DROP PREPARE instr_test_1;
SELECT count(*) FROM PG_PREPARED_STATEMENTS WHERE name LIKE '%instr_test%';
 count 
-------
     2
(1 row)

DROP PREPARE ALL;
SELECT count(*) FROM PG_PREPARED_STATEMENTS WHERE name LIKE '%instr_test%';
 count 
-------
     0
(1 row)

DROP TEMPORARY TABLE test_engine_1 CASCADE;
-- new grammar test for analyze table
CREATE TABLE t_new_analyze(c1 int, c2 text);
ANALYZE NO_WRITE_TO_BINLOG TABLE t_new_analyze;
              Table               |   Op    | Msg_type | Msg_text 
----------------------------------+---------+----------+----------
 db_b_new_gram_test.t_new_analyze | analyze | status   | OK
(1 row)

ANALYZE LOCAL TABLE t_new_analyze;
              Table               |   Op    | Msg_type | Msg_text 
----------------------------------+---------+----------+----------
 db_b_new_gram_test.t_new_analyze | analyze | status   | OK
(1 row)

ANALYZE TABLE t_new_analyze;
              Table               |   Op    | Msg_type | Msg_text 
----------------------------------+---------+----------+----------
 db_b_new_gram_test.t_new_analyze | analyze | status   | OK
(1 row)

ANALYZE TABLE t_not_exist, t_new_analyze;
              Table               |   Op    | Msg_type |                         Msg_text                         
----------------------------------+---------+----------+----------------------------------------------------------
 db_b_new_gram_test.t_not_exist   | analyze | Error    | relation "db_b_new_gram_test.t_not_exist" does not exist
 db_b_new_gram_test.t_not_exist   | analyze | status   | Operation failed
 db_b_new_gram_test.t_new_analyze | analyze | status   | OK
(3 rows)

VACUUM ANALYZE TABLE t_new_analyze; --error
ERROR:  syntax error at or near "TABLE"
LINE 1: VACUUM ANALYZE TABLE t_new_analyze;
                       ^
-- new grammar test for CREATE TABLESPACE
CREATE TABLESPACE test_tbspace ADD DATAFILE 'test_tbspace1';
ALTER TABLESPACE test_tbspace rename to test_tbspace_1 wait;
select * from pg_tablespace where spcname='test_tbspace_1';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_1 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_1 rename to test_tbspace_2 wait engine='xx';
select * from pg_tablespace where spcname='test_tbspace_2';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_2 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_2 rename to test_tbspace_3 engine='xx';
select * from pg_tablespace where spcname='test_tbspace_3';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_3 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_3 rename to test_tbspace_4 engine='xx' wait;
select * from pg_tablespace where spcname='test_tbspace_4';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_4 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_4 rename to test_tbspace_5 engine='xx' wait engine='yy';
select * from pg_tablespace where spcname='test_tbspace_5';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_5 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_5 rename to test_tbspace_6;
ALTER TABLESPACE test_tbspace_6 set (seq_page_cost=111) wait;
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl |     spcoptions      | spcmaxsize | relative 
----------------+----------+--------+---------------------+------------+----------
 test_tbspace_6 |       10 |        | {seq_page_cost=111} |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 reset (seq_page_cost) wait engine='xx';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 set (seq_page_cost=222) wait engine='xx';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl |     spcoptions      | spcmaxsize | relative 
----------------+----------+--------+---------------------+------------+----------
 test_tbspace_6 |       10 |        | {seq_page_cost=222} |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 reset (seq_page_cost) engine='xx';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 set (seq_page_cost=333) engine='xx';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl |     spcoptions      | spcmaxsize | relative 
----------------+----------+--------+---------------------+------------+----------
 test_tbspace_6 |       10 |        | {seq_page_cost=333} |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 reset (seq_page_cost) engine='xx' wait;
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 set (seq_page_cost=444) engine='xx' wait;
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl |     spcoptions      | spcmaxsize | relative 
----------------+----------+--------+---------------------+------------+----------
 test_tbspace_6 |       10 |        | {seq_page_cost=444} |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 reset (seq_page_cost) engine='xx' wait engine='yy';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 set (seq_page_cost=555) engine='xx' wait engine='yy';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl |     spcoptions      | spcmaxsize | relative 
----------------+----------+--------+---------------------+------------+----------
 test_tbspace_6 |       10 |        | {seq_page_cost=555} |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 reset (seq_page_cost);
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 set (seq_page_cost=666);
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl |     spcoptions      | spcmaxsize | relative 
----------------+----------+--------+---------------------+------------+----------
 test_tbspace_6 |       10 |        | {seq_page_cost=666} |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 reset (seq_page_cost) wait;
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            |            | t
(1 row)

ALTER TABLESPACE test_tbspace_6 RESIZE MAXSIZE '11M' wait;
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            | 11264 K    | t
(1 row)

ALTER TABLESPACE test_tbspace_6 RESIZE MAXSIZE '22M' wait engine='xx';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            | 22528 K    | t
(1 row)

ALTER TABLESPACE test_tbspace_6 RESIZE MAXSIZE '33M' engine='xx';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            | 33792 K    | t
(1 row)

ALTER TABLESPACE test_tbspace_6 RESIZE MAXSIZE '44M' engine='xx' wait;
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            | 45056 K    | t
(1 row)

ALTER TABLESPACE test_tbspace_6 RESIZE MAXSIZE '55M' engine='xx' wait engine='yy';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            | 56320 K    | t
(1 row)

ALTER TABLESPACE test_tbspace_6 RESIZE MAXSIZE '66M';
select * from pg_tablespace where spcname='test_tbspace_6';
    spcname     | spcowner | spcacl | spcoptions | spcmaxsize | relative 
----------------+----------+--------+------------+------------+----------
 test_tbspace_6 |       10 |        |            | 67584 K    | t
(1 row)

create user u_test_tbspace identified by 'test-1234';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
create user u_test_tbspace2 identified by 'test-1234';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
ALTER TABLESPACE test_tbspace_6 owner to u_test_tbspace;
select usename from pg_tablespace left join pg_user on pg_tablespace.spcowner = pg_user.usesysid where spcname='test_tbspace_6';
    usename     
----------------
 u_test_tbspace
(1 row)

ALTER TABLESPACE test_tbspace_6 owner to u_test_tbspace2 wait engine='xx';
select usename from pg_tablespace left join pg_user on pg_tablespace.spcowner = pg_user.usesysid where spcname='test_tbspace_6';
     usename     
-----------------
 u_test_tbspace2
(1 row)

ALTER TABLESPACE test_tbspace_6 owner to u_test_tbspace engine='xx';
select usename from pg_tablespace left join pg_user on pg_tablespace.spcowner = pg_user.usesysid where spcname='test_tbspace_6';
    usename     
----------------
 u_test_tbspace
(1 row)

ALTER TABLESPACE test_tbspace_6 owner to u_test_tbspace2 engine='xx' wait;
select usename from pg_tablespace left join pg_user on pg_tablespace.spcowner = pg_user.usesysid where spcname='test_tbspace_6';
     usename     
-----------------
 u_test_tbspace2
(1 row)

ALTER TABLESPACE test_tbspace_6 owner to u_test_tbspace engine='xx' wait engine='yy';
select usename from pg_tablespace left join pg_user on pg_tablespace.spcowner = pg_user.usesysid where spcname='test_tbspace_6';
    usename     
----------------
 u_test_tbspace
(1 row)

ALTER TABLESPACE test_tbspace_6 owner to u_test_tbspace2;
select usename from pg_tablespace left join pg_user on pg_tablespace.spcowner = pg_user.usesysid where spcname='test_tbspace_6';
     usename     
-----------------
 u_test_tbspace2
(1 row)

DROP TABLESPACE test_tbspace_6 engine='zz';
drop user u_test_tbspace;
drop user u_test_tbspace2;
CREATE TABLESPACE test_tbspace ADD DATAFILE 'test_tbspace1';
CREATE TABLE t_tbspace(num int) TABLESPACE test_tbspace;
\d t_tbspace
Table "db_b_new_gram_test.t_tbspace"
 Column |  Type   | Modifiers 
--------+---------+-----------
 num    | integer | 
Tablespace: "test_tbspace"

DROP TABLE t_tbspace;
DROP TABLESPACE test_tbspace;
CREATE TABLESPACE test_tbspace_ibd ADD DATAFILE 'test_tbspace1.ibd';
WARNING:  Suffix ".ibd" of datafile path detected. The actual path will be renamed as "test_tbspace1_ibd"
CREATE TABLE t_tbspace(num int) TABLESPACE test_tbspace_ibd;
\d t_tbspace
Table "db_b_new_gram_test.t_tbspace"
 Column |  Type   | Modifiers 
--------+---------+-----------
 num    | integer | 
Tablespace: "test_tbspace_ibd"

DROP TABLE t_tbspace;
DROP TABLESPACE test_tbspace_ibd;
CREATE TABLESPACE test_tbspace_ibd_1 ADD DATAFILE 'abc';
DROP TABLESPACE test_tbspace_ibd_1;
CREATE TABLESPACE test_tbspace_ibd_2 ADD DATAFILE '.ibd';
ERROR:  relative location can only be formed of 'a~z', 'A~Z', '0~9', '-', '_' and two level directory at most
DROP TABLESPACE test_tbspace_ibd_2;
ERROR:  Tablespace "test_tbspace_ibd_2" does not exist.
-- new grammar test for RENAME [TO | AS]
CREATE TABLE t_rename(c int);
\d t_rename
Table "db_b_new_gram_test.t_rename"
 Column |  Type   | Modifiers 
--------+---------+-----------
 c      | integer | 

ALTER TABLE t_rename RENAME TO t_rename_to;
\d t_rename_to
Table "db_b_new_gram_test.t_rename_to"
 Column |  Type   | Modifiers 
--------+---------+-----------
 c      | integer | 

ALTER TABLE t_rename_to RENAME AS t_rename_as;
\d t_rename_as
Table "db_b_new_gram_test.t_rename_as"
 Column |  Type   | Modifiers 
--------+---------+-----------
 c      | integer | 

DROP TABLE t_rename_as;
-- new grammar test for CREATE INDEX
DROP TABLE IF EXISTS t_index_new_grammar;
NOTICE:  table "t_index_new_grammar" does not exist, skipping
CREATE TABLE t_index_new_grammar(c1 int, c2 int);
CREATE INDEX test_index_btree_1 ON t_index_new_grammar USING btree(c1);
CREATE INDEX test_index_btree_2 USING btree ON t_index_new_grammar(c2);
\d t_index_new_grammar
Table "db_b_new_gram_test.t_index_new_grammar"
 Column |  Type   | Modifiers 
--------+---------+-----------
 c1     | integer | 
 c2     | integer | 
Indexes:
    "test_index_btree_1" btree (c1) TABLESPACE pg_default
    "test_index_btree_2" btree (c2) TABLESPACE pg_default

DROP INDEX test_index_btree_1;
DROP INDEX test_index_btree_2;
DROP TABLE t_index_new_grammar;
-- new grammar test for COLLATE, CHARSET, ROW_FORMAT in column and table level
CREATE TABLE t_column_collate(c text COLLATE test_collate);
WARNING:  Invalid collation for column c detected. default value set
DROP TABLE t_column_collate;
CREATE TABLE t_column_collate(c text COLLATE "en_US");
DROP TABLE t_column_collate;
CREATE TABLE t_column_collate(c text COLLATE en_US);
WARNING:  Invalid collation for column c detected. default value set
DROP TABLE t_column_collate;
CREATE TABLE t_column_charset(c text CHARSET test_charset);
WARNING:  test_charset is not a valid encoding name. default value set
DROP TABLE t_column_charset;
CREATE TABLE t_column_charset(c text CHARSET "test_charset");
WARNING:  test_charset is not a valid encoding name. default value set
DROP TABLE t_column_charset;
CREATE TABLE t_table_collate(c text) COLLATE test_collate;
WARNING:  Invalid collation detected. default value set
DROP TABLE t_table_collate;
CREATE TABLE t_table_default_collate(c text) DEFAULT COLLATE test_collate;
WARNING:  Invalid collation detected. default value set
DROP TABLE t_table_default_collate;
CREATE TABLE t_table_charset(c text) CHARSET test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
DROP TABLE t_table_charset;
CREATE TABLE t_table_charset(c text) CHARACTER SET test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
DROP TABLE t_table_charset;
CREATE TABLE t_table_default_charset(c text) DEFAULT CHARACTER SET test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
DROP TABLE t_table_default_charset;
CREATE TABLE t_table_default_charset(c text) DEFAULT CHARSET test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
DROP TABLE t_table_default_charset;
CREATE TABLE t_table_row_format(c text) ROW_FORMAT test_row_format;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
DROP TABLE t_table_row_format;
CREATE TABLE t_table_row_format_default(c text) ROW_FORMAT = DEFAULT;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
DROP TABLE t_table_row_format_default;
CREATE TABLE t_table_row_format_default(c text) ROW_FORMAT DEFAULT;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
DROP TABLE t_table_row_format_default;
CREATE TABLE t_mixed_table_option(c text) ROW_FORMAT test_row_format CHARSET test_charset COLLATE test_collate;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  Invalid collation detected. default value set
DROP TABLE t_mixed_table_option;
CREATE TABLE t_character_set_column(c text CHARACTER SET test_character_set);
WARNING:  test_character_set is not a valid encoding name. default value set
DROP TABLE t_character_set_column;
CREATE TABLE t_charset_column(c text CHARSET test_character_set);
WARNING:  test_character_set is not a valid encoding name. default value set
DROP TABLE t_charset_column;
CREATE TABLE t_charset_column(c text(10) CHARSET test_character_set);
WARNING:  test_character_set is not a valid encoding name. default value set
DROP TABLE t_charset_column;
CREATE TABLE t_charset_enum_column(c ENUM('a', 'b', 'c') CHARSET test_character_set);
WARNING:  test_character_set is not a valid encoding name. default value set
DROP TABLE t_charset_enum_column;
-- test for alter statement
CREATE TABLE t_alter_test(c text);
ALTER TABLE t_alter_test DEFAULT COLLATE = test_collate;
WARNING:  Invalid collation detected. default value set
ALTER TABLE t_alter_test DEFAULT CHARACTER SET = test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
ALTER TABLE t_alter_test DEFAULT CHARSET = test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
ALTER TABLE t_alter_test ROW_FORMAT = DEFAULT;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
ALTER TABLE t_alter_test ROW_FORMAT = DYNAMIC;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
ALTER TABLE t_alter_test ROW_FORMAT = FIXED;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
ALTER TABLE t_alter_test ROW_FORMAT = COMPRESSED;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
ALTER TABLE t_alter_test ROW_FORMAT = REDUNDANT;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
ALTER TABLE t_alter_test ROW_FORMAT = COMPACT;
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
-- mixture and out of order
ALTER TABLE t_alter_test ROW_FORMAT = COMPACT, COLLATE = test_collate, CHARACTER SET test_charset;
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
WARNING:  Invalid collation detected. default value set
DROP TABLE t_alter_test;
-- test for single quote and double quotes input
CREATE TABLE t_quote_test(c text) ROW_FORMAT = 'test_row_format' COLLATE = 'test_collate' CHARSET = 'test_charset';
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  Invalid collation detected. default value set
DROP TABLE t_quote_test;
CREATE TABLE t_quote_test(c text) ROW_FORMAT = "test_row_format" COLLATE = "test_collate" CHARSET = "test_charset";
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  Invalid collation detected. default value set
DROP TABLE t_quote_test;
CREATE TABLE t_quote_test(c text CHARSET 'test_charset' COLLATE 'test_collate');
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  Invalid collation for column c detected. default value set
DROP TABLE t_quote_test;
CREATE TABLE t_quote_test(c text CHARSET "test_charset" COLLATE "test_collate");
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  Invalid collation for column c detected. default value set
CREATE TABLE t_quote_test(c text CHARSET "default" COLLATE "default");
WARNING:  default is not a valid encoding name. default value set
ERROR:  relation "t_quote_test" already exists in schema "db_b_new_gram_test"
DETAIL:  creating new table with existing name in the same schema
ALTER TABLE t_quote_test ROW_FORMAT = 'COMPACT', COLLATE = 'test_collate', CHARACTER SET 'test_charset';
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
WARNING:  Invalid collation detected. default value set
ALTER TABLE t_quote_test ROW_FORMAT = "COMPACT", COLLATE = "test_collate", CHARACTER SET "test_charset";
WARNING:  test_charset is not a valid encoding name. default value set
WARNING:  ROW_FORMAT for TABLE is not supported for current version. skipped
WARNING:  Invalid collation detected. default value set
-- test for integrity of function text
SELECT text(10);
 text 
------
 10
(1 row)

SELECT text(true);
 text 
------
 1
(1 row)

SELECT text('jack'::name);
 text 
------
 jack
(1 row)

SELECT text('hank');
 text 
------
 hank
(1 row)

-- new grammar test for group by xxx with rollup
CREATE TABLE t_with_rollup(id int, name varchar(20), area varchar(50), count int);
INSERT INTO t_with_rollup values(1, 'a', 'A', 10);
INSERT INTO t_with_rollup values(2, 'b', 'B', 15);
INSERT INTO t_with_rollup values(2, 'b', 'B', 20);
INSERT INTO t_with_rollup values(3, 'c', 'C', 50);
INSERT INTO t_with_rollup values(3, 'c', 'C', 15);
SELECT name, sum(count) FROM t_with_rollup GROUP BY ROLLUP(name);
 name | sum 
------+-----
 a    |  10
 b    |  35
 c    |  65
      | 110
(4 rows)

SELECT name, sum(count) FROM t_with_rollup GROUP BY (name) WITH ROLLUP;
 name | sum 
------+-----
 a    |  10
 b    |  35
 c    |  65
      | 110
(4 rows)

SELECT name, sum(count) FROM t_with_rollup GROUP BY id, name;
 name | sum 
------+-----
 c    |  65
 b    |  35
 a    |  10
(3 rows)

SELECT name, sum(count) FROM t_with_rollup GROUP BY (id, name);
 name | sum 
------+-----
 c    |  65
 b    |  35
 a    |  10
(3 rows)

SELECT name, sum(count) FROM t_with_rollup GROUP BY ROLLUP (id, name);
 name | sum 
------+-----
 a    |  10
      |  10
 b    |  35
      |  35
 c    |  65
      |  65
      | 110
(7 rows)

SELECT name, sum(count) FROM t_with_rollup GROUP BY (id, name) WITH ROLLUP;
ERROR:  Operand should contain 1 column(s) fro WITH ROLLUP
SELECT id, sum(count) FROM t_with_rollup GROUP BY id, CUBE(area), ROLLUP(area);
 id | sum 
----+-----
  1 |  10
  1 |  10
  1 |  10
  1 |  10
  2 |  35
  2 |  35
  2 |  35
  2 |  35
  3 |  65
  3 |  65
  3 |  65
  3 |  65
(12 rows)

SELECT id, sum(count) FROM t_with_rollup GROUP BY id, CUBE(area), area WITH ROLLUP;
 id | sum 
----+-----
  1 |  10
  1 |  10
  1 |  10
  1 |  10
  2 |  35
  2 |  35
  2 |  35
  2 |  35
  3 |  65
  3 |  65
  3 |  65
  3 |  65
(12 rows)

SELECT id, name, area, sum(count) FROM t_with_rollup GROUP BY id, name, CUBE(name), ROLLUP(id, name, area);
 id | name | area | sum 
----+------+------+-----
  1 | a    | A    |  10
  1 | a    | A    |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  2 | b    | B    |  35
  2 | b    | B    |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  3 | c    | C    |  65
  3 | c    | C    |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
(24 rows)

SELECT id, name, area, sum(count) FROM t_with_rollup GROUP BY id, name, CUBE(name), id, name, area WITH ROLLUP;
 id | name | area | sum 
----+------+------+-----
  1 | a    | A    |  10
  1 | a    | A    |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  1 | a    |      |  10
  2 | b    | B    |  35
  2 | b    | B    |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  2 | b    |      |  35
  3 | c    | C    |  65
  3 | c    | C    |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
  3 | c    |      |  65
(24 rows)

SELECT id, name, area, sum(count) FROM t_with_rollup GROUP BY id, name, CUBE(name), (id, name, area) WITH ROLLUP;
ERROR:  Operand should contain 1 column(s) fro WITH ROLLUP
-- test for integrity of grammar WITH DATA since we revised parser.
CREATE TABLE t_with_data AS SELECT id, name, sum(count) FROM t_with_rollup GROUP BY id, name WITH DATA;
SELECT * FROM t_with_data;
 id | name | sum 
----+------+-----
  3 | c    |  65
  2 | b    |  35
  1 | a    |  10
(3 rows)

DROP TABLE t_with_rollup;
DROP TABLE t_with_data;
-- new grammar test for CREATE TABLE [AS] SELECT...
CREATE TABLE t_ctas(a int, b text);
INSERT INTO t_ctas VALUES(1, '1'), (2, '2'), (3, '3'), (4, '4');
CREATE TABLE t_ctas_new SELECT * FROM t_ctas;
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     4
(1 row)

DROP TABLE t_ctas_new;
CREATE TABLE t_ctas_new SELECT * FROM t_ctas LIMIT 0, 2;
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     2
(1 row)

DROP TABLE t_ctas_new;
CREATE TABLE t_ctas_new (SELECT * FROM t_ctas LIMIT 0, 2);
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     2
(1 row)

DROP TABLE t_ctas_new;
CREATE TABLE t_ctas_new(new_c_a) (SELECT * FROM t_ctas LIMIT 0, 2);
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     2
(1 row)

\d t_ctas_new
Table "db_b_new_gram_test.t_ctas_new"
 Column  |  Type   | Modifiers 
---------+---------+-----------
 new_c_a | integer | 
 b       | text    | 

DROP TABLE t_ctas_new;
CREATE TABLE t_ctas_new(new_c_a, new_c_b) SELECT * FROM t_ctas LIMIT 0, 2;
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     2
(1 row)

\d t_ctas_new
Table "db_b_new_gram_test.t_ctas_new"
 Column  |  Type   | Modifiers 
---------+---------+-----------
 new_c_a | integer | 
 new_c_b | text    | 

DROP TABLE t_ctas_new;
-- create table like
CREATE TABLE t_like like t_ctas;
SELECT COUNT(*) FROM t_like;
 count 
-------
     0
(1 row)

\d t_like
Table "db_b_new_gram_test.t_like"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | 
 b      | text    | 

DROP TABLE t_like;
CREATE TEMPORARY TABLE t_like like t_ctas;
CREATE TEMPORARY TABLE IF NOT EXISTS t_like like t_ctas;
NOTICE:  relation "t_like" already exists, skipping
SELECT COUNT(*) FROM t_like;
 count 
-------
     0
(1 row)

\d t_like
--?Table .*
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | 
 b      | text    | 

CREATE TABLE t_like2 like t_like;
ERROR:  do not support create non-temp table like temp table
CREATE TABLE IF NOT EXISTS t_like2 like t_ctas;
SELECT COUNT(*) FROM t_like2;
 count 
-------
     0
(1 row)

\d t_like2
Table "db_b_new_gram_test.t_like2"
 Column |  Type   | Modifiers 
--------+---------+-----------
 a      | integer | 
 b      | text    | 

DROP TABLE t_like;
DROP TABLE t_like2;
-- FAILED
CREATE TABLE t_ctas_new WITH temp_t(a, b) AS (SELECT a, b FROM t_ctas) SELECT * FROM temp_t;
ERROR:  syntax error at or near "temp_t"
LINE 1: CREATE TABLE t_ctas_new WITH temp_t(a, b) AS (SELECT a, b FR...
                                     ^
CREATE TABLE t_ctas_new AS WITH temp_t(a, b) AS (SELECT a, b FROM t_ctas) SELECT * FROM temp_t;
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     4
(1 row)

DROP TABLE t_ctas_new;
CREATE TABLE t_ctas_new (WITH temp_t(a, b) AS (SELECT a, b FROM t_ctas) SELECT * FROM temp_t);
SELECT COUNT(*) FROM t_ctas_new;
 count 
-------
     4
(1 row)

DROP TABLE t_ctas_new;
DROP TABLE t_ctas;
create schema test_m;
set current_schema to 'test_m';
create table test_unique(
    f1 int,
    f2 int,
    f3 int,
    f4 int,
    constraint con_name1 unique index u_idx_name using btree(f1),
    constraint con_name2 unique key u_key_name using btree (f2)
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "u_idx_name" for table "test_unique"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "u_key_name" for table "test_unique"
\d+ test_unique
                     Table "test_m.test_unique"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 f1     | integer |           | plain   |              | 
 f2     | integer |           | plain   |              | 
 f3     | integer |           | plain   |              | 
 f4     | integer |           | plain   |              | 
Indexes:
    "u_idx_name" UNIQUE CONSTRAINT, btree (f1) TABLESPACE pg_default
    "u_key_name" UNIQUE CONSTRAINT, btree (f2) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

drop table test_unique;
-- error
create table test_unique(f1 int, constraint con_name unique index index using btree(f1));
ERROR:  syntax error at or near "index"
LINE 1: ...t_unique(f1 int, constraint con_name unique index index usin...
                                                             ^
create table test_unique(f1 int, constraint con_name unique index key using btree(f1));
ERROR:  syntax error at or near "key"
LINE 1: ...t_unique(f1 int, constraint con_name unique index key using ...
                                                             ^
create table test_unique(f1 int, constraint con_name unique key index using btree(f1));
ERROR:  syntax error at or near "index"
LINE 1: ...est_unique(f1 int, constraint con_name unique key index usin...
                                                             ^
create table test_unique(f1 int, constraint con_name unique key key using btree(f1));
ERROR:  syntax error at or near "key"
LINE 1: ...est_unique(f1 int, constraint con_name unique key key using ...
                                                             ^
create table test_unique(f1 int, f2 int, f3 int, f4 int);
alter table test_unique add constraint con_name1 unique index u_idx_name using btree(f1);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "u_idx_name" for table "test_unique"
alter table test_unique add constraint con_name2 unique key u_key_name using btree (f2);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "u_key_name" for table "test_unique"
-- error
alter table test_unique add constraint con_name unique index index using btree(f3);
ERROR:  syntax error at or near "index"
LINE 1: ... test_unique add constraint con_name unique index index usin...
                                                             ^
alter table test_unique add constraint con_name unique index key using btree(f3);
ERROR:  syntax error at or near "key"
LINE 1: ... test_unique add constraint con_name unique index key using ...
                                                             ^
alter table test_unique add constraint con_name unique key index using btree(f3);
ERROR:  syntax error at or near "index"
LINE 1: ...le test_unique add constraint con_name unique key index usin...
                                                             ^
alter table test_unique add constraint con_name unique key key using btree(f3);
ERROR:  syntax error at or near "key"
LINE 1: ...le test_unique add constraint con_name unique key key using ...
                                                             ^
-- test multi partition select for partition table
create table multi_partition_select_test(C_INT INTEGER) partition by range(C_INT)
(
    partition test_part1 values less than (400),
    partition test_part2 values less than (700),
    partition test_part3 values less than (1000)
);
insert into multi_partition_select_test values(111);
insert into multi_partition_select_test values(555);
insert into multi_partition_select_test values(888);
select a.* from multi_partition_select_test partition (test_part1) a;
 C_INT 
-------
   111
(1 row)

select a.* from multi_partition_select_test partition (test_part1, test_part2) a;
 C_INT 
-------
   111
   555
(2 rows)

select a.* from multi_partition_select_test partition (test_part1, test_part2, test_part3) a;
 C_INT 
-------
   111
   555
   888
(3 rows)

select * from multi_partition_select_test partition (test_part2, test_part3);
 C_INT 
-------
   555
   888
(2 rows)

drop table multi_partition_select_test;
-- test multi partition select for subpartition table
CREATE TABLE ignore_range_range
(
    month_code VARCHAR2 ( 30 ) NOT NULL ,
    dept_code  VARCHAR2 ( 30 ) NOT NULL ,
    user_no    VARCHAR2 ( 30 ) NOT NULL ,
    sales_amt  int
)
    PARTITION BY RANGE (month_code) SUBPARTITION BY RANGE (dept_code)
(
  PARTITION p_201901 VALUES LESS THAN( '201901' )
  (
    SUBPARTITION p_201901_a VALUES LESS THAN( '2' ),
    SUBPARTITION p_201901_b VALUES LESS THAN( '5' )
  ),
  PARTITION p_201905 VALUES LESS THAN( '201905' )
  (
    SUBPARTITION p_201905_a VALUES LESS THAN( '2' ),
    SUBPARTITION p_201905_b VALUES LESS THAN( '5' )
  )
);
insert ignore into ignore_range_range values('201812', '1', '1', 1);
insert ignore into ignore_range_range values('201903', '4', '1', 1);
-- select from single partition
select * from ignore_range_range partition (p_201901);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
 201812     | 1         | 1       |         1
(1 row)

-- select from single subpartition
select * from ignore_range_range partition (p_201901_a);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
 201812     | 1         | 1       |         1
(1 row)

-- select only from subpartition
select * from ignore_range_range partition (p_201901_a, p_201905_a);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
 201812     | 1         | 1       |         1
(1 row)

select * from ignore_range_range partition (p_201901_a, p_201905_b);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
 201812     | 1         | 1       |         1
 201903     | 4         | 1       |         1
(2 rows)

select * from ignore_range_range partition (p_201901_b, p_201905_a);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
(0 rows)

-- select from mixture of partition and subpartition
select * from ignore_range_range partition (p_201901, p_201905_a);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
 201812     | 1         | 1       |         1
(1 row)

select * from ignore_range_range partition (p_201901, p_201905_b);
 month_code | dept_code | user_no | sales_amt 
------------+-----------+---------+-----------
 201812     | 1         | 1       |         1
 201903     | 4         | 1       |         1
(2 rows)

drop table ignore_range_range;
--test "authid"
create table authid(authid int);
insert into authid(authid) values(1);
insert into authid(authid) values(2);
select authid from authid where authid = 1;
 authid 
--------
      1
(1 row)

create table authid_t1(c1 int);
insert into authid_t1(c1) values(1);
select c1 as authid from authid_t1 as authid;
 authid 
--------
      1
(1 row)

drop table authid;
drop table authid_t1;
CREATE TABLE `Student` (
    `Sno` varchar(3) NOT NULL,
    `Sname` varchar(8) NOT NULL,
    `Ssex` varchar(2) NOT NULL,
    PRIMARY KEY (`Sno`)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "student_pkey" for table "student"
CREATE TABLE `Score` (
    `S_no` varchar(3) NOT NULL,
    `Cno` varchar(5) NOT NULL,
    `Degree` decimal(4, 1) DEFAULT NULL,
    PRIMARY KEY (`S_no`, `Cno`),
    CONSTRAINT `Score_ibfk_1` FOREIGN KEY (`S_no`) REFERENCES `Student` (`Sno`)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "score_pkey" for table "score"
INSERT INTO `Student` (`Sno`, `Sname`, `Ssex`)
VALUES ('101', '李军', '男'),
    ('103', '陆君', '男'),
    ('105', '匡明', '男');
INSERT INTO `Score` (`S_no`, `Cno`, `Degree`)
VALUES ('101', '3-105', '64.0'),
    ('101', '6-166', '85.0'),
    ('103', '3-105', '92.0'),
    ('103', '3-245', '86.0');
select a.Sno as no,a.Sname as name ,
                            (select  Degree from Score 
                             where Cno= '3-105' and S_no=no) 
from Student as a;
 no  | name | Degree 
-----+------+--------
 101 | 李军 |   64.0
 103 | 陆君 |   92.0
 105 | 匡明 |       
(3 rows)

--expr
select (a.Sno+1) as no,a.Sname as name , (select  Degree from Score where Cno= '3-105' and S_no=no) from Student as a;
 no  | name | Degree 
-----+------+--------
 102 | 李军 |       
 104 | 陆君 |       
 106 | 匡明 |       
(3 rows)

--multi var
select (a.Sno+a.Sname) as no,a.Sname as name , (select  Degree from Score where Cno= '3-105' and S_no=no) from Student as a;
WARNING:  invalid input syntax for type double precision: "李军"
CONTEXT:  referenced column: no
WARNING:  invalid input syntax for type double precision: "李军"
CONTEXT:  referenced column: Degree
WARNING:  invalid input syntax for type double precision: "李军"
CONTEXT:  referenced column: Degree
WARNING:  invalid input syntax for type double precision: "陆君"
CONTEXT:  referenced column: no
WARNING:  invalid input syntax for type double precision: "陆君"
CONTEXT:  referenced column: Degree
WARNING:  invalid input syntax for type double precision: "陆君"
CONTEXT:  referenced column: Degree
WARNING:  invalid input syntax for type double precision: "匡明"
CONTEXT:  referenced column: no
WARNING:  invalid input syntax for type double precision: "匡明"
CONTEXT:  referenced column: Degree
WARNING:  invalid input syntax for type double precision: "匡明"
CONTEXT:  referenced column: Degree
 no  | name | Degree 
-----+------+--------
 101 | 李军 |   64.0
 103 | 陆君 |   92.0
 105 | 匡明 |       
(3 rows)

--func
select (a.Sno is null) as no,a.Sname as name , (select  Degree from Score where Cno= '3-105' and S_no=no) from Student as a;
WARNING:  Truncated incorrect DOUBLE value: 101
CONTEXT:  referenced column: Degree
WARNING:  Truncated incorrect DOUBLE value: 103
CONTEXT:  referenced column: Degree
WARNING:  Truncated incorrect DOUBLE value: 101
CONTEXT:  referenced column: Degree
WARNING:  Truncated incorrect DOUBLE value: 103
CONTEXT:  referenced column: Degree
WARNING:  Truncated incorrect DOUBLE value: 101
CONTEXT:  referenced column: Degree
WARNING:  Truncated incorrect DOUBLE value: 103
CONTEXT:  referenced column: Degree
 no | name | Degree 
----+------+--------
 f  | 李军 |       
 f  | 陆君 |       
 f  | 匡明 |       
(3 rows)

select hex(a.Sno) as no,a.Sname as name , (select  Degree from Score where Cno= '3-105' and S_no=no) from Student as a;
   no   | name | Degree 
--------+------+--------
 313031 | 李军 |       
 313033 | 陆君 |       
 313035 | 匡明 |       
(3 rows)

-- agg not support
select sum(a.Sno) as no,a.Sname as name , (select  Degree from Score where Cno= '3-105' and S_no=no) from Student as a;
ERROR:  Aggref found where not expected
drop table Score;
drop table Student;
drop schema test_m cascade;
NOTICE:  drop cascades to table test_unique
drop schema db_b_new_gram_test cascade;
NOTICE:  drop cascades to 33 other objects
DETAIL:  drop cascades to table db_b_new_gram_test.test_engine_2
drop cascades to type db_b_new_gram_test.test_engine_type1
drop cascades to table db_b_new_gram_test.test_engine_type_table1
drop cascades to type db_b_new_gram_test.test_engine_type2
drop cascades to table db_b_new_gram_test.test_engine_type_table2
drop cascades to table db_b_new_gram_test.test_engine_unreserved_keyword
drop cascades to table db_b_new_gram_test.test_engine_colname_keyword
drop cascades to table db_b_new_gram_test.test_engine_1_1
drop cascades to table db_b_new_gram_test.test_engine_2_1
drop cascades to type db_b_new_gram_test.test_engine_type1_1
drop cascades to table db_b_new_gram_test.test_engine_type_table1_1
drop cascades to type db_b_new_gram_test.test_engine_type2_1
drop cascades to table db_b_new_gram_test.test_engine_type_table2_1
drop cascades to table db_b_new_gram_test.test_engine_as
drop cascades to table db_b_new_gram_test.test_compression_1_pglz
drop cascades to table db_b_new_gram_test.test_compression_create_2_pglz
drop cascades to table db_b_new_gram_test.test_compression_type_table_1_pglz
drop cascades to table db_b_new_gram_test.test_compression_create_type_table_2_pglz
drop cascades to table db_b_new_gram_test.test_compression_as_pglz
drop cascades to table db_b_new_gram_test.test_compression_1_zstd
drop cascades to table db_b_new_gram_test.test_compression_create_2_zstd
drop cascades to table db_b_new_gram_test.test_compression_type_table_1_zstd
drop cascades to table db_b_new_gram_test.test_compression_create_type_table_2_zstd
drop cascades to table db_b_new_gram_test.test_compression_as_zstd
drop cascades to table db_b_new_gram_test.test_compression_1_none
drop cascades to table db_b_new_gram_test.test_compression_create_2_none
drop cascades to table db_b_new_gram_test.test_compression_type_table_1_none
drop cascades to table db_b_new_gram_test.test_compression_create_type_table_2_none
drop cascades to table db_b_new_gram_test.test_compression_as_none
drop cascades to table db_b_new_gram_test.test_list1
drop cascades to table db_b_new_gram_test.test_list2
drop cascades to table db_b_new_gram_test.t_new_analyze
drop cascades to table db_b_new_gram_test.t_quote_test
reset current_schema;
