create schema uint_agg;
set current_schema to 'uint_agg';
--uint1
create table u1(a uint1, b int2);
insert into u1 values(null, null),(255, 255),(0, 0),(255, 255),(null, null);
select avg(a), avg(b) from u1;
         avg          |         avg          
----------------------+----------------------
 170.0000000000000000 | 170.0000000000000000
(1 row)

select bit_and(a), bit_and(b) from u1;
 bit_and | bit_and 
---------+---------
 0       | 0
(1 row)

select bit_or(a), bit_or(b) from u1;
 bit_or | bit_or 
--------+--------
 255    |    255
(1 row)

select count(a), count(b) from u1;
 count | count 
-------+-------
     3 |     3
(1 row)

select count(distinct a), count(distinct b) from u1;
 count | count 
-------+-------
     2 |     2
(1 row)

select max(a), max(b) from u1;
 max | max 
-----+-----
 255 | 255
(1 row)

select min(a), min(b) from u1;
 min | min 
-----+-----
 0   |   0
(1 row)

select stddev(a), stddev(b) from u1;
      stddev      |      stddev      
------------------+------------------
 120.208152801713 | 120.208152801713
(1 row)

select stddev_pop(a), stddev_pop(b) from u1;
    stddev_pop    |    stddev_pop    
------------------+------------------
 120.208152801713 | 120.208152801713
(1 row)

select stddev_samp(a), stddev_samp(b) from u1;
   stddev_samp    |   stddev_samp    
------------------+------------------
 147.224318643355 | 147.224318643355
(1 row)

select sum(a), sum(b) from u1;
 sum | sum 
-----+-----
 510 | 510
(1 row)

select var_pop(a), var_pop(b) from u1;
      var_pop       |      var_pop       
--------------------+--------------------
 14450.000000000000 | 14450.000000000000
(1 row)

select var_samp(a), var_samp(b) from u1;
      var_samp      |      var_samp      
--------------------+--------------------
 21675.000000000000 | 21675.000000000000
(1 row)

select variance(a), variance(b) from u1;
      variance      |      variance      
--------------------+--------------------
 14450.000000000000 | 14450.000000000000
(1 row)

select listagg(a) within group(order by a) from u1;
 listagg 
---------
 0255255
(1 row)

select listagg(a, ',') within group(order by a) from u1;
  listagg  
-----------
 0,255,255
(1 row)

--uint2
create table u2(a uint2, b int4);
insert into u2 values(null, null),(65535, 65535),(0, 0),(65535, 65535),(null, null);
select avg(a), avg(b) from u2;
        avg         |        avg         
--------------------+--------------------
 43690.000000000000 | 43690.000000000000
(1 row)

select bit_and(a), bit_and(b) from u2;
 bit_and | bit_and 
---------+---------
 0       | 0
(1 row)

select bit_or(a), bit_or(b) from u2;
 bit_or | bit_or 
--------+--------
 65535  |  65535
(1 row)

select count(a), count(b) from u2;
 count | count 
-------+-------
     3 |     3
(1 row)

select count(distinct a), count(distinct b) from u2;
 count | count 
-------+-------
     2 |     2
(1 row)

select max(a), max(b) from u2;
  max  |  max  
-------+-------
 65535 | 65535
(1 row)

select min(a), min(b) from u2;
 min | min 
-----+-----
 0   |   0
(1 row)

select stddev(a), stddev(b) from u2;
     stddev     |     stddev     
----------------+----------------
 30893.49527004 | 30893.49527004
(1 row)

select stddev_pop(a), stddev_pop(b) from u2;
   stddev_pop   |   stddev_pop   
----------------+----------------
 30893.49527004 | 30893.49527004
(1 row)

select stddev_samp(a), stddev_samp(b) from u2;
  stddev_samp   |  stddev_samp   
----------------+----------------
 37836.64989134 | 37836.64989134
(1 row)

select sum(a), sum(b) from u2;
  sum   |  sum   
--------+--------
 131070 | 131070
(1 row)

select var_pop(a), var_pop(b) from u2;
      var_pop       |      var_pop       
--------------------+--------------------
 954408050.00000000 | 954408050.00000000
(1 row)

select var_samp(a), var_samp(b) from u2;
      var_samp       |      var_samp       
---------------------+---------------------
 1431612075.00000000 | 1431612075.00000000
(1 row)

select variance(a), variance(b) from u2;
      variance      |      variance      
--------------------+--------------------
 954408050.00000000 | 954408050.00000000
(1 row)

select listagg(a) within group(order by a) from u2;
   listagg   
-------------
 06553565535
(1 row)

select listagg(a, ',') within group(order by a) from u2;
    listagg    
---------------
 0,65535,65535
(1 row)

--uint4
create table u4(a uint4, b int8);
insert into u4 values(null, null),(4294967295, 4294967295),(0, 0),(4294967295, 4294967295),(null, null);
select avg(a), avg(b) from u4;
         avg         |         avg         
---------------------+---------------------
 2863311530.00000000 | 2863311530.00000000
(1 row)

select bit_and(a), bit_and(b) from u4;
 bit_and | bit_and 
---------+---------
 0       | 0
(1 row)

select bit_or(a), bit_or(b) from u4;
   bit_or   |   bit_or   
------------+------------
 4294967295 | 4294967295
(1 row)

select count(a), count(b) from u4;
 count | count 
-------+-------
     3 |     3
(1 row)

select count(distinct a), count(distinct b) from u4;
 count | count 
-------+-------
     2 |     2
(1 row)

select max(a), max(b) from u4;
    max     |    max     
------------+------------
 4294967295 | 4294967295
(1 row)

select min(a), min(b) from u4;
 min | min 
-----+-----
 0   |   0
(1 row)

select stddev(a), stddev(b) from u4;
   stddev   |   stddev   
------------+------------
 2024667000 | 2024667000
(1 row)

select stddev_pop(a), stddev_pop(b) from u4;
 stddev_pop | stddev_pop 
------------+------------
 2024667000 | 2024667000
(1 row)

select stddev_samp(a), stddev_samp(b) from u4;
 stddev_samp | stddev_samp 
-------------+-------------
  2479700524 |  2479700524
(1 row)

select sum(a), sum(b) from u4;
    sum     |    sum     
------------+------------
 8589934590 | 8589934590
(1 row)

select var_pop(a), var_pop(b) from u4;
       var_pop       |       var_pop       
---------------------+---------------------
 4099276458915470450 | 4099276458915470450
(1 row)

select var_samp(a), var_samp(b) from u4;
      var_samp       |      var_samp       
---------------------+---------------------
 6148914688373205675 | 6148914688373205675
(1 row)

select variance(a), variance(b) from u4;
      variance       |      variance       
---------------------+---------------------
 4099276458915470450 | 4099276458915470450
(1 row)

select listagg(a) within group(order by a) from u4;
        listagg        
-----------------------
 042949672954294967295
(1 row)

select listagg(a, ',') within group(order by a) from u4;
         listagg         
-------------------------
 0,4294967295,4294967295
(1 row)

--uint8
create table u8(a uint8, b numeric(64, 0));
insert into u8 values(null, null),(18446744073709551615, 18446744073709551615),(0, 0),(18446744073709551615, 18446744073709551615),(null, null);
select avg(a), avg(b) from u8;
            avg            |            avg            
---------------------------+---------------------------
 12297829382473034410.0000 | 12297829382473034410.0000
(1 row)

select bit_and(a) from u8;
 bit_and 
---------
 0
(1 row)

select bit_or(a) from u8;
        bit_or        
----------------------
 18446744073709551615
(1 row)

select count(a), count(b) from u8;
 count | count 
-------+-------
     3 |     3
(1 row)

select count(distinct a), count(distinct b) from u8;
 count | count 
-------+-------
     2 |     2
(1 row)

select max(a), max(b) from u8;
         max          |         max          
----------------------+----------------------
 18446744073709551615 | 18446744073709551615
(1 row)

select min(a), min(b) from u8;
 min | min 
-----+-----
 0   |   0
(1 row)

select stddev(a), stddev(b) from u8;
       stddev        |       stddev        
---------------------+---------------------
 8695878550221854808 | 8695878550221854808
(1 row)

select stddev_pop(a), stddev_pop(b) from u8;
     stddev_pop      |     stddev_pop      
---------------------+---------------------
 8695878550221854808 | 8695878550221854808
(1 row)

select stddev_samp(a), stddev_samp(b) from u8;
     stddev_samp      |     stddev_samp      
----------------------+----------------------
 10650232656628343400 | 10650232656628343400
(1 row)

select sum(a), sum(b) from u8;
         sum          |         sum          
----------------------+----------------------
 36893488147419103230 | 36893488147419103230
(1 row)

select var_pop(a), var_pop(b) from u8;
                var_pop                 |                var_pop                 
----------------------------------------+----------------------------------------
 75618303760208547428106915396522024050 | 75618303760208547428106915396522024050
(1 row)

select var_samp(a), var_samp(b) from u8;
                var_samp                 |                var_samp                 
-----------------------------------------+-----------------------------------------
 113427455640312821142160373094783036075 | 113427455640312821142160373094783036075
(1 row)

select variance(a), variance(b) from u8;
                variance                |                variance                
----------------------------------------+----------------------------------------
 75618303760208547428106915396522024050 | 75618303760208547428106915396522024050
(1 row)

select listagg(a) within group(order by a) from u8;
                  listagg                  
-------------------------------------------
 01844674407370955161518446744073709551615
(1 row)

select listagg(a, ',') within group(order by a) from u8;
                   listagg                   
---------------------------------------------
 0,18446744073709551615,18446744073709551615
(1 row)

create table smp_test(a uint4, b uint8);
insert into smp_test select generate_series(1, 100000), generate_series(2, 100001);
insert into smp_test select a + 100000, b from smp_test;
-- varbinary test
set dolphin.sql_mode = '';
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
CREATE TABLE t(i INT, li BIGINT, b VARBINARY(8), lb VARBINARY(24), d DOUBLE GENERATED ALWAYS AS (i*1.0));
INSERT INTO t(i, li, b, lb) VALUES
(NULL, NULL, NULL, NULL),
(0, 0, X'0000000000000000',
X'000000000000000000000000000000000000000000000000'),
(0, 0, X'0000000000000000',
X'000000000000000000000000000000000000000000000000'),
(1, 1, X'0000000000000001',
X'000000000000000000000000000000000000000000000001'),
(1, 1, X'0000000000000001',
X'000000000000000000000000000000000000000000000001'),
(2, 2, X'0000000000000002',
X'000000000000000000000000000000000000000000000002'),
(2, 2, X'0000000000000002',
X'000000000000000000000000000000000000000000000002'),
(3, 3, X'0000000000000003',
X'000000000000000000000000000000000000000000000003'),
(3, 3, X'0000000000000003',
X'000000000000000000000000000000000000000000000003'),
(4, 4, X'0000000000000004',
X'000000000000000000000000000000000000000000000004'),
(4, 4, X'0000000000000004',
X'000000000000000000000000000000000000000000000004'),
(5, 5, X'0000000000000005',
X'000000000000000000000000000000000000000000000005'),
(6, 6, X'0000000000000006',
X'000000000000000000000000000000000000000000000006'),
(X'01234567', X'0123456789ABCDEF', X'0123456789ABCDEF',
X'000000000000000000000000000000000123456789ABCDEF'),
(X'01200567', X'0120056789ABCDEF', X'0120056789ABCDEF',
X'0120056789ABCDEF0120056789ABCDEF0120056789ABCDEF'),
(X'01200567', X'0120056789ABCDEF', X'0120056789ABCDEF',
X'0120056789ABCDEF0120056789ABCDEF0120056789ABCDEF'),
(X'01200117', X'0120011789ABCDEF', X'0120011789ABCDEF',
X'0120011789ABCDEF0120011789ABCDEF0120011789ABCDEF');
SELECT HEX(i), HEX(li), HEX(b), HEX(lb),
HEX(BIT_AND(i) OVER w), HEX(BIT_AND(li) OVER w),
HEX(BIT_AND(b) OVER w), HEX(BIT_AND(lb) OVER w),
SUM(d) OVER w AS dsum
FROM t
WINDOW w AS (ORDER BY i ROWS 2 PRECEDING);
   hex   |       hex       |       hex        |                       hex                        |       hex        |       hex        |       hex        |                       hex                        |   dsum   
---------+-----------------+------------------+--------------------------------------------------+------------------+------------------+------------------+--------------------------------------------------+----------
         |                 |                  |                                                  | FFFFFFFFFFFFFFFF | FFFFFFFFFFFFFFFF | FFFFFFFFFFFFFFFF | FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF |         
 0       | 0               | 0000000000000000 | 000000000000000000000000000000000000000000000000 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |        0
 0       | 0               | 0000000000000000 | 000000000000000000000000000000000000000000000000 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |        0
 1       | 1               | 0000000000000001 | 000000000000000000000000000000000000000000000001 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |        1
 1       | 1               | 0000000000000001 | 000000000000000000000000000000000000000000000001 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |        2
 2       | 2               | 0000000000000002 | 000000000000000000000000000000000000000000000002 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |        4
 2       | 2               | 0000000000000002 | 000000000000000000000000000000000000000000000002 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |        5
 3       | 3               | 0000000000000003 | 000000000000000000000000000000000000000000000003 | 2                | 2                | 0000000000000002 | 000000000000000000000000000000000000000000000002 |        7
 3       | 3               | 0000000000000003 | 000000000000000000000000000000000000000000000003 | 2                | 2                | 0000000000000002 | 000000000000000000000000000000000000000000000002 |        8
 4       | 4               | 0000000000000004 | 000000000000000000000000000000000000000000000004 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |       10
 4       | 4               | 0000000000000004 | 000000000000000000000000000000000000000000000004 | 0                | 0                | 0000000000000000 | 000000000000000000000000000000000000000000000000 |       11
 5       | 5               | 0000000000000005 | 000000000000000000000000000000000000000000000005 | 4                | 4                | 0000000000000004 | 000000000000000000000000000000000000000000000004 |       13
 6       | 6               | 0000000000000006 | 000000000000000000000000000000000000000000000006 | 4                | 4                | 0000000000000004 | 000000000000000000000000000000000000000000000004 |       15
 1200117 | 120011789ABCDEF | 0120011789ABCDEF | 0120011789ABCDEF0120011789ABCDEF0120011789ABCDEF | 4                | 4                | 0000000000000004 | 000000000000000000000000000000000000000000000004 | 18874658
 1200567 | 120056789ABCDEF | 0120056789ABCDEF | 0120056789ABCDEF0120056789ABCDEF0120056789ABCDEF | 6                | 6                | 0000000000000006 | 000000000000000000000000000000000000000000000006 | 37750404
 1200567 | 120056789ABCDEF | 0120056789ABCDEF | 0120056789ABCDEF0120056789ABCDEF0120056789ABCDEF | 1200107          | 120010789ABCDEF  | 0120010789ABCDEF | 0120010789ABCDEF0120010789ABCDEF0120010789ABCDEF | 56626149
 1234567 | 123456789ABCDEF | 0123456789ABCDEF | 000000000000000000000000000000000123456789ABCDEF | 1200567          | 120056789ABCDEF  | 0120056789ABCDEF | 000000000000000000000000000000000120056789ABCDEF | 56840245
(17 rows)

drop table t;
reset dolphin.sql_mode;
set query_dop = 2;
explain(costs off, verbose) select avg(a), avg(b) from smp_test;
                          QUERY PLAN                          
--------------------------------------------------------------
 Aggregate
   Output: pg_catalog.avg((avg(a))), pg_catalog.avg((avg(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (avg(a)), (avg(b))
         ->  Aggregate
               Output: avg(a), avg(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select bit_and(a), bit_and(b) from smp_test;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Aggregate
   Output: bit_and((pg_catalog.bit_and(a))), bit_and((bit_and(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (pg_catalog.bit_and(a)), (bit_and(b))
         ->  Aggregate
               Output: pg_catalog.bit_and(a), bit_and(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select bit_or(a), bit_or(b) from smp_test;
                     QUERY PLAN                     
----------------------------------------------------
 Aggregate
   Output: bit_or((bit_or(a))), bit_or((bit_or(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (bit_or(a)), (bit_or(b))
         ->  Aggregate
               Output: bit_or(a), bit_or(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select count(a), count(b) from smp_test;
                   QUERY PLAN                    
-------------------------------------------------
 Aggregate
   Output: count((count(a))), count((count(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (count(a)), (count(b))
         ->  Aggregate
               Output: count(a), count(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select count(distinct a), count(distinct b) from smp_test;
                   QUERY PLAN                   
------------------------------------------------
 Aggregate
   Output: count(DISTINCT a), count(DISTINCT b)
   ->  Seq Scan on uint_agg.smp_test
         Output: a, b
(4 rows)

explain(costs off, verbose) select max(a), max(b) from smp_test;
                   QUERY PLAN                    
-------------------------------------------------
 Aggregate
   Output: max((max(a))), max((max(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (max(a)), (max(b))
         ->  Aggregate
               Output: max(a), max(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select min(a), min(b) from smp_test;
                   QUERY PLAN                    
-------------------------------------------------
 Aggregate
   Output: min((min(a))), min((min(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (min(a)), (min(b))
         ->  Aggregate
               Output: min(a), min(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select stddev(a), stddev(b) from smp_test;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.stddev_pop((stddev_pop(a))), pg_catalog.stddev_pop((stddev_pop(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (stddev_pop(a)), (stddev_pop(b))
         ->  Aggregate
               Output: stddev_pop(a), stddev_pop(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select stddev_pop(a), stddev_pop(b) from smp_test;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.stddev_pop((stddev_pop(a))), pg_catalog.stddev_pop((stddev_pop(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (stddev_pop(a)), (stddev_pop(b))
         ->  Aggregate
               Output: stddev_pop(a), stddev_pop(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select stddev_samp(a), stddev_samp(b) from smp_test;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.stddev_samp((stddev_samp(a))), pg_catalog.stddev_samp((stddev_samp(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (stddev_samp(a)), (stddev_samp(b))
         ->  Aggregate
               Output: stddev_samp(a), stddev_samp(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select sum(a), sum(b) from smp_test;
                          QUERY PLAN                          
--------------------------------------------------------------
 Aggregate
   Output: pg_catalog.sum((sum(a))), pg_catalog.sum((sum(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (sum(a)), (sum(b))
         ->  Aggregate
               Output: sum(a), sum(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select var_pop(a), var_pop(b) from smp_test;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.var_pop((var_pop(a))), pg_catalog.var_pop((var_pop(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (var_pop(a)), (var_pop(b))
         ->  Aggregate
               Output: var_pop(a), var_pop(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select var_samp(a), var_samp(b) from smp_test;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.var_samp((var_samp(a))), pg_catalog.var_samp((var_samp(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (var_samp(a)), (var_samp(b))
         ->  Aggregate
               Output: var_samp(a), var_samp(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select variance(a), variance(b) from smp_test;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.var_pop((var_pop(a))), pg_catalog.var_pop((var_pop(b)))
   ->  Streaming(type: LOCAL GATHER dop: 1/2)
         Output: (var_pop(a)), (var_pop(b))
         ->  Aggregate
               Output: var_pop(a), var_pop(b)
               ->  Seq Scan on uint_agg.smp_test
                     Output: a, b
(8 rows)

explain(costs off, verbose) select listagg(a) within group(order by a) from smp_test;
                          QUERY PLAN                          
--------------------------------------------------------------
 Aggregate
   Output: listagg(a ) WITHIN GROUP ( ORDER BY a NULLS FIRST)
   ->  Seq Scan on uint_agg.smp_test
         Output: a, b
(4 rows)

explain(costs off, verbose) select listagg(a, ',') within group(order by a) from smp_test;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Aggregate
   Output: listagg(a, ','::text ) WITHIN GROUP ( ORDER BY a NULLS FIRST)
   ->  Seq Scan on uint_agg.smp_test
         Output: a, b
(4 rows)

drop schema uint_agg cascade;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table u1
drop cascades to table u2
drop cascades to table u4
drop cascades to table u8
drop cascades to table smp_test
reset current_schema;
