create schema db_proxy;
set current_schema to 'db_proxy';
CREATE SCHEMA tst_schema1;
SET SEARCH_PATH TO tst_schema1;
CREATE TABLE tst_t1
(
id int,
name varchar(20)
);
INSERT INTO tst_t1 values(20220101, 'proxy_example');
DROP ROLE if EXISTS test_proxy_u1;
NOTICE:  role "test_proxy_u1" does not exist, skipping
CREATE ROLE test_proxy_u1 IDENTIFIED BY 'test_proxy_u1@123';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
DROP ROLE if EXISTS test_proxy_u2;
NOTICE:  role "test_proxy_u2" does not exist, skipping
CREATE ROLE test_proxy_u2 IDENTIFIED BY 'test_proxy_u2@123';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
DROP ROLE if EXISTS test_proxy_u3;
NOTICE:  role "test_proxy_u3" does not exist, skipping
CREATE ROLE test_proxy_u3 IDENTIFIED BY 'test_proxy_u3@123';
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
GRANT ALL ON SCHEMA tst_schema1 TO test_proxy_u1;
GRANT ALL ON SCHEMA tst_schema1 TO test_proxy_u2;
GRANT ALL ON SCHEMA tst_schema1 TO test_proxy_u3;
-- let test_proxy_u1 can read the tst_t1
GRANT ALL ON tst_t1 to test_proxy_u1;
SET ROLE test_proxy_u2 PASSWORD 'test_proxy_u2@123';
SELECT * FROM tst_schema1.tst_t1;
ERROR:  permission denied for relation tst_t1
DETAIL:  N/A
RESET ROLE;
-- GRANT PROXY
GRANT PROXY ON test_proxy_u1 TO test_proxy_u2;
SET ROLE test_proxy_u2 PASSWORD 'test_proxy_u2@123';
SELECT * FROM tst_schema1.tst_t1;
    id    |     name      
----------+---------------
 20220101 | proxy_example
(1 row)

GRANT PROXY ON test_proxy_u1 TO test_proxy_u3;
ERROR:  must have admin option on role "test_proxy_u1"
RESET ROLE;
GRANT PROXY ON test_proxy_u1 TO test_proxy_u2 with grant option;
SET ROLE test_proxy_u2 PASSWORD 'test_proxy_u2@123';
GRANT PROXY ON test_proxy_u1 TO test_proxy_u3;
RESET ROLE;
SET ROLE test_proxy_u3 PASSWORD 'test_proxy_u3@123';
SELECT * FROM tst_schema1.tst_t1;
    id    |     name      
----------+---------------
 20220101 | proxy_example
(1 row)

RESET ROLE;
REVOKE PROXY ON test_proxy_u1 FROM test_proxy_u2, test_proxy_u3;
SET ROLE test_proxy_u2 PASSWORD 'test_proxy_u2@123';
SELECT * FROM tst_schema1.tst_t1;
ERROR:  permission denied for relation tst_t1
DETAIL:  N/A
RESET ROLE;
SET ROLE test_proxy_u3 PASSWORD 'test_proxy_u3@123';
SELECT * FROM tst_schema1.tst_t1;
ERROR:  permission denied for relation tst_t1
DETAIL:  N/A
RESET ROLE;
REVOKE ALL ON tst_schema1.tst_t1 FROM test_proxy_u1;
REVOKE ALL ON SCHEMA tst_schema1 FROM test_proxy_u1;
REVOKE ALL ON SCHEMA tst_schema1 FROM test_proxy_u2;
REVOKE ALL ON SCHEMA tst_schema1 FROM test_proxy_u3;
--grant usage
--error, warn syntax
GRANT USAGE1 ON *.* to test_proxy_u1 IDENTIFIED BY 'test_proxy_u1@234';
ERROR:  syntax error
LINE 1: GRANT USAGE1 ON *.* to test_proxy_u1 IDENTIFIED BY 'test_pro...
              ^
GRANT USAGE ON * to test_proxy_u1 IDENTIFIED BY 'test_proxy_u1@234';
ERROR:  syntax error at or near "to"
LINE 1: GRANT USAGE ON * to test_proxy_u1 IDENTIFIED BY 'test_proxy_...
                         ^
GRANT USAGE ON *.* to test_proxy_u1;
ERROR:  syntax error at or near ";"
LINE 1: GRANT USAGE ON *.* to test_proxy_u1;
                                           ^
GRANT ALL ON *.* to test_proxy_u1 IDENTIFIED BY 'test_proxy_u1@234';
ERROR:  syntax error
LINE 1: GRANT ALL ON *.* to test_proxy_u1 IDENTIFIED BY 'test_proxy_...
              ^
--success, change passwd
GRANT USAGE ON *.* to test_proxy_u1 IDENTIFIED BY 'test_proxy_u1@234';
WARNING:  Using GRANT statement to modify existing user's password is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
SET ROLE test_proxy_u1 PASSWORD 'test_proxy_u1@234';
RESET ROLE;
--sucess, create role
set b_compatibility_user_host_auth to on;
GRANT USAGE ON *.* to does_not_exist@localhost IDENTIFIED BY 'does_not_exist1@localhost';
WARNING:  Using GRANT for creating new user is deprecatedand will be removed in future release. Create new user with CREATE USER statement.
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
--SET ROLE does_not_exist@localhost PASSWORD 'does_not_exist1@localhost';
--RESET ROLE;
--sucess, change passwd
GRANT USAGE ON *.* to does_not_exist@localhost IDENTIFIED BY 'does_not_exist1@localhost2';
WARNING:  Using GRANT statement to modify existing user's password is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
NOTICE:  The iteration value of password is not recommended.Setting the iteration value too small reduces the security of the password, and setting it too large results in performance degradation.
--SET ROLE does_not_exist@localhost PASSWORD 'does_not_exist1@localhost2';
--RESET ROLE;
--error, can't use b_mode_create_user_if_not_exist in alter user, it's a internal option
alter user does_not_exist@localhost b_mode_create_user_if_not_exist;
ERROR:  unrecognized role option "b_mode_create_user_if_not_exist"
LINE 1: alter user does_not_exist@localhost b_mode_create_user_if_no...
                                            ^
drop user does_not_exist@localhost;
reset b_compatibility_user_host_auth;
drop role test_proxy_u1;
drop role test_proxy_u2;
drop role test_proxy_u3;
-- test PROXY as colname
create table t1 (proxy int);
insert into t1 values (1);
select proxy from t1;
 proxy 
-------
     1
(1 row)

drop table t1;
drop schema db_proxy cascade;
drop schema tst_schema1 cascade;
NOTICE:  drop cascades to table tst_t1
reset current_schema;
