create schema partition_test3;
set current_schema to 'partition_test3';
--test add and drop
CREATE TABLE IF NOT EXISTS test_part2
(
a int,
b int
) 
PARTITION BY RANGE(a)
(
    PARTITION p0 VALUES LESS THAN (100),
    PARTITION p1 VALUES LESS THAN (200),
    PARTITION p2 VALUES LESS THAN (300),
    PARTITION p3 VALUES LESS THAN (400)
);
CREATE TABLE IF NOT EXISTS test_subpart2
(
a int,
b int
) 
PARTITION BY RANGE(a) SUBPARTITION BY RANGE(b)
(
    PARTITION p0 VALUES LESS THAN (100)
    (
        SUBPARTITION p0_0 VALUES LESS THAN (100),
        SUBPARTITION p0_1 VALUES LESS THAN (200),
        SUBPARTITION p0_2 VALUES LESS THAN (300)
    ),
    PARTITION p1 VALUES LESS THAN (200)
    (
        SUBPARTITION p1_0 VALUES LESS THAN (100),
        SUBPARTITION p1_1 VALUES LESS THAN (200),
        SUBPARTITION p1_2 VALUES LESS THAN (300)
    ),
    PARTITION p2 VALUES LESS THAN (300)
    (
        SUBPARTITION p2_0 VALUES LESS THAN (100),
        SUBPARTITION p2_1 VALUES LESS THAN (200),
        SUBPARTITION p2_2 VALUES LESS THAN (300)
    ),
    PARTITION p3 VALUES LESS THAN (400)
    (
        SUBPARTITION p3_0 VALUES LESS THAN (100),
        SUBPARTITION p3_1 VALUES LESS THAN (200),
        SUBPARTITION p3_2 VALUES LESS THAN (300)
    )
);
--test b_compatibility drop and add partition syntax
select relname, boundaries from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_part2') order by 1,2;
  relname   | boundaries 
------------+------------
 p0         | {100}
 p1         | {200}
 p2         | {300}
 p3         | {400}
 test_part2 | 
(5 rows)

ALTER TABLE test_part2 DROP PARTITION p3;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
select relname, boundaries from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_part2') order by 1,2;
  relname   | boundaries 
------------+------------
 p0         | {100}
 p1         | {200}
 p2         | {300}
 test_part2 | 
(4 rows)

ALTER TABLE test_part2 add PARTITION (PARTITION p3 VALUES LESS THAN (400),PARTITION p4 VALUES LESS THAN (500),PARTITION p5 VALUES LESS THAN (600));
select relname, boundaries from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_part2') order by 1,2;
  relname   | boundaries 
------------+------------
 p0         | {100}
 p1         | {200}
 p2         | {300}
 p3         | {400}
 p4         | {500}
 p5         | {600}
 test_part2 | 
(7 rows)

ALTER TABLE test_part2 add PARTITION (PARTITION p6 VALUES LESS THAN (700),PARTITION p7 VALUES LESS THAN (800));
ALTER TABLE test_part2 DROP PARTITION p4,p5,p6;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
select relname, boundaries from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_part2') order by 1,2;
  relname   | boundaries 
------------+------------
 p0         | {100}
 p1         | {200}
 p2         | {300}
 p3         | {400}
 p7         | {800}
 test_part2 | 
(6 rows)

ALTER TABLE test_part2 add PARTITION (PARTITION p4 VALUES LESS THAN (500));
ERROR:  upper boundary of adding partition MUST overtop last existing partition
select relname, boundaries from pg_partition where parentid in (select oid from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_subpart2')) order by 1,2;
 relname | boundaries 
---------+------------
 p0_0    | {100}
 p0_1    | {200}
 p0_2    | {300}
 p1_0    | {100}
 p1_1    | {200}
 p1_2    | {300}
 p2_0    | {100}
 p2_1    | {200}
 p2_2    | {300}
 p3_0    | {100}
 p3_1    | {200}
 p3_2    | {300}
(12 rows)

ALTER TABLE test_subpart2 DROP SUBPARTITION p0_0;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
ALTER TABLE test_subpart2 DROP SUBPARTITION p0_2, p1_0, p1_2;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
select relname, boundaries from pg_partition where parentid in (select oid from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_subpart2')) order by 1,2;
 relname | boundaries 
---------+------------
 p0_1    | {200}
 p1_1    | {200}
 p2_0    | {100}
 p2_1    | {200}
 p2_2    | {300}
 p3_0    | {100}
 p3_1    | {200}
 p3_2    | {300}
(8 rows)

--test opengauss drop and add partition syntax
ALTER TABLE test_part2 add PARTITION (PARTITION p5 VALUES LESS THAN (600));
ERROR:  upper boundary of adding partition MUST overtop last existing partition
ALTER TABLE test_part2 DROP PARTITION p5, DROP PARTITION p0, DROP PARTITION p7;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
ERROR:  partition "p5" does not exist
select relname, boundaries from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_part2') order by 1,2;
  relname   | boundaries 
------------+------------
 p0         | {100}
 p1         | {200}
 p2         | {300}
 p3         | {400}
 p7         | {800}
 test_part2 | 
(6 rows)

ALTER TABLE test_part2 add PARTITION p4 VALUES LESS THAN (100),add PARTITION p5 VALUES LESS THAN (200);
ERROR:  upper boundary of adding partition MUST overtop last existing partition
ALTER TABLE test_part2 add PARTITION p4 VALUES LESS THAN (500),add PARTITION p5 VALUES LESS THAN (600);
ERROR:  upper boundary of adding partition MUST overtop last existing partition
select relname, boundaries from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_part2') order by 1,2;
  relname   | boundaries 
------------+------------
 p0         | {100}
 p1         | {200}
 p2         | {300}
 p3         | {400}
 p7         | {800}
 test_part2 | 
(6 rows)

ALTER TABLE test_subpart2 DROP SUBPARTITION p2_0, DROP SUBPARTITION p2_2, DROP SUBPARTITION p3_0;
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
NOTICE:  Command without UPDATE GLOBAL INDEX will disable global index
select relname, boundaries from pg_partition where parentid in (select oid from pg_partition where parentid in (select parentid from pg_partition where relname = 'test_subpart2')) order by 1,2;
 relname | boundaries 
---------+------------
 p0_1    | {200}
 p1_1    | {200}
 p2_1    | {200}
 p3_1    | {200}
 p3_2    | {300}
(5 rows)

--test add partition other syntax
CREATE TABLE IF NOT EXISTS test_part2_1
(
a int,
b int
) 
PARTITION BY RANGE(a)
(
    PARTITION p0 VALUES LESS THAN (100)
);
ALTER TABLE test_part2_1 add PARTITION p1 START(200) END (300);
ERROR:  start value of partition "p1" NOT EQUAL up-boundary of last partition.
ALTER TABLE test_part2_1 add PARTITION p2 END (400);
ALTER TABLE test_part2_1 add PARTITION p3 START (500);
ERROR:  start value of partition "p3" NOT EQUAL up-boundary of last partition.
ALTER TABLE test_part2_1 add PARTITION p4 VALUES (DEFAULT);
ERROR:  can not add none-range partition to range partition table
ALTER TABLE test_part2_1 add PARTITION p5 VALUES (add(600,100));
ERROR:  function add(integer, integer) does not exist
LINE 1: ALTER TABLE test_part2_1 add PARTITION p5 VALUES (add(600,10...
                                                          ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CREATE TABLE IF NOT EXISTS test_subpart2_1
(
a int,
b int
) 
PARTITION BY RANGE(a) SUBPARTITION BY RANGE(b)
(
    PARTITION p0 VALUES LESS THAN (100)
    (
        SUBPARTITION p0_0 VALUES LESS THAN (100)
    )
);
ALTER TABLE test_part2_1 add PARTITION p1 VALUES LESS THAN (200) (SUBPARTITION p1_0 VALUES LESS THAN (100));
ERROR:  upper boundary of adding partition MUST overtop last existing partition
ALTER TABLE test_part2_1 add PARTITION p2 VALUES (add(600,100)) (SUBPARTITION p2_0 VALUES LESS THAN (100));
ERROR:  function add(integer, integer) does not exist
LINE 1: ALTER TABLE test_part2_1 add PARTITION p2 VALUES (add(600,10...
                                                          ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
ALTER TABLE test_part2_1 add PARTITION p3 VALUES (DEFAULT) (SUBPARTITION p3_0 VALUES LESS THAN (100));
ERROR:  can not add none-range partition to range partition table
drop schema partition_test3 cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table test_part2
drop cascades to table test_subpart2
drop cascades to table test_part2_1
drop cascades to table test_subpart2_1
reset current_schema;
