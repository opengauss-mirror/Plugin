create schema db_character_length;
set current_schema to 'db_character_length';
select character_length(1234);
 character_length 
------------------
                4
(1 row)

select character_length(1234.5);
 character_length 
------------------
                6
(1 row)

select character_length( '1234');
 character_length 
------------------
                4
(1 row)

select character_length( 'abcd');
 character_length 
------------------
                4
(1 row)

select character_length(1.1);
 character_length 
------------------
                3
(1 row)

select character_length(null);
 character_length 
------------------
                 
(1 row)

select character_length(1);
 character_length 
------------------
                1
(1 row)

select character_length(B'101010101');
 character_length 
------------------
                2
(1 row)

select character_length(1,1);
ERROR:  function character_length(integer, integer) does not exist
LINE 1: select character_length(1,1);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: character_length
select 1+character_length(1);
 ?column? 
----------
        2
(1 row)

select 1.1+character_length(1);
 ?column? 
----------
      2.1
(1 row)

select character_length(111111111111111111111111111111111111111111111111111111111111111111111111111111111);
 character_length 
------------------
               81
(1 row)

select character_length('测试');
 character_length 
------------------
                2
(1 row)

select character_length('测试123.45');
 character_length 
------------------
                8
(1 row)

select character_length(true);
 character_length 
------------------
                1
(1 row)

drop schema db_character_length cascade;
reset current_schema;
set dolphin.b_compatibility_mode to off;
drop database if exists db_character_length_gbk;
NOTICE:  database "db_character_length_gbk" does not exist, skipping
create database db_character_length_gbk dbcompatibility 'B' encoding 'GBK' LC_CTYPE 'zh_CN.gbk' lc_collate 'zh_CN.gbk';
\c db_character_length_gbk
\encoding gbk;
select character_length('测试');
 character_length 
------------------
                3
(1 row)

select character_length('测试123');
 character_length 
------------------
                6
(1 row)

\c postgres
drop database if exists db_character_length_gbk;
drop database if exists db_character_length_latin1;
NOTICE:  database "db_character_length_latin1" does not exist, skipping
create database db_character_length_latin1 dbcompatibility 'B' encoding 'latin1' LC_CTYPE 'en_US' lc_collate 'en_US';
\c db_character_length_latin1
\encoding latin1;
select character_length('测试');
 character_length 
------------------
                2
(1 row)

select character_length('测试123');
 character_length 
------------------
                5
(1 row)

\c postgres
drop database if exists db_character_length_latin1;
drop database if exists db_character_length_utf8;
NOTICE:  database "db_character_length_utf8" does not exist, skipping
create database db_character_length_utf8 dbcompatibility 'b' encoding 'utf8';
\c db_character_length_utf8
\encoding utf8;
select character_length('测试');
 character_length 
------------------
                2
(1 row)

select character_length('测试123');
 character_length 
------------------
                5
(1 row)

\c postgres
drop database if exists db_character_length_utf8;
drop database if exists db_character_length_ascii;
NOTICE:  database "db_character_length_ascii" does not exist, skipping
create database db_character_length_ascii dbcompatibility 'b' encoding 'sql_ascii';
\c db_character_length_ascii
\encoding sql_ascii;
select character_length('测试');
 character_length 
------------------
                2
(1 row)

select character_length('测试123');
 character_length 
------------------
                5
(1 row)

\c postgres
drop database if exists db_character_length_ascii;
