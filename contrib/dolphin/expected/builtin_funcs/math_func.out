create schema test_math_func;
set current_schema to 'test_math_func';
set dolphin.b_compatibility_mode = on;
create table test_type_table
(
   `int1` tinyint,
   `uint1` tinyint unsigned,
   `int2` smallint,
   `uint2` smallint unsigned,
   `int4` integer,
   `uint4` integer unsigned,
   `int8` bigint,
   `uint8` bigint unsigned,
   `float4` float4,
   `float8` float8,
   `numeric` decimal(20, 6),
   `bit1` bit(1),
   `bit64` bit(64),
   `boolean` boolean,
   `date` date,
   `time` time,
   `time(4)` time(4),
   `datetime` datetime,
   `datetime(4)` datetime(4) default '2022-11-11 11:11:11',
   `timestamp` timestamp,
   `timestamp(4)` timestamp(4) default '2022-11-11 11:11:11',
   `year` year,
   `char` char(100),
   `varchar` varchar(100), 
   `binary` binary(100),
   `varbinary` varbinary(100),
   `tinyblob` tinyblob,
   `blob` blob,
   `mediumblob` mediumblob,
   `longblob` longblob,
   `text` text,
   `enum_t` enum('a', 'b', 'c'),
   `set_t` set('a', 'b', 'c'),
   `json` json   
);
NOTICE:  CREATE TABLE will create implicit set "test_type_table_set_t_set" for column "test_type_table.set_t"
insert into test_type_table values (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, b'1', b'111', true, '2023-02-05', '19:10:50', '19:10:50.3456', '2023-02-05 19:10:50', '2023-02-05 19:10:50.456', '2023-02-05 19:10:50', '2023-02-05 19:10:50.456',
'2023', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', 'a', 'a,c', json_object('a', 1, 'b', 2));
-- degrees math function
select degrees(`int1`), degrees(`uint1`), degrees(`int2`), degrees(`uint2`), degrees(`int4`), degrees(`uint4`), degrees(`int8`), degrees(`uint8`), degrees(`float4`), degrees(`float8`), degrees(`numeric`),degrees(`bit1`), degrees(`bit64`), degrees(`boolean`), degrees(`date`), degrees(`time`), degrees(`time(4)`), degrees(`datetime`),degrees(`datetime(4)`), degrees(`timestamp`), degrees(`timestamp(4)`), degrees(`year`), degrees(`char`), degrees(`varchar`), degrees(`binary`), degrees(`varbinary`), degrees(`tinyblob`), degrees(`blob`), degrees(`mediumblob`), degrees(`longblob`), degrees(`text`), degrees(`enum_t`), degrees(`set_t`), degrees(`json`) from test_type_table;   
WARNING:  invalid input syntax for type double precision: "1.23a                                                                                               "
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: degrees
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: degrees
     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |       degrees        |       degrees        |       degrees        |       degrees        |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      |     degrees      | degrees 

 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 401.070456591576 | 57.2957795130823 | 1159105365.18446 | 10946358.6759744 | 10946378.4773958 | 1.15910537613081e+15 | 1.15910537613084e+15 | 1.15910537613081e+15 | 1.15910537613084e+15 | 115909.361954966 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 57.2957795130823 | 286.478897565412 |       0
(1 row)

create table test_double_degrees(d1 double,  d2 double,  d3 double,  d4 double,  d5 double,  d6 double,  d7 double,  d8 double,  d9 double,  d10 double,  d11 double,  d12 double,  d13 double,  d14 double,  d15 double,  d16 double,  d17 double,  d18 double,  d19 double,  d20 double,  d21 double,  d22 double,  d23 double,  d24 double,  d25 double,  d26 double,  d27 double,  d28 double,  d29 double,  d30 double,  d31 double,  d32 double,  d33 double,  d34 double);
insert ignore into test_double_degrees  select degrees(`int1`), degrees(`uint1`), degrees(`int2`), degrees(`uint2`), degrees(`int4`), degrees(`uint4`), degrees(`int8`), degrees(`uint8`), degrees(`float4`), degrees(`float8`), degrees(`numeric`),degrees(`bit1`), degrees(`bit64`),degrees(`boolean`), degrees(`date`), degrees(`time`), degrees(`time(4)`), degrees(`datetime`),degrees(`datetime(4)`), degrees(`timestamp`), degrees(`timestamp(4)`), degrees(`year`), degrees(`char`), degrees(`varchar`), degrees(`binary`),degrees(`varbinary`), degrees(`tinyblob`), degrees(`blob`), degrees(`mediumblob`), degrees(`longblob`), degrees(`text`), degrees(`enum_t`), degrees(`set_t`), degrees(`json`) from test_type_table;
WARNING:  invalid input syntax for type double precision: "1.23a                                                                                               "
CONTEXT:  referenced column: d23
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d24
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d25
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d26
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d27
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d28
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d29
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d30
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d31
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: d34
set dolphin.sql_mode = 'sql_mode_full_group,pipes_as_concat,ansi_quotes';
insert into test_double_degrees  select degrees(`int1`), degrees(`uint1`), degrees(`int2`), degrees(`uint2`), degrees(`int4`), degrees(`uint4`), degrees(`int8`), degrees(`uint8`), degrees(`float4`), degrees(`float8`), degrees(`numeric`),degrees(`bit1`), degrees(`bit64`),degrees(`boolean`), degrees(`date`), degrees(`time`), degrees(`time(4)`), degrees(`datetime`),degrees(`datetime(4)`), degrees(`timestamp`), degrees(`timestamp(4)`), degrees(`year`), degrees(`char`), degrees(`varchar`), degrees(`binary`),degrees(`varbinary`), degrees(`tinyblob`), degrees(`blob`), degrees(`mediumblob`), degrees(`longblob`), degrees(`text`), degrees(`enum_t`), degrees(`set_t`), degrees(`json`) from test_type_table;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d23
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d24
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d25
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d26
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d27
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d28
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d29
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d30
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: d31
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: d34
select * from test_double_degrees order by 1;
        d1        |        d2        |        d3        |        d4        |        d5        |        d6        |        d7        |        d8        |        d9        |       d10        |       d11        |       d12        |       d13        |       d14        |       d15        |       d16        |       d17        |         d18          |         d19          |         d20          |         d21          |       d22        |       d23        |       d24        |       d25        |       d26        |       d27        |       d28        |       d29        |       d30        |       d31        |       d32        |       d33        | d34 

 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 401.070456591576 | 57.2957795130823 | 1159105365.18446 | 10946358.6759744 | 10946378.4773958 | 1.15910537613081e+15 | 1.15910537613084e+15 | 1.15910537613081e+15 | 1.15910537613084e+15 | 115909.361954966 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 57.2957795130823 | 286.478897565412 |   0
 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 57.2957795130823 | 401.070456591576 | 57.2957795130823 | 1159105365.18446 | 10946358.6759744 | 10946378.4773958 | 1.15910537613081e+15 | 1.15910537613084e+15 | 1.15910537613081e+15 | 1.15910537613084e+15 | 115909.361954966 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 70.4738088010913 | 57.2957795130823 | 286.478897565412 |   0
(2 rows)

-- exp math function
reset dolphin.sql_mode;
select exp(`int1`), exp(`uint1`), exp(`int2`), exp(`uint2`), exp(`int4`), exp(`uint4`), exp(`int8`), exp(`uint8`), exp(`float4`), exp(`float8`), exp(`numeric`),exp(`bit1`), exp(`bit64`), exp(`boolean`), exp(`date`), exp(`time`), exp(`time(4)`), exp(`datetime`),exp(`datetime(4)`), exp(`timestamp`), exp(`timestamp(4)`), exp(`year`), exp(`char`), exp(`varchar`), exp(`binary`), exp(`varbinary`), exp(`tinyblob`), exp(`blob`), exp(`mediumblob`), exp(`longblob`), exp(`text`), exp(`enum_t`), exp(`set_t`), exp(`json`) from test_type_table;
ERROR:  value overflows numeric format
CONTEXT:  referenced column: exp
select exp(`int1`), exp(`uint1`), exp(`int2`), exp(`uint2`), exp(`int4`), exp(`uint4`), exp(`int8`), exp(`uint8`), exp(`float4`), exp(`float8`), exp(`numeric`), exp(`bit1`), exp(`bit64`), exp(`boolean`), exp(`char`), exp(`varchar`),exp(`binary`), exp(`varbinary`), exp(`tinyblob`), exp(`blob`), exp(`mediumblob`), exp(`longblob`), exp(`text`), exp(`enum_t`), exp(`set_t`), exp(`json`) from test_type_table;
WARNING:  invalid input syntax for type numeric: "1.23a                                                                                               "
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: exp
       exp        |        exp         |       exp        |        exp         |       exp        |        exp         |       exp        |        exp         |       exp        |       exp        |        exp         |        exp         |        exp         |        exp         |        exp         |        exp         |       exp        |       exp        |       exp        |       exp        |       exp        |       exp        |        exp         |        exp         |        exp         |        exp         

 2.71828182845905 | 2.7182818284590452 | 2.71828182845905 | 2.7182818284590452 | 2.71828182845905 | 2.7182818284590452 | 2.71828182845905 | 2.7182818284590452 | 2.71828182845905 | 2.71828182845905 | 2.7182818284590452 | 2.7182818284590452 | 1096.6331584284586 | 2.7182818284590452 | 3.4212295362896736 | 3.4212295362896736 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.4212295362896736 | 2.7182818284590452 | 148.41315910257660 | 1.0000000000000000
(1 row)

create table test_double_exp(d1 double,  d2 double,  d3 double,  d4 double,  d5 double,  d6 double,  d7 double,  d8 double,  d9 double,  d10 double,  d11 double,  d12 double,  d13 double,  d14 double,  d15 double,  d16 double,  d17 double,  d18 double,  d19 double,  d20 double,  d21 double,  d22 double,  d23 double,  d24 double,  d25 double,  d26 double);
insert ignore into test_double_exp select exp(`int1`), exp(`uint1`), exp(`int2`), exp(`uint2`), exp(`int4`), exp(`uint4`), exp(`int8`), exp(`uint8`), exp(`float4`), exp(`float8`), exp(`numeric`), exp(`bit1`), exp(`bit64`), exp(`boolean`), exp(`char`), exp(`varchar`),exp(`binary`), exp(`varbinary`), exp(`tinyblob`), exp(`blob`), exp(`mediumblob`), exp(`longblob`), exp(`text`), exp(`enum_t`), exp(`set_t`), exp(`json`) from test_type_table;
WARNING:  invalid input syntax for type numeric: "1.23a                                                                                               "
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: exp
set dolphin.sql_mode = 'sql_mode_full_group,pipes_as_concat,ansi_quotes';
insert into test_double_exp select exp(`int1`), exp(`uint1`), exp(`int2`), exp(`uint2`), exp(`int4`), exp(`uint4`), exp(`int8`), exp(`uint8`), exp(`float4`), exp(`float8`), exp(`numeric`), exp(`bit1`), exp(`bit64`), exp(`boolean`), exp(`char`), exp(`varchar`),exp(`binary`), exp(`varbinary`), exp(`tinyblob`), exp(`blob`), exp(`mediumblob`), exp(`longblob`), exp(`text`), exp(`enum_t`), exp(`set_t`), exp(`json`) from test_type_table;
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: exp
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: exp
select * from test_double_exp order by 1;
        d1        |        d2        |        d3        |        d4        |        d5        |        d6        |        d7        |        d8        |        d9        |       d10        |       d11        |       d12        |       d13        |       d14        |       d15        |       d16        |       d17        |       d18        |       d19        |       d20        |       d21        |       d22        |       d23        |       d24        |       d25        | d26 
------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-----
 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 1096.63315842846 | 2.71828182845905 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 2.71828182845905 | 148.413159102577 |   1
 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 2.71828182845905 | 1096.63315842846 | 2.71828182845905 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 3.42122953628967 | 2.71828182845905 | 148.413159102577 |   1
(2 rows)

-- ln math function
select
ln(`int1`),
ln(`uint1`),
ln(`int2`),
ln(`uint2`),
ln(`int4`),
ln(`uint4`),
ln(`int8`),
ln(`uint8`),
ln(`float4`),
ln(`float8`),
ln(`numeric`),
ln(`bit1`),
ln(`bit64`),
ln(`boolean`),
ln(`date`),
ln(`time`),
ln(`time(4)`),
ln(`datetime`),
ln(`datetime(4)`),
ln(`timestamp`),
ln(`timestamp(4)`),
ln(`year`),
ln(`char`),
ln(`varchar`),
ln(`binary`),
ln(`varbinary`),
ln(`tinyblob`),
ln(`blob`),
ln(`mediumblob`),
ln(`longblob`),
ln(`text`),
ln(`enum_t`),
ln(`set_t`),
ln(`json`)
from test_type_table;
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: ln
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: ln
 ln |         ln         | ln |         ln         | ln |         ln         | ln |         ln         | ln | ln |         ln         |         ln         |         ln         |         ln         |         ln         |         ln         |         ln         |         ln         |         ln         |         ln         |         ln         |        ln        |         ln         |         ln         |        ln         |        ln         |        ln         |        ln         |        ln         |        ln         |         ln         |         ln         |         ln         | ln 

  0 | 0.0000000000000000 |  0 | 0.0000000000000000 |  0 | 0.0000000000000000 |  0 | 0.0000000000000000 |  0 |  0 | 0.0000000000000000 | 0.0000000000000000 | 1.9459101490553133 | 0.0000000000000000 | 16.822687342557736 | 12.160290452875046 | 12.160292261823946 | 30.638197909965809 | 30.638197909965832 | 30.638197909965809 | 30.638197909965832 | 7.61233683716775 | 0.2070141693843261 | 0.2070141693843261 | 0.207014169384326 | 0.207014169384326 | 0.207014169384326 | 0.207014169384326 | 0.207014169384326 | 0.207014169384326 | 0.2070141693843261 | 0.0000000000000000 | 1.6094379124341004 |   
(1 row)

select exp(709);
          exp          
-----------------------
 8.21840746155497e+307
(1 row)

select exp(710);
ERROR:  value out of range: overflow
CONTEXT:  referenced column: exp
select exp(-1000); 
 exp 
-----
   0
(1 row)

drop table if exists test_double_exp;
drop table if exists test_double_degrees;
drop table if exists test_type_table;
drop schema test_math_func cascade;
reset current_schema;
