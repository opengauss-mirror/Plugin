create schema test_mysql_prepare;
set current_schema to 'test_mysql_prepare';
create table test(name text, age int);
insert into test values('a',18);
prepare s1 as select * from test;
execute s1;
 name | age 
------+-----
 a    |  18
(1 row)

DEALLOCATE s1;
prepare s2(varchar(10)) as select * from test where name=$1;
execute s2('a');
 name | age 
------+-----
 a    |  18
(1 row)

execute s2;
ERROR:  wrong number of parameters for prepared statement "s2"
DETAIL:  Expected 1 parameters but got 0.
DEALLOCATE s2;
prepare s3 as select * from test where name=$1;
execute s3('a');
 name | age 
------+-----
 a    |  18
(1 row)

execute s3;
ERROR:  wrong number of parameters for prepared statement "s3"
DETAIL:  Expected 1 parameters but got 0.
DEALLOCATE s3;
prepare s1_mysql from select * from test;
execute s1_mysql;
 name | age 
------+-----
 a    |  18
(1 row)

execute s1_mysql('a');
 name | age 
------+-----
 a    |  18
(1 row)

DEALLOCATE s1_mysql;
prepare s2_mysql from select * from test where name=$1;
execute s2_mysql('a');
 name | age 
------+-----
 a    |  18
(1 row)

execute s2_mysql;
ERROR:  wrong number of parameters for prepared statement "s2_mysql"
DETAIL:  Expected 1 parameters but got 0.
DEALLOCATE s2_mysql;
prepare s3_mysql(varchar(10)) as select * from test where name=$1;
execute s3_mysql('a');
 name | age 
------+-----
 a    |  18
(1 row)

execute s3_mysql;
ERROR:  wrong number of parameters for prepared statement "s3_mysql"
DETAIL:  Expected 1 parameters but got 0.
DEALLOCATE s3_mysql;
drop table test;
prepare s_error from 'create table t1(a int)';
ERROR:  utility statements cannot be prepared
prepare s_error from 'select * from test; select * from test';
ERROR:  PREPARE can contain only one SQL statement.
prepare s_error from 'prepare s_error2 from '' prepare s_error3 from select * from t1''';
ERROR:  utility statements cannot be prepared
create table prepare_table_01(a int, b numeric) ;
create table prepare_table_02(a int, b int) ;
insert into prepare_table_01 values(1, 1),(1, 1),(1, 1);
insert into prepare_table_02 values(1, 1),(1, 1),(1, 1);
analyze prepare_table_01;
analyze prepare_table_02;
set dolphin.b_compatibility_mode to on;
prepare p1 from 'select * from prepare_table_01, prepare_table_02 where prepare_table_01.a = prepare_table_02.a';
prepare p2(int) from 'select * from prepare_table_01, prepare_table_02 where prepare_table_01.a = prepare_table_02.a and prepare_table_01.b = ?';
prepare s_error from 'select * from prepare_table_01, prepare_table_02 where prepare_table_01.a = prepare_table_02.a and prepare_table_01.b = ? and prepare_table_01.a = $1';
ERROR:  It is forbidden to use question mark and dollar quoting together.
--stream plan and stream exec.
explain (costs off, verbose on) execute p1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Nested Loop
   Output: prepare_table_01.a, prepare_table_01.b, prepare_table_02.a, prepare_table_02.b
   Join Filter: (prepare_table_01.a = prepare_table_02.a)
   ->  Seq Scan on test_mysql_prepare.prepare_table_01
         Output: prepare_table_01.a, prepare_table_01.b
   ->  Materialize
         Output: prepare_table_02.a, prepare_table_02.b
         ->  Seq Scan on test_mysql_prepare.prepare_table_02
               Output: prepare_table_02.a, prepare_table_02.b
(9 rows)

execute p1;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
(9 rows)

explain (costs off, verbose on) execute p2(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Nested Loop
   Output: prepare_table_01.a, prepare_table_01.b, prepare_table_02.a, prepare_table_02.b
   Join Filter: (prepare_table_01.a = prepare_table_02.a)
   ->  Seq Scan on test_mysql_prepare.prepare_table_01
         Output: prepare_table_01.a, prepare_table_01.b
         Filter: (prepare_table_01.b = ($1)::numeric)
   ->  Materialize
         Output: prepare_table_02.a, prepare_table_02.b
         ->  Seq Scan on test_mysql_prepare.prepare_table_02
               Output: prepare_table_02.a, prepare_table_02.b
(10 rows)

execute p2(1);
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
(9 rows)

execute p2 using 1;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
(9 rows)

set enable_set_variable_b_format to on;
set @a = 1;
set @b = 2;
set @c = 3;
execute p2 using @a;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
 1 | 1 | 1 | 1
(9 rows)

execute p2 using @b;
 a | b | a | b 
---+---+---+---
(0 rows)

execute p2 using @a, @b;
ERROR:  wrong number of parameters for prepared statement "p2"
DETAIL:  Expected 1 parameters but got 2.
prepare p5 as 'select a from prepare_table_01 INTERSECT select a from prepare_table_02 order by 1 limit 1';
explain (costs off, verbose on) execute p5;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: "*SELECT* 1".a, (0)
   ->  Sort
         Output: "*SELECT* 1".a, (0)
         Sort Key: "*SELECT* 1".a NULLS FIRST
         ->  HashSetOp Intersect
               Output: "*SELECT* 1".a, (0)
               ->  Append
                     ->  Subquery Scan on "*SELECT* 1"
                           Output: "*SELECT* 1".a, 0
                           ->  Seq Scan on test_mysql_prepare.prepare_table_01
                                 Output: prepare_table_01.a
                     ->  Subquery Scan on "*SELECT* 2"
                           Output: "*SELECT* 2".a, 1
                           ->  Seq Scan on test_mysql_prepare.prepare_table_02
                                 Output: prepare_table_02.a
(16 rows)

execute p5;
 a 
---
 1
(1 row)

prepare p6 as '(select * from prepare_table_01) union (select * from prepare_table_02)';
explain (costs off, verbose on) execute p6;
                             QUERY PLAN                             
--------------------------------------------------------------------
 HashAggregate
   Output: prepare_table_01.a, prepare_table_01.b
   Group By Key: prepare_table_01.a, prepare_table_01.b
   ->  Append
         ->  Seq Scan on test_mysql_prepare.prepare_table_01
               Output: prepare_table_01.a, prepare_table_01.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".a, "*SELECT* 2".b
               ->  Seq Scan on test_mysql_prepare.prepare_table_02
                     Output: prepare_table_02.a, prepare_table_02.b
(10 rows)

execute p6;
 a | b 
---+---
 1 | 1
(1 row)

SELECT jsonb '{"a":null, "b":"qq"}' ? 'a';
ERROR:  syntax error at or near "?"
LINE 1: SELECT jsonb '{"a":null, "b":"qq"}' ? 'a';
                                            ^
SELECT jsonb_exists('{"a":null, "b":"qq"}', 'a');
 jsonb_exists 
--------------
 t
(1 row)

SELECT jsonb '{"a":null, "b":"qq"}' ?| ARRAY['a','b'];
ERROR:  syntax error at or near "?"
LINE 1: SELECT jsonb '{"a":null, "b":"qq"}' ?| ARRAY['a','b'];
                                            ^
SELECT jsonb '{"a":null, "b":"qq"}' ?& ARRAY['a','b'];
ERROR:  syntax error at or near "?"
LINE 1: SELECT jsonb '{"a":null, "b":"qq"}' ?& ARRAY['a','b'];
                                            ^
DEALLOCATE p1;
DEALLOCATE p2;
DEALLOCATE p5;
DEALLOCATE p6;
insert into prepare_table_02 values(5, 5);
prepare p1 from 'select * from prepare_table_02 where a=?+?+?+?+?';
execute p1 using @a,@a,@a,@b,0;
 a | b 
---+---
 5 | 5
(1 row)

DEALLOCATE p1;
prepare p1 from 'select * from prepare_table_02 where a=? +? +?+ ?+?';
execute p1 using @a,@a,@a,@b,0;
 a | b 
---+---
 5 | 5
(1 row)

DEALLOCATE p1;
prepare p1 from 'select * from prepare_table_02 where a= ?* ?*?*? +?';
execute p1 using @a,@a,@a,@b,@c;
 a | b 
---+---
 5 | 5
(1 row)

DEALLOCATE p1;
prepare p1 from 'select * from prepare_table_02 where a= ?* ?*? *?+ ?';
execute p1 using @a,@a,@a,@b,@c;
 a | b 
---+---
 5 | 5
(1 row)

DEALLOCATE p1;
set dolphin.b_compatibility_mode to off;
prepare p2(int) from 'select * from prepare_table_01, prepare_table_02 where prepare_table_01.a = prepare_table_02.a and prepare_table_01.b = ?';
ERROR:  syntax error at end of input
LINE 1: ...where prepare_table_01.a = prepare_table_02.a and prepare_ta...
                                                             ^
SELECT jsonb '{"a":null, "b":"qq"}' ? 'a';
 ?column? 
----------
 t
(1 row)

SELECT jsonb '{"a":null, "b":"qq"}' ?| ARRAY['a','b'];
 ?column? 
----------
 t
(1 row)

SELECT jsonb '{"a":null, "b":"qq"}' ?& ARRAY['a','b'];
 ?column? 
----------
 t
(1 row)

drop table prepare_table_01;
drop table prepare_table_02;
set dolphin.b_compatibility_mode to on;
-- Testset 1 dynamic datanode reduction for single table
create table t1_xc_fqs(id1 int, id2 int, num int);
-- only params
prepare s as 'select * from t1_xc_fqs where id1=? and id2=?';
prepare i as insert into t1_xc_fqs values (?, ?, ?);
prepare u as 'update t1_xc_fqs set num=0 where id1=? and id2=?';
prepare d as delete from t1_xc_fqs where id1=? and id2=?;
insert into t1_xc_fqs values (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5);
explain (costs off, verbose on) execute s using 1,@a;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on test_mysql_prepare.t1_xc_fqs
   Output: id1, id2, num
   Filter: ((t1_xc_fqs.id1 = $1) AND (t1_xc_fqs.id2 = $2))
(3 rows)

explain (costs off, verbose on) execute i using 6,6,6;
               QUERY PLAN               
----------------------------------------
 [Bypass]
 Insert on test_mysql_prepare.t1_xc_fqs
   ->  Result
         Output: $1, $2, $3
(4 rows)

explain (costs off, verbose on) execute u using 2,@b;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Update on test_mysql_prepare.t1_xc_fqs
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs
         Output: id1, id2, 0, ctid
         Filter: ((t1_xc_fqs.id1 = $1) AND (t1_xc_fqs.id2 = $2))
(4 rows)

explain (costs off, verbose on) execute d using @c,@c;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Delete on test_mysql_prepare.t1_xc_fqs
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs
         Output: ctid
         Filter: ((t1_xc_fqs.id1 = $1) AND (t1_xc_fqs.id2 = $2))
(4 rows)

execute s using @a,1;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
(1 row)

execute i using 6,6,6;
select * from t1_xc_fqs order by id1;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
   2 |   2 |   2
   3 |   3 |   3
   4 |   4 |   4
   5 |   5 |   5
   6 |   6 |   6
(6 rows)

execute u using @b,2;
select * from t1_xc_fqs order by id1;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
   2 |   2 |   0
   3 |   3 |   3
   4 |   4 |   4
   5 |   5 |   5
   6 |   6 |   6
(6 rows)

execute d using @c,@c;
select * from t1_xc_fqs order by id1;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
   2 |   2 |   0
   4 |   4 |   4
   5 |   5 |   5
   6 |   6 |   6
(5 rows)

deallocate s;
deallocate i;
deallocate u;
deallocate d;
prepare s as select * from t1_xc_fqs where id1=? and id2=2;
prepare i as 'insert into t1_xc_fqs values (?, 2, 3)';
prepare u as update t1_xc_fqs set num=1 where id1=? and id2=2;
prepare d as 'delete from t1_xc_fqs where id1=? and id2=2';
truncate t1_xc_fqs;
insert into t1_xc_fqs values (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5);
explain (costs off, verbose on) execute s using @a;
                        QUERY PLAN                        
----------------------------------------------------------
 Seq Scan on test_mysql_prepare.t1_xc_fqs
   Output: id1, id2, num
   Filter: ((t1_xc_fqs.id1 = $1) AND (t1_xc_fqs.id2 = 2))
(3 rows)

explain (costs off, verbose on) execute i using 6;
               QUERY PLAN               
----------------------------------------
 [Bypass]
 Insert on test_mysql_prepare.t1_xc_fqs
   ->  Result
         Output: $1, 2, 3
(4 rows)

explain (costs off, verbose on) execute u using 2;
                           QUERY PLAN                           
----------------------------------------------------------------
 Update on test_mysql_prepare.t1_xc_fqs
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs
         Output: id1, id2, 1, ctid
         Filter: ((t1_xc_fqs.id1 = $1) AND (t1_xc_fqs.id2 = 2))
(4 rows)

explain (costs off, verbose on) execute d using @c;
                           QUERY PLAN                           
----------------------------------------------------------------
 Delete on test_mysql_prepare.t1_xc_fqs
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs
         Output: ctid
         Filter: ((t1_xc_fqs.id1 = $1) AND (t1_xc_fqs.id2 = 2))
(4 rows)

execute s using @a;
 id1 | id2 | num 
-----+-----+-----
(0 rows)

execute i using 6;
select * from t1_xc_fqs order by id1;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
   2 |   2 |   2
   3 |   3 |   3
   4 |   4 |   4
   5 |   5 |   5
   6 |   2 |   3
(6 rows)

execute u using 2;
select * from t1_xc_fqs order by id1;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
   2 |   2 |   1
   3 |   3 |   3
   4 |   4 |   4
   5 |   5 |   5
   6 |   2 |   3
(6 rows)

execute d using @c;
select * from t1_xc_fqs order by id1, id2;
 id1 | id2 | num 
-----+-----+-----
   1 |   1 |   1
   2 |   2 |   1
   3 |   3 |   3
   4 |   4 |   4
   5 |   5 |   5
   6 |   2 |   3
(6 rows)

deallocate s;
deallocate i;
deallocate u;
deallocate d;
-- Testset 2 dynamic datanode reduction for multi-table join
truncate t1_xc_fqs;
insert into t1_xc_fqs values (1,1,11), (2,2,21), (3,3,31), (4,4,41), (5,5,51);
create table t2_xc_fqs(id1 int, id2 int, num int);
insert into t2_xc_fqs values (1,2,12), (2,3,22), (3,4,32), (4,5,42), (5,6,52);
create table t3_xc_fqs(id11 int, id22 int, num int);
insert into t3_xc_fqs values (1,13,13), (2,23,23), (3,33,33), (4,43,43), (5,53,53);
-- implicit join
prepare s0 as select * from t1_xc_fqs t1,t2_xc_fqs t2 where t1.id1=? and t2.id1=?;
prepare s1 as 'select id11 from t1_xc_fqs t1,t2_xc_fqs t2,t3_xc_fqs t3 where t1.id1=? and t2.id1=? and t3.id11=?';
prepare s2 as select * from t1_xc_fqs t1,t2_xc_fqs t2 where t1.id1=t2.id1 and t1.id1=?;
prepare s3 as 'select id11 from t1_xc_fqs t1,t2_xc_fqs t2,t3_xc_fqs t3 where t1.id1=t2.id1 and t3.id11=?';
prepare s4 as select id11 from t1_xc_fqs t1,t2_xc_fqs t2,t3_xc_fqs t3 where t1.id1=t2.id1 and t1.id1=t3.id11 and t3.id11=?;
prepare s5 as 'select * from t1_xc_fqs t1,t2_xc_fqs t2 where t1.id1=t2.id2 and t2.id1=? and t2.id2=?';
explain (costs off, verbose on) execute s0 using @a,@a;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $1)
   ->  Materialize
         Output: t2.id1, t2.id2, t2.num
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $2)
(10 rows)

explain (costs off, verbose on) execute s0 using @a,3;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $1)
   ->  Materialize
         Output: t2.id1, t2.id2, t2.num
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $2)
(10 rows)

explain (costs off, verbose on) execute s1 using 2,@b,2;
                          QUERY PLAN                           
---------------------------------------------------------------
 Nested Loop
   Output: t3.id11
   ->  Nested Loop
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
               Filter: (t1.id1 = $1)
         ->  Materialize
               Output: t2.id1, t2.id2, t2.num
               ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
                     Output: t2.id1, t2.id2, t2.num
                     Filter: (t2.id1 = $2)
   ->  Materialize
         Output: t3.id11
         ->  Seq Scan on test_mysql_prepare.t3_xc_fqs t3
               Output: t3.id11
               Filter: (t3.id11 = $3)
(16 rows)

explain (costs off, verbose on) execute s2 using @c;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $1)
   ->  Materialize
         Output: t2.id1, t2.id2, t2.num
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $1)
(10 rows)

explain (costs off, verbose on) execute s3 using 4;
                          QUERY PLAN                           
---------------------------------------------------------------
 Hash Join
   Output: t3.id11
   Hash Cond: (t1.id1 = t2.id1)
   ->  Nested Loop
         Output: t3.id11, t1.id1
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
         ->  Materialize
               Output: t3.id11
               ->  Seq Scan on test_mysql_prepare.t3_xc_fqs t3
                     Output: t3.id11
                     Filter: (t3.id11 = $1)
   ->  Hash
         Output: t2.id1
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1
(16 rows)

explain (costs off, verbose on) execute s4 using 5;
                          QUERY PLAN                           
---------------------------------------------------------------
 Nested Loop
   Output: t3.id11
   ->  Nested Loop
         Output: t1.id1
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
               Filter: (t1.id1 = $1)
         ->  Materialize
               Output: t2.id1
               ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
                     Output: t2.id1
                     Filter: (t2.id1 = $1)
   ->  Materialize
         Output: t3.id11
         ->  Seq Scan on test_mysql_prepare.t3_xc_fqs t3
               Output: t3.id11
               Filter: (t3.id11 = $1)
(17 rows)

explain (costs off, verbose on) execute s5 using 4,5;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
         Output: t2.id1, t2.id2, t2.num
         Filter: ((t2.id2 = $2) AND (t2.id1 = $1))
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $2)
(8 rows)

execute s0 using @a,@a;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   1 |   1 |  11 |   1 |   2 |  12
(1 row)

execute s0 using @a,3;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   1 |   1 |  11 |   3 |   4 |  32
(1 row)

execute s1 using 2,@b,2;
 id11 
------
    2
(1 row)

execute s2 using @c;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   3 |   3 |  31 |   3 |   4 |  32
(1 row)

execute s3 (4);
 id11 
------
    4
    4
    4
    4
    4
(5 rows)

execute s4 (5);
 id11 
------
    5
(1 row)

execute s5 (4,5);
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   5 |   5 |  51 |   4 |   5 |  42
(1 row)

deallocate s0;
deallocate s1;
deallocate s2;
deallocate s3;
deallocate s4;
deallocate s5;
-- explicit join
prepare s0 as 'select * from t1_xc_fqs t1 join t2_xc_fqs t2 on t1.id1=$1 and t2.id1=$2';
prepare s1 as select id11 from t1_xc_fqs t1 join t2_xc_fqs t2 on t1.id1=$1 and t2.id1=$2 join t3_xc_fqs t3 on t3.id11=$3;
prepare s2 as 'select * from t1_xc_fqs t1 join t2_xc_fqs t2 on t1.id1=t2.id1 and t2.id1=$1';
prepare s3 as select id11 from t1_xc_fqs t1 join t2_xc_fqs t2 on t1.id1=t2.id1 join t3_xc_fqs t3 on t3.id11=$1;
prepare s4 as 'select id11 from t1_xc_fqs t1 join t2_xc_fqs t2 on t1.id1=t2.id1 join t3_xc_fqs t3 on t1.id1=t3.id11 and t3.id11=$1';
prepare s5 as select * from t1_xc_fqs t1 join t2_xc_fqs t2 on t1.id1=t2.id2 where t2.id1=$1 and t2.id2=$2;
explain (costs off, verbose on) execute s0 using @a,@a;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $1)
   ->  Materialize
         Output: t2.id1, t2.id2, t2.num
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $2)
(10 rows)

explain (costs off, verbose on) execute s0 using @a,@c;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $1)
   ->  Materialize
         Output: t2.id1, t2.id2, t2.num
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $2)
(10 rows)

explain (costs off, verbose on) execute s1 using 2,@b,2;
                          QUERY PLAN                           
---------------------------------------------------------------
 Nested Loop
   Output: t3.id11
   ->  Nested Loop
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
               Filter: (t1.id1 = $1)
         ->  Materialize
               Output: t2.id1, t2.id2, t2.num
               ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
                     Output: t2.id1, t2.id2, t2.num
                     Filter: (t2.id1 = $2)
   ->  Materialize
         Output: t3.id11
         ->  Seq Scan on test_mysql_prepare.t3_xc_fqs t3
               Output: t3.id11
               Filter: (t3.id11 = $3)
(16 rows)

explain (costs off, verbose on) execute s2 using @c;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $1)
   ->  Materialize
         Output: t2.id1, t2.id2, t2.num
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $1)
(10 rows)

explain (costs off, verbose on) execute s3 using 4;
                          QUERY PLAN                           
---------------------------------------------------------------
 Hash Join
   Output: t3.id11
   Hash Cond: (t1.id1 = t2.id1)
   ->  Nested Loop
         Output: t3.id11, t1.id1
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
         ->  Materialize
               Output: t3.id11
               ->  Seq Scan on test_mysql_prepare.t3_xc_fqs t3
                     Output: t3.id11
                     Filter: (t3.id11 = $1)
   ->  Hash
         Output: t2.id1
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1
(16 rows)

explain (costs off, verbose on) execute s4 using 5;
                          QUERY PLAN                           
---------------------------------------------------------------
 Nested Loop
   Output: t3.id11
   ->  Nested Loop
         Output: t1.id1
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
               Filter: (t1.id1 = $1)
         ->  Materialize
               Output: t2.id1
               ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
                     Output: t2.id1
                     Filter: (t2.id1 = $1)
   ->  Materialize
         Output: t3.id11
         ->  Seq Scan on test_mysql_prepare.t3_xc_fqs t3
               Output: t3.id11
               Filter: (t3.id11 = $1)
(17 rows)

explain (costs off, verbose on) execute s5 using 4,5;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num
   ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
         Output: t2.id1, t2.id2, t2.num
         Filter: ((t2.id2 = $2) AND (t2.id1 = $1))
   ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
         Output: t1.id1, t1.id2, t1.num
         Filter: (t1.id1 = $2)
(8 rows)

execute s0 using @a,@a;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   1 |   1 |  11 |   1 |   2 |  12
(1 row)

execute s0 using @a,3;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   1 |   1 |  11 |   3 |   4 |  32
(1 row)

execute s1 using 2,@b,2;
 id11 
------
    2
(1 row)

execute s2 using @c;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   3 |   3 |  31 |   3 |   4 |  32
(1 row)

execute s3 (4);
 id11 
------
    4
    4
    4
    4
    4
(5 rows)

execute s4 (5);
 id11 
------
    5
(1 row)

execute s5 (4,5);
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   5 |   5 |  51 |   4 |   5 |  42
(1 row)

deallocate s0;
deallocate s1;
deallocate s2;
deallocate s3;
deallocate s4;
deallocate s5;
prepare s0 as select * from t1_xc_fqs t1 left join t2_xc_fqs t2 on t1.id1=t2.id1 and t2.id1=? order by t1.id1;
prepare s1 as 'select * from t1_xc_fqs t1 right join t2_xc_fqs t2 on t1.id1=t2.id1 and t2.id1=? order by t2.id1';
prepare s2 as select * from t1_xc_fqs t1 full join t2_xc_fqs t2 on t1.id1=t2.id1 and t2.id1=? order by t1.id1, t2.id1;
explain (costs off, verbose on) execute s0 using @a;
                            QUERY PLAN                            
------------------------------------------------------------------
 Merge Left Join
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num, t1.id1
   Merge Cond: (t1.id1 = t2.id1)
   ->  Sort
         Output: t1.id1, t1.id2, t1.num
         Sort Key: t1.id1 NULLS FIRST
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
   ->  Sort
         Output: t2.id1, t2.id2, t2.num
         Sort Key: t2.id1 NULLS FIRST
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
               Filter: (t2.id1 = $1)
(14 rows)

explain (costs off, verbose on) execute s1 using 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num, t2.id1
   Sort Key: t2.id1 NULLS FIRST
   ->  Hash Left Join
         Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num, t2.id1
         Hash Cond: (t2.id1 = t1.id1)
         Join Filter: (t2.id1 = $1)
         ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
               Output: t2.id1, t2.id2, t2.num
         ->  Hash
               Output: t1.id1, t1.id2, t1.num
               ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
                     Output: t1.id1, t1.id2, t1.num
(13 rows)

explain (costs off, verbose on) execute s2 using 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num, t1.id1, t2.id1
   Sort Key: t1.id1 NULLS FIRST, t2.id1 NULLS FIRST
   ->  Hash Full Join
         Output: t1.id1, t1.id2, t1.num, t2.id1, t2.id2, t2.num, t1.id1, t2.id1
         Hash Cond: (t1.id1 = t2.id1)
         Join Filter: (t2.id1 = $1)
         ->  Seq Scan on test_mysql_prepare.t1_xc_fqs t1
               Output: t1.id1, t1.id2, t1.num
         ->  Hash
               Output: t2.id1, t2.id2, t2.num
               ->  Seq Scan on test_mysql_prepare.t2_xc_fqs t2
                     Output: t2.id1, t2.id2, t2.num
(13 rows)

execute s0 using 1;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   1 |   1 |  11 |   1 |   2 |  12
   2 |   2 |  21 |     |     |    
   3 |   3 |  31 |     |     |    
   4 |   4 |  41 |     |     |    
   5 |   5 |  51 |     |     |    
(5 rows)

execute s1 using @a;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
   1 |   1 |  11 |   1 |   2 |  12
     |     |     |   2 |   3 |  22
     |     |     |   3 |   4 |  32
     |     |     |   4 |   5 |  42
     |     |     |   5 |   6 |  52
(5 rows)

execute s2 using 1;
 id1 | id2 | num | id1 | id2 | num 
-----+-----+-----+-----+-----+-----
     |     |     |   2 |   3 |  22
     |     |     |   3 |   4 |  32
     |     |     |   4 |   5 |  42
     |     |     |   5 |   6 |  52
   1 |   1 |  11 |   1 |   2 |  12
   2 |   2 |  21 |     |     |    
   3 |   3 |  31 |     |     |    
   4 |   4 |  41 |     |     |    
   5 |   5 |  51 |     |     |    
(9 rows)

deallocate s0;
deallocate s1;
deallocate s2;
reset dolphin.b_compatibility_mode;
reset enable_set_variable_b_format;
drop schema test_mysql_prepare cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table t1_xc_fqs
drop cascades to table t2_xc_fqs
drop cascades to table t3_xc_fqs
reset current_schema;
