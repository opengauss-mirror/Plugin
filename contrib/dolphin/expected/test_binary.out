create schema test_binary;
set current_schema to 'test_binary';
create table binary_templates (a bytea, b binary(5), c varbinary(5));
-- invalid typmod
create table invalid_table (b binary(-1));
ERROR:  length for type binary must be at least 0
LINE 1: create table invalid_table (b binary(-1));
                                      ^
create table invalid_table (b binary(256));
ERROR:  length for type binary cannot exceed 255
LINE 1: create table invalid_table (b binary(256));
                                      ^
create table invalid_table (b varbinary(-1));
ERROR:  length for type varbinary must be at least 0
create table invalid_table (b varbinary(65536));
ERROR:  length for type varbinary cannot exceed 65535
insert into binary_templates values ('aaa', 'aaa', 'aaa');
insert into binary_templates values ('aaa', 'aaa', 'aaaaa');
-- invalid insert
insert into binary_templates values ('aaaaaa', 'aaaaaa', 'aaa');
ERROR:  The input length:6 exceeds the maximum length:5.
CONTEXT:  referenced column: b
insert into binary_templates values ('aaaaaa', 'aaa', 'aaaaaa');
ERROR:  The input length:6 exceeds the maximum length:5.
CONTEXT:  referenced column: c
select * from binary_templates;
    a     |      b       |      c       
----------+--------------+--------------
 \x616161 | \x6161610000 | \x616161
 \x616161 | \x6161610000 | \x6161616161
(2 rows)

create table test_bytea (a bytea);
create table test_binary (a binary(5));
create table test_varbinary (a varbinary(5));
insert into test_bytea select a from binary_templates;
insert into test_bytea select b from binary_templates;
insert into test_bytea select c from binary_templates;
insert into test_binary select a from binary_templates;
insert into test_binary select b from binary_templates;
insert into test_binary select c from binary_templates;
insert into test_varbinary select a from binary_templates;
insert into test_varbinary select b from binary_templates;
insert into test_varbinary select c from binary_templates;
create table shorter_binary (a binary(3));
create table shorter_varbinary (a varbinary(3));
insert into shorter_binary select b from binary_templates;
ERROR:  The input length:5 exceeds the maximum length:3.
CONTEXT:  referenced column: a
insert into shorter_varbinary select c from binary_templates;
ERROR:  The input length:5 exceeds the maximum length:3.
CONTEXT:  referenced column: a
create table test_index (a binary(10), b varbinary(10));
create index on test_index using btree (a);
create index on test_index using hash (a);
create index on test_index using gin (to_tsvector(a::text));
create index on test_index using btree (b);
create index on test_index using hash (b);
create index on test_index using gin (to_tsvector(b::text));
\d test_index
    Table "test_binary.test_index"
 Column |      Type       | Modifiers 
--------+-----------------+-----------
 a      | "binary"(10)    | 
 b      | "varbinary"(10) | 
Indexes:
    "test_index_a_idx" btree (a) TABLESPACE pg_default
    "test_index_a_idx1" hash (a) TABLESPACE pg_default
    "test_index_b_idx" btree (b) TABLESPACE pg_default
    "test_index_b_idx1" hash (b) TABLESPACE pg_default
    "test_index_to_tsvector_idx" gin (to_tsvector(a::text)) TABLESPACE pg_default
    "test_index_to_tsvector_idx1" gin (to_tsvector(b::text)) TABLESPACE pg_default

create cast (text as binary) without function as implicit;
create cast (text as varbinary) without function as implicit;
create table test_text2binary (a binary(255), b varbinary(65535));
insert into test_text2binary values(repeat('a', 256), repeat('a', 65536));
ERROR:  The input length:256 exceeds the maximum length:255.
CONTEXT:  referenced column: a
insert into test_text2binary values(repeat('a', 255), repeat('a', 65535));
select octet_length(a) as binary_length, octet_length(b) as varbinary_length from test_text2binary;
 binary_length | varbinary_length 
---------------+------------------
           255 |            65535
(1 row)

drop cast if exists (text as binary);
drop cast if exists (text as varbinary);
drop table binary_templates;
drop table test_binary;
drop table test_varbinary;
drop table shorter_binary;
drop table shorter_varbinary;
drop table test_index;
drop table test_text2binary;
drop table if exists t_binary_061;
NOTICE:  table "t_binary_061" does not exist, skipping
create table t_binary_061(id int, field_name binary(10));
PREPARE insert_binary(int,binary(10)) as insert into t_binary_061 values($1,$2);
EXECUTE insert_binary(1, 'aaa'::bytea);  -- length 3
EXECUTE insert_binary(1, 'aaaaaaaaaaa'::bytea);  -- length 11
ERROR:  The input length:11 exceeds the maximum length:10.
CONTEXT:  referenced column: field_name
drop table if exists t_varbinary_061;
NOTICE:  table "t_varbinary_061" does not exist, skipping
create table t_varbinary_061(id int, field_name varbinary(10));
PREPARE insert_varbinary(int,varbinary(10)) as insert into t_varbinary_061 values($1,$2);
EXECUTE insert_varbinary(1, 'aaa'::bytea);  -- length 3
EXECUTE insert_varbinary(1, 'aaaaaaaaaaa'::bytea); -- length 11
ERROR:  The input length:11 exceeds the maximum length:10.
CONTEXT:  referenced column: field_name
select * from t_binary_061;
 id |       field_name       
----+------------------------
  1 | \x61616100000000000000
(1 row)

select * from t_varbinary_061;
 id | field_name 
----+------------
  1 | \x616161
(1 row)

drop table if exists t_binary_061;
drop table if exists t_varbinary_061;
-- binary test enhance
select binary '\t';
 binary 
--------
 \x09
(1 row)

select binary '\\';
 binary 
--------
 \x5c
(1 row)

select binary '\a';
 binary 
--------
 \x61
(1 row)

select binary '\b';
 binary 
--------
 \x08
(1 row)

select binary '\n';
 binary 
--------
 \x0a
(1 row)

select binary '\r';
 binary 
--------
 \x0d
(1 row)

select binary '\v';
 binary 
--------
 \x76
(1 row)

select binary '\f';
 binary 
--------
 \x66
(1 row)

select binary '\"';
 binary 
--------
 \x22
(1 row)

select binary '\%';
 binary 
--------
 \x5c25
(1 row)

select binary '\_';
 binary 
--------
 \x5c5f
(1 row)

select binary '\0';
 binary 
--------
 \x00
(1 row)

select binary '\z';
 binary 
--------
 \x7a
(1 row)

select binary '\pqy';
  binary  
----------
 \x707179
(1 row)

select binary '数据库';
        binary        
----------------------
 \xe695b0e68daee5ba93
(1 row)

select binary E'\t';
 binary 
--------
 \x09
(1 row)

select binary E'\\';
 binary 
--------
 \x5c
(1 row)

select binary E'\a';
 binary 
--------
 \x61
(1 row)

select binary E'\b';
 binary 
--------
 \x08
(1 row)

select binary E'\n';
 binary 
--------
 \x0a
(1 row)

select binary E'\r';
 binary 
--------
 \x0d
(1 row)

select binary E'\v';
 binary 
--------
 \x76
(1 row)

select binary E'\f';
 binary 
--------
 \x0c
(1 row)

select binary E'\"';
 binary 
--------
 \x22
(1 row)

select binary E'\%';
 binary 
--------
 \x25
(1 row)

select binary E'\_';
 binary 
--------
 \x5f
(1 row)

select binary E'\0';
ERROR:  invalid byte sequence for encoding "UTF8": 0x00
select binary E'\z';
 binary 
--------
 \x7a
(1 row)

select binary E'\pqy';
  binary  
----------
 \x707179
(1 row)

select binary E'数据库';
        binary        
----------------------
 \xe695b0e68daee5ba93
(1 row)

-- binary type cast test
select 'abc'::binary;
  binary  
----------
 \x616263
(1 row)

select 'abcdefgh'::binary;
       binary       
--------------------
 \x6162636465666768
(1 row)

select 'abc'::binary(20);
                   binary                   
--------------------------------------------
 \x6162630000000000000000000000000000000000
(1 row)

select 'a啊填啊'::binary;
         binary         
------------------------
 \x61e5958ae5a1abe5958a
(1 row)

-- other type
select 123::binary;
  binary  
----------
 \x313233
(1 row)

select 123.456::binary;
      binary      
------------------
 \x3132332e343536
(1 row)

select '2020-01-01'::date::binary;
         binary         
------------------------
 \x30312d30312d32303230
(1 row)

select '12:13:13'::time::binary;
       binary       
--------------------
 \x31323a31333a3133
(1 row)

--errreport
select 'abc'::binary(-1);
ERROR:  length for type binary must be at least 0
LINE 1: select 'abc'::binary(-1);
                      ^
CONTEXT:  referenced column: binary
select 'abc'::binary(1);
ERROR:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: binary
--binary in like and escape
select 'abcd' like binary 'abc%';
 ?column? 
----------
 t
(1 row)

select 'abcd' like binary 'abc\%';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc\%' escape '\';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc|%' escape '|';
 ?column? 
----------
 f
(1 row)

select 'abc%' like binary 'abc|%' escape '|';
 ?column? 
----------
 t
(1 row)

select 'abcd' like binary 'abc_';
 ?column? 
----------
 t
(1 row)

select 'abcd' like binary 'abc\_';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc\_' escape '\';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc|_' escape '|';
 ?column? 
----------
 f
(1 row)

select 'abc%' like binary 'abc|_' escape '|';
 ?column? 
----------
 f
(1 row)

-- test binary expr gram;
select binary sin(1);
                 sin                  
--------------------------------------
 \x302e383431343730393834383037383937
(1 row)

drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table t1(a int, b text);
insert into t1 values(1,'test');
select binary a from t1;
  a   
------
 \x31
(1 row)

select binary b from t1;
     b      
------------
 \x74657374
(1 row)

select binary a =  binary '3' from t1;
 ?column? 
----------
 f
(1 row)

--test create binary table 
drop table if exists t1;
create table t1(a binary, b text);
insert into t1 values('a','name1');
insert into t1 values('ad','name2');
ERROR:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: a
select * from t1;
  a   |   b   
------+-------
 \x61 | name1
(1 row)

-- enhase origin request 
SELECT BINARY 'Geeksforgeeks';
            binary            
------------------------------
 \x4765656b73666f726765656b73
(1 row)

select binary repeat('a', 3);
  repeat  
----------
 \x616161
(1 row)

create table test33 (c binary(3));
insert into test33 set c = 'a';
select hex(c), c = 'a', c = 'a\0\0' from test33;
  hex   | ?column? | ?column? 
--------+----------+----------
 610000 | f        | t
(1 row)

-- binary operator
select c > 'a\0\0' from test33;
 ?column? 
----------
 f
(1 row)

select c <> 'a\0\0' from test33;
 ?column? 
----------
 f
(1 row)

select c >= 'a\0\0' from test33;
 ?column? 
----------
 t
(1 row)

select c <= 'a\0\0' from test33;
 ?column? 
----------
 t
(1 row)

select c != 'a\0\0' from test33;
 ?column? 
----------
 f
(1 row)

--test binary core dump bug
select cast('a' as binary(0));
ERROR:  The input length:1 exceeds the maximum length:0.
CONTEXT:  referenced column: binary
select cast(''	as binary(0));
 binary 
--------
 
(1 row)

select cast('ab' as binary(12));
           binary           
----------------------------
 \x616200000000000000000000
(1 row)

create table test34 (a binary(0));
insert into test34 values('a');
ERROR:  The input length:1 exceeds the maximum length:0.
CONTEXT:  referenced column: a
insert into test34 values('');
SELECT 'ab'::binary = 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary < 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary <= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary > 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary >= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary <> 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab' = 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab' < 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab' <= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab' > 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab' >= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab' <> 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary = 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary < 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary <= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary > 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary >= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary <> 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary = 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary < 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary <= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary > 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary >= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary <> 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) = 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) < 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) <= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) > 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) >= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) <> 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab' = 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab' < 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab' <= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab' > 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab' >= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab' <> 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) = 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) < 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) <= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) > 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) >= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) <> 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) = 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) < 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) <= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) > 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) >= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) <> 'ab'::binary;
 ?column? 
----------
 f
(1 row)

set dolphin.b_compatibility_mode to on;
create table binary_operator(c1 binary(10), c2 numeric(10, 2), c3 time(6), c4 uint1, c5 uint2, c6 uint4, c7 uint8);
insert into binary_operator values('34', '234.5', '234.5', 234, 234, 234, 234), ('1234', '234.5', '234.5', 234, 234, 234, 234);
select c1 < c2, c1 > c2, c1 <= c2, c1 >= c2 from binary_operator;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 t        | f        | t        | f
 f        | t        | f        | t
(2 rows)

select c1 < c3, c1 > c3, c1 <= c3, c1 >= c3 from binary_operator;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 t        | f        | t        | f
 f        | t        | f        | t
(2 rows)

select c1 < c4, c1 > c4, c1 <= c4, c1 >= c4 from binary_operator;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 t        | f        | t        | f
 f        | t        | f        | t
(2 rows)

select c1 < c5, c1 > c5, c1 <= c5, c1 >= c5 from binary_operator;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 t        | f        | t        | f
 f        | t        | f        | t
(2 rows)

select c1 < c6, c1 > c6, c1 <= c6, c1 >= c6 from binary_operator;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 t        | f        | t        | f
 f        | t        | f        | t
(2 rows)

select c1 < c7, c1 > c7, c1 <= c7, c1 >= c7 from binary_operator;
 ?column? | ?column? | ?column? | ?column? 
----------+----------+----------+----------
 t        | f        | t        | f
 f        | t        | f        | t
(2 rows)

drop table if exists binary_operator;
reset dolphin.b_compatibility_mode;
drop schema test_binary cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table test_bytea
drop cascades to table t1
drop cascades to table test33
drop cascades to table test34
reset current_schema;
