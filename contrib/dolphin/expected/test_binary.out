create schema test_binary;
set current_schema to 'test_binary';
create table binary_templates (a bytea, b binary(5), c varbinary(5));
-- invalid typmod
create table invalid_table (b binary(-1));
ERROR:  length for type binary must be at least 0
LINE 1: create table invalid_table (b binary(-1));
                                      ^
create table invalid_table (b binary(256));
ERROR:  length for type binary cannot exceed 255
LINE 1: create table invalid_table (b binary(256));
                                      ^
create table invalid_table (b varbinary(-1));
ERROR:  length for type varbinary must be at least 0
create table invalid_table (b varbinary(65536));
ERROR:  length for type varbinary cannot exceed 65535
insert into binary_templates values ('aaa', 'aaa', 'aaa');
insert into binary_templates values ('aaa', 'aaa', 'aaaaa');
-- invalid insert
insert into binary_templates values ('aaaaaa', 'aaaaaa', 'aaa');
ERROR:  The input length:6 exceeds the maximum length:5.
CONTEXT:  referenced column: b
insert into binary_templates values ('aaaaaa', 'aaa', 'aaaaaa');
ERROR:  The input length:6 exceeds the maximum length:5.
CONTEXT:  referenced column: c
select * from binary_templates;
    a     |      b       |      c       
----------+--------------+--------------
 \x616161 | \x6161610000 | \x616161
 \x616161 | \x6161610000 | \x6161616161
(2 rows)

create table test_bytea (a bytea);
create table test_binary (a binary(5));
create table test_varbinary (a varbinary(5));
insert into test_bytea select a from binary_templates;
insert into test_bytea select b from binary_templates;
insert into test_bytea select c from binary_templates;
insert into test_binary select a from binary_templates;
insert into test_binary select b from binary_templates;
insert into test_binary select c from binary_templates;
insert into test_varbinary select a from binary_templates;
insert into test_varbinary select b from binary_templates;
insert into test_varbinary select c from binary_templates;
create table shorter_binary (a binary(3));
create table shorter_varbinary (a varbinary(3));
insert into shorter_binary select b from binary_templates;
ERROR:  The input length:5 exceeds the maximum length:3.
CONTEXT:  referenced column: a
insert into shorter_varbinary select c from binary_templates;
ERROR:  The input length:5 exceeds the maximum length:3.
CONTEXT:  referenced column: a
create table test_index (a binary(10), b varbinary(10));
create index on test_index using btree (a);
create index on test_index using hash (a);
create index on test_index using gin (to_tsvector(a::text));
create index on test_index using btree (b);
create index on test_index using hash (b);
create index on test_index using gin (to_tsvector(b::text));
\d test_index
    Table "test_binary.test_index"
 Column |      Type       | Modifiers 
--------+-----------------+-----------
 a      | "binary"(10)    | 
 b      | "varbinary"(10) | 
Indexes:
    "test_index_a_idx" btree (a) TABLESPACE pg_default
    "test_index_a_idx1" hash (a) TABLESPACE pg_default
    "test_index_b_idx" btree (b) TABLESPACE pg_default
    "test_index_b_idx1" hash (b) TABLESPACE pg_default
    "test_index_to_tsvector_idx" gin (to_tsvector(a::text)) TABLESPACE pg_default
    "test_index_to_tsvector_idx1" gin (to_tsvector(b::text)) TABLESPACE pg_default

create cast (text as binary) without function as implicit;
create cast (text as varbinary) without function as implicit;
create table test_text2binary (a binary(255), b varbinary(65535));
insert into test_text2binary values(repeat('a', 256), repeat('a', 65536));
ERROR:  The input length:256 exceeds the maximum length:255.
CONTEXT:  referenced column: a
insert into test_text2binary values(repeat('a', 255), repeat('a', 65535));
select octet_length(a) as binary_length, octet_length(b) as varbinary_length from test_text2binary;
 binary_length | varbinary_length 
---------------+------------------
           255 |            65535
(1 row)

drop cast if exists (text as binary);
drop cast if exists (text as varbinary);
drop table binary_templates;
drop table test_binary;
drop table test_varbinary;
drop table shorter_binary;
drop table shorter_varbinary;
drop table test_index;
drop table test_text2binary;
drop table if exists t_binary_061;
NOTICE:  table "t_binary_061" does not exist, skipping
create table t_binary_061(id int, field_name binary(10));
PREPARE insert_binary(int,binary(10)) as insert into t_binary_061 values($1,$2);
EXECUTE insert_binary(1, 'aaa'::bytea);  -- length 3
EXECUTE insert_binary(1, 'aaaaaaaaaaa'::bytea);  -- length 11
ERROR:  The input length:11 exceeds the maximum length:10.
CONTEXT:  referenced column: field_name
drop table if exists t_varbinary_061;
NOTICE:  table "t_varbinary_061" does not exist, skipping
create table t_varbinary_061(id int, field_name varbinary(10));
PREPARE insert_varbinary(int,varbinary(10)) as insert into t_varbinary_061 values($1,$2);
EXECUTE insert_varbinary(1, 'aaa'::bytea);  -- length 3
EXECUTE insert_varbinary(1, 'aaaaaaaaaaa'::bytea); -- length 11
ERROR:  The input length:11 exceeds the maximum length:10.
CONTEXT:  referenced column: field_name
select * from t_binary_061;
 id |       field_name       
----+------------------------
  1 | \x61616100000000000000
(1 row)

select * from t_varbinary_061;
 id | field_name 
----+------------
  1 | \x616161
(1 row)

drop table if exists t_binary_061;
drop table if exists t_varbinary_061;
-- binary test enhance
select binary '\t';
 binary 
--------
 \x09
(1 row)

select binary '\\';
 binary 
--------
 \x5c
(1 row)

select binary '\a';
 binary 
--------
 \x61
(1 row)

select binary '\b';
 binary 
--------
 \x08
(1 row)

select binary '\n';
 binary 
--------
 \x0a
(1 row)

select binary '\r';
 binary 
--------
 \x0d
(1 row)

select binary '\v';
 binary 
--------
 \x76
(1 row)

select binary '\f';
 binary 
--------
 \x66
(1 row)

select binary '\"';
 binary 
--------
 \x22
(1 row)

select binary '\%';
 binary 
--------
 \x5c25
(1 row)

select binary '\_';
 binary 
--------
 \x5c5f
(1 row)

select binary '\0';
 binary 
--------
 \x00
(1 row)

select binary '\z';
 binary 
--------
 \x7a
(1 row)

select binary '\pqy';
  binary  
----------
 \x707179
(1 row)

select binary '数据库';
        binary        
----------------------
 \xe695b0e68daee5ba93
(1 row)

select binary E'\t';
 binary 
--------
 \x09
(1 row)

select binary E'\\';
 binary 
--------
 \x5c
(1 row)

select binary E'\a';
 binary 
--------
 \x61
(1 row)

select binary E'\b';
 binary 
--------
 \x08
(1 row)

select binary E'\n';
 binary 
--------
 \x0a
(1 row)

select binary E'\r';
 binary 
--------
 \x0d
(1 row)

select binary E'\v';
 binary 
--------
 \x76
(1 row)

select binary E'\f';
 binary 
--------
 \x0c
(1 row)

select binary E'\"';
 binary 
--------
 \x22
(1 row)

select binary E'\%';
 binary 
--------
 \x25
(1 row)

select binary E'\_';
 binary 
--------
 \x5f
(1 row)

select binary E'\0';
ERROR:  invalid byte sequence for encoding "UTF8": 0x00
select binary E'\z';
 binary 
--------
 \x7a
(1 row)

select binary E'\pqy';
  binary  
----------
 \x707179
(1 row)

select binary E'数据库';
        binary        
----------------------
 \xe695b0e68daee5ba93
(1 row)

-- binary type cast test
select 'abc'::binary;
  binary  
----------
 \x616263
(1 row)

select 'abcdefgh'::binary;
       binary       
--------------------
 \x6162636465666768
(1 row)

select 'abc'::binary(20);
                   binary                   
--------------------------------------------
 \x6162630000000000000000000000000000000000
(1 row)

select 'a啊填啊'::binary;
         binary         
------------------------
 \x61e5958ae5a1abe5958a
(1 row)

-- other type
select 123::binary;
  binary  
----------
 \x313233
(1 row)

select 123.456::binary;
      binary      
------------------
 \x3132332e343536
(1 row)

select '2020-01-01'::date::binary;
         binary         
------------------------
 \x323032302d30312d3031
(1 row)

select '12:13:13'::time::binary;
       binary       
--------------------
 \x31323a31333a3133
(1 row)

--errreport
select 'abc'::binary(-1);
ERROR:  length for type binary must be at least 0
LINE 1: select 'abc'::binary(-1);
                      ^
CONTEXT:  referenced column: binary
select 'abc'::binary(1);
ERROR:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: binary
--binary in like and escape
select 'abcd' like binary 'abc%';
 ?column? 
----------
 t
(1 row)

select 'abcd' like binary 'abc\%';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc\%' escape '\';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc|%' escape '|';
 ?column? 
----------
 f
(1 row)

select 'abc%' like binary 'abc|%' escape '|';
 ?column? 
----------
 t
(1 row)

select 'abcd' like binary 'abc_';
 ?column? 
----------
 t
(1 row)

select 'abcd' like binary 'abc\_';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc\_' escape '\';
 ?column? 
----------
 f
(1 row)

select 'abcd' like binary 'abc|_' escape '|';
 ?column? 
----------
 f
(1 row)

select 'abc%' like binary 'abc|_' escape '|';
 ?column? 
----------
 f
(1 row)

-- test binary expr gram;
select binary sin(1);
                  sin                   
----------------------------------------
 \x302e38343134373039383438303738393635
(1 row)

drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table t1(a int, b text);
insert into t1 values(1,'test');
select binary a from t1;
  a   
------
 \x31
(1 row)

select binary b from t1;
     b      
------------
 \x74657374
(1 row)

select binary a =  binary '3' from t1;
 ?column? 
----------
 f
(1 row)

--test create binary table 
drop table if exists t1;
create table t1(a binary, b text);
insert into t1 values('a','name1');
insert into t1 values('ad','name2');
ERROR:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: a
select * from t1;
  a   |   b   
------+-------
 \x61 | name1
(1 row)

-- enhase origin request 
SELECT BINARY 'Geeksforgeeks';
            binary            
------------------------------
 \x4765656b73666f726765656b73
(1 row)

select binary repeat('a', 3);
  repeat  
----------
 \x616161
(1 row)

create table test33 (c binary(3));
insert into test33 set c = 'a';
select hex(c), c = 'a', c = 'a\0\0' from test33;
  hex   | ?column? | ?column? 
--------+----------+----------
 610000 | f        | t
(1 row)

-- binary operator
select c > 'a\0\0' from test33;
 ?column? 
----------
 f
(1 row)

select c <> 'a\0\0' from test33;
 ?column? 
----------
 f
(1 row)

select c >= 'a\0\0' from test33;
 ?column? 
----------
 t
(1 row)

select c <= 'a\0\0' from test33;
 ?column? 
----------
 t
(1 row)

select c != 'a\0\0' from test33;
 ?column? 
----------
 f
(1 row)

--test binary core dump bug
select cast('a' as binary(0));
ERROR:  The input length:1 exceeds the maximum length:0.
CONTEXT:  referenced column: binary
select cast(''	as binary(0));
 binary 
--------
 
(1 row)

select cast('ab' as binary(12));
           binary           
----------------------------
 \x616200000000000000000000
(1 row)

create table test34 (a binary(0));
insert into test34 values('a');
ERROR:  The input length:1 exceeds the maximum length:0.
CONTEXT:  referenced column: a
insert into test34 values('');
SELECT 'ab'::binary = 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary < 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary <= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary > 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary >= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary <> 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab' = 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab' < 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab' <= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab' > 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab' >= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab' <> 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary = 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary < 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary <= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary > 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary >= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary <> 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary = 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary < 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary <= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary > 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::binary >= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::binary <> 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) = 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) < 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) <= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) > 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) >= 'ab';
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) <> 'ab';
 ?column? 
----------
 f
(1 row)

SELECT 'ab' = 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab' < 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab' <= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab' > 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab' >= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab' <> 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) = 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) < 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) <= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) > 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) >= 'ab'::varbinary(2);
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) <> 'ab'::varbinary(2);
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) = 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) < 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) <= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) > 'ab'::binary;
 ?column? 
----------
 f
(1 row)

SELECT 'ab'::varbinary(2) >= 'ab'::binary;
 ?column? 
----------
 t
(1 row)

SELECT 'ab'::varbinary(2) <> 'ab'::binary;
 ?column? 
----------
 f
(1 row)

-- binary to bigint
select (20220101)::binary(30)::bigint;
   int8   
----------
 20220101
(1 row)

select (-2075)::binary(30)::bigint;
 int8  
-------
 -2075
(1 row)

--binary/varbinary index test
create table t_index_test(a binary(100), b varbinary(100));
insert into t_index_test select i,i from generate_series(1,10000) i;
create index i_b on t_index_test(a);
create index i_vb on t_index_test(b);
analyze t_index_test;
explain (costs off) select * from t_index_test where a='1';
              QUERY PLAN              
--------------------------------------
 [Bypass]
 Index Scan using i_b on t_index_test
   Index Cond: (a = '\x31'::"binary")
(3 rows)

explain (costs off) select * from t_index_test where a>='a1';
               QUERY PLAN                
-----------------------------------------
 [Bypass]
 Index Scan using i_b on t_index_test
   Index Cond: (a >= '\x6131'::"binary")
(3 rows)

explain (costs off) select * from t_index_test where a>'a1';
               QUERY PLAN               
----------------------------------------
 [Bypass]
 Index Scan using i_b on t_index_test
   Index Cond: (a > '\x6131'::"binary")
(3 rows)

explain (costs off) select * from t_index_test where a<='1';
              QUERY PLAN               
---------------------------------------
 [Bypass]
 Index Scan using i_b on t_index_test
   Index Cond: (a <= '\x31'::"binary")
(3 rows)

explain (costs off) select * from t_index_test where a<'1';
              QUERY PLAN              
--------------------------------------
 [Bypass]
 Index Scan using i_b on t_index_test
   Index Cond: (a < '\x31'::"binary")
(3 rows)

explain (costs off) select * from t_index_test where b='1';
              QUERY PLAN               
---------------------------------------
 [Bypass]
 Index Scan using i_vb on t_index_test
   Index Cond: (b = '\x31'::varbinary)
(3 rows)

explain (costs off) select * from t_index_test where b>='a1';
                QUERY PLAN                
------------------------------------------
 [Bypass]
 Index Scan using i_vb on t_index_test
   Index Cond: (b >= '\x6131'::varbinary)
(3 rows)

explain (costs off) select * from t_index_test where b>'a1';
               QUERY PLAN                
-----------------------------------------
 [Bypass]
 Index Scan using i_vb on t_index_test
   Index Cond: (b > '\x6131'::varbinary)
(3 rows)

explain (costs off) select * from t_index_test where b<='1';
               QUERY PLAN               
----------------------------------------
 [Bypass]
 Index Scan using i_vb on t_index_test
   Index Cond: (b <= '\x31'::varbinary)
(3 rows)

explain (costs off) select * from t_index_test where b<'1';
              QUERY PLAN               
---------------------------------------
 [Bypass]
 Index Scan using i_vb on t_index_test
   Index Cond: (b < '\x31'::varbinary)
(3 rows)

drop index i_b;
drop index i_vb;
create index i_b on t_index_test(a) using hash;
create index i_vb on t_index_test(b) using hash;
analyze t_index_test;
explain (costs off) select * from t_index_test where a='1';
              QUERY PLAN              
--------------------------------------
 Index Scan using i_b on t_index_test
   Index Cond: (a = '\x31'::"binary")
(2 rows)

explain (costs off) select * from t_index_test where b='1';
              QUERY PLAN               
---------------------------------------
 Index Scan using i_vb on t_index_test
   Index Cond: (b = '\x31'::varbinary)
(2 rows)

drop table t_index_test;
-- binary about concat
DROP TABLE IF EXISTS t1;
SET dolphin.sql_mode = 'sql_mode_strict,sql_mode_full_group,pipes_as_concat,ansi_quotes,no_zero_date,pad_char_to_full_length,auto_recompile_function,error_for_division_by_zero,treat_bxconst_as_binary';
CREATE TABLE t1 (s1 binary(2), s2 varbinary(2));
INSERT INTO t1 VALUES (0x4100, 0x4100);
SELECT HEX(concat('*', s1, '*', s2, '*')) FROM t1;
      hex       
----------------
 2A41002A41002A
(1 row)

SELECT HEX(concat('*', s1, '*', s2, '*')) FROM t1;
      hex       
----------------
 2A41002A41002A
(1 row)

SELECT HEX(s1), HEX(s2), HEX('*') FROM t1;
 hex  | hex  | hex 
------+------+-----
 4100 | 4100 | 2A
(1 row)

DROP TABLE t1;
-- test about set to binary
set dolphin.b_compatibility_mode=on;
set bytea_output=escape;
drop table if exists t_set0004;
NOTICE:  table "t_set0004" does not exist, skipping
create table t_set0004(
c1 int not null auto_increment primary key,
c2 set('2011-11-11', '2023-02-28 11:23:00', '2024-01', '2025/01/01')
default null,
c3 set('red', 'yellow', 'blue') not null,
c4 set('0', '1', '1.01314'));
NOTICE:  CREATE TABLE will create implicit sequence "t_set0004_c1_seq" for serial column "t_set0004.c1"
NOTICE:  CREATE TABLE will create implicit set "t_set0004_c2_set" for column "t_set0004.c2"
NOTICE:  CREATE TABLE will create implicit set "t_set0004_c3_set" for column "t_set0004.c3"
NOTICE:  CREATE TABLE will create implicit set "t_set0004_c4_set" for column "t_set0004.c4"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t_set0004_pkey" for table "t_set0004"
insert into t_set0004(c2, c3, c4) values ('2025/01/01', 'blue', '0');
insert into t_set0004(c2, c3, c4) values (
'2011-11-11,2023-02-28 11:23:00', 'red,yellow', '0,1');
insert into t_set0004(c2, c3, c4) values (
'2024-01,2011-11-11,2025/01/01', 'red,blue', '0,1.01314');
insert into t_set0004(c2, c3) values ('2023-02-28 11:23:00', 'red');
insert into t_set0004(c2, c3) values (
'2023-02-28 11:23:00,2025/01/01,2025/01/01', 'blue,blue,yellow');
insert into t_set0004(c3) values ('yellow');
insert into t_set0004(c3) values ('yellow,yellow,yellow,yellow');
insert into t_set0004(c3) values ('blue,yellow,red,red');
insert into t_set0004(c3) values ('blue,red');
insert into t_set0004(c3, c4) values ('red', '1');
insert into t_set0004(c3, c4) values ('red,red', '1.01314,1.01314');
insert into t_set0004(c3, c4) values ('red,blue', '0,1,1.01314');
select cast(c1 as binary(1)), cast(c2 as binary(1)), cast(c3 as binary(1)),
cast(c4 as binary(1)) from t_set0004 order by 1,2,3,4;
WARNING:  The input length:10 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:4 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:30 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:10 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
WARNING:  The input length:29 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:8 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
WARNING:  The input length:19 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:30 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:11 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:6 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:6 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:15 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:8 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: c1
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: c1
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:7 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
WARNING:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: c1
WARNING:  The input length:8 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:11 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
 c1 | c2 | c3 | c4 
----+----+----+----
 1  |    | r  | 0
 1  |    | r  | 1
 1  |    | r  | 1
 1  | 2  | b  | 0
 2  | 2  | r  | 0
 3  | 2  | r  | 0
 4  | 2  | r  | 
 5  | 2  | y  | 
 6  |    | y  | 
 7  |    | y  | 
 8  |    | r  | 
 9  |    | r  | 
(12 rows)

select convert(c1, binary(1)), convert(c2, binary(1)), convert(c3, binary(1)),
convert(c4, binary(1)) from t_set0004 order by 1,2,3,4;
WARNING:  The input length:10 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:4 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:30 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:10 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
WARNING:  The input length:29 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:8 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
WARNING:  The input length:19 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:30 exceeds the maximum length:1.
CONTEXT:  referenced column: c2
WARNING:  The input length:11 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:6 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:6 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:15 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:8 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: c1
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: c1
WARNING:  The input length:3 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:7 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
WARNING:  The input length:2 exceeds the maximum length:1.
CONTEXT:  referenced column: c1
WARNING:  The input length:8 exceeds the maximum length:1.
CONTEXT:  referenced column: c3
WARNING:  The input length:11 exceeds the maximum length:1.
CONTEXT:  referenced column: c4
 c1 | c2 | c3 | c4 
----+----+----+----
 1  |    | r  | 0
 1  |    | r  | 1
 1  |    | r  | 1
 1  | 2  | b  | 0
 2  | 2  | r  | 0
 3  | 2  | r  | 0
 4  | 2  | r  | 
 5  | 2  | y  | 
 6  |    | y  | 
 7  |    | y  | 
 8  |    | r  | 
 9  |    | r  | 
(12 rows)

select cast('2023-1-12' as binary(1));
WARNING:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: binary
 binary 
--------
 2
(1 row)

drop table t_set0004;
drop table if exists test_ignore;
NOTICE:  table "test_ignore" does not exist, skipping
create table test_ignore (a binary(1), b varbinary(1));
insert into test_ignore(a) values(cast('2023-1-12' as binary(1)));
ERROR:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: a
insert into test_ignore(b) values(cast('2023-1-12' as binary(1)));
ERROR:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: b
insert ignore into test_ignore values(cast('2023-1-12' as binary(1)), cast('2023-1-12' as varbinary(1)));
WARNING:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: a
WARNING:  The input length:9 exceeds the maximum length:1.
CONTEXT:  referenced column: b
drop table test_ignore;
set dolphin.b_compatibility_mode=on;
set b_format_behavior_compat_options=enable_set_variables;
set bytea_output=escape;
drop table if exists t_binary0002 cascade;
NOTICE:  table "t_binary0002" does not exist, skipping
create table t_binary0002(
c1 int not null,
c2 binary,
c3 binary(10),
c4 binary(255),
c5 varbinary(1),
c6 varbinary(10),
c7 varbinary(255)) charset utf8mb3;
WARNING:  utf8mb3 is not a valid encoding name. default value set
set @v1='abcdefghijklmnopqrstuvwxyz';
set @v2='a熊猫竹竹爱吃竹子';
set @v3=hex(@v2);
set @v4=unhex(@v3);
set @v5=bin(121314);
set @v6=oct(999999);
insert into t_binary0002 values (
1, substr(@v1,1,1), substr(@v1,1,10), repeat(@v1, 9),
substr(@v1,1,1), substr(@v1,1,10), repeat(@v1, 9));
insert into t_binary0002 values (
2, substr(@v2,1,1), substr(@v2,1,4), repeat(@v2, 9),
substr(@v2,1,1), substr(@v2,1,4), repeat(@v2, 9));
insert into t_binary0002 values (
3, substr(@v3,1,1), substr(@v3,1,4), substr(repeat(@v3, 10),1,255),
substr(@v3,1,1), substr(@v3,1,4), substr(repeat(@v3, 10),1,255));
insert into t_binary0002 values (
4, substr(@v4,1,1), substr(@v4,1,4), substr(repeat(@v4, 10),1,255),
substr(@v4,1,1), substr(@v4,1,4), substr(repeat(@v4, 10),1,255));
insert into t_binary0002 values (
5, substr(@v5,1,1), substr(@v5,1,4), substr(repeat(@v5, 10),1,255),
substr(@v5,1,1), substr(@v5,1,4), substr(repeat(@v5, 10),1,255));
insert into t_binary0002 values (
6, substr(@v6,1,1), substr(@v6,1,4), substr(repeat(@v6, 10),1,255),
substr(@v6,1,1), substr(@v6,1,4), substr(repeat(@v6, 10),1,255));
select c1, cast(c2 as char), cast(c3 as char), cast(c4 as char), cast(c5 as
char), cast(c6 as char), cast(c7 as char) from t_binary0002 order by
1,2,3,4,5,6,7;
 c1 | c2 |     c3     |                                                                                                                               c4                                                                                                                                | c5 |     c6     |                                                                                                                               c7                                                                                                                                

  1 | a  | abcdefghij | abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz                      | a  | abcdefghij | abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
  2 | a  | a熊猫竹    | a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子                                                                                                       | a  | a熊猫竹    | a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子
  3 | 6  | 61E7       | 61E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E78 | 6  | 61E7       | 61E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E7868AE78CABE7ABB9E7ABB9E788B1E59083E7ABB9E5AD9061E78
  4 | a  | a熊        | a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子                                                                                      | a  | a熊        | a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子a熊猫竹竹爱吃竹子
  5 | 1  | 1110       | 11101100111100010111011001111000101110110011110001011101100111100010111011001111000101110110011110001011101100111100010111011001111000101110110011110001011101100111100010                                                                                      | 1  | 1110       | 11101100111100010111011001111000101110110011110001011101100111100010111011001111000101110110011110001011101100111100010111011001111000101110110011110001011101100111100010
  6 | 3  | 3641       | 3641077364107736410773641077364107736410773641077364107736410773641077                                                                                                                                                                                          | 3  | 3641       | 3641077364107736410773641077364107736410773641077364107736410773641077
(6 rows)

SELECT repeat('a'::tinyblob, 5)::binary(10);
          repeat           
---------------------------
 aaaaa\000\000\000\000\000
(1 row)

SELECT repeat('a'::tinyblob, 100)::binary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::tinyblob, 5)::varbinary(10);
 repeat 
--------
 aaaaa
(1 row)

SELECT repeat('a'::tinyblob, 100)::varbinary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::blob, 5)::binary(10);
          repeat           
---------------------------
 aaaaa\000\000\000\000\000
(1 row)

SELECT repeat('a'::blob, 100)::binary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::blob, 5)::varbinary(10);
 repeat 
--------
 aaaaa
(1 row)

SELECT repeat('a'::blob, 100)::varbinary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::mediumblob, 5)::binary(10);
          repeat           
---------------------------
 aaaaa\000\000\000\000\000
(1 row)

SELECT repeat('a'::mediumblob, 100)::binary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::mediumblob, 5)::varbinary(10);
 repeat 
--------
 aaaaa
(1 row)

SELECT repeat('a'::mediumblob, 100)::varbinary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::longblob, 5)::binary(10);
          repeat           
---------------------------
 aaaaa\000\000\000\000\000
(1 row)

SELECT repeat('a'::longblob, 100)::binary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

SELECT repeat('a'::longblob, 5)::varbinary(10);
 repeat 
--------
 aaaaa
(1 row)

SELECT repeat('a'::longblob, 100)::varbinary(10);
WARNING:  The input length:100 exceeds the maximum length:10.
CONTEXT:  referenced column: repeat
   repeat   
------------
 aaaaaaaaaa
(1 row)

drop schema test_binary cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table test_bytea
drop cascades to table test33
drop cascades to table test34
drop cascades to table t_binary0002
reset current_schema;
