create schema test_json_object;
set current_schema to 'test_json_object';
-- test for b_compatibility_mode = false
set dolphin.b_compatibility_mode = off;
select json_object('{a,1,b,2,3,NULL,"d e f","a b c"}');
                      json_object                      
-------------------------------------------------------
 {"a" : "1", "b" : "2", "3" : null, "d e f" : "a b c"}
(1 row)

select json_object('{a,b,"a b c"}', '{a,1,1}');
              json_object              
---------------------------------------
 {"a" : "a", "b" : "1", "a b c" : "1"}
(1 row)

-- test for b_compatibility_mode = true
set dolphin.b_compatibility_mode = 1;
-- test for basic functionality of json_object
select json_object('name', 'Jim', 'age', 20);
        json_object         
----------------------------
 {"age": 20, "name": "Jim"}
(1 row)

select json_object('name', 'Jim', 'age', 20, 'name', 'Tim');
        json_object         
----------------------------
 {"age": 20, "name": "Jim"}
(1 row)

select json_object('name', 'Tim', 'age', 20, 'friend', json_object('name', 'Jim', 'age', 20), 'hobby', json_build_array('games', 'sports'));
                                          json_object                                           
------------------------------------------------------------------------------------------------
 {"age": 20, "name": "Tim", "hobby": ["games", "sports"], "friend": {"age": 20, "name": "Jim"}}
(1 row)

select json_object('City', 'Cairns', 'Population', 139693);
               json_object                
------------------------------------------
 {"City": "Cairns", "Population": 139693}
(1 row)

select json_object(1234,234,212,333);
        json_object        
---------------------------
 {"212": 333, "1234": 234}
(1 row)

select json_object(1, 'Json', 2, 'MyContex');
          json_object           
--------------------------------
 {"1": "Json", "2": "MyContex"}
(1 row)

select json_object('{"a":1}', null, '{"b":[1,2]}', '{"c":{"c1":[11,null]}}', true, 87);
                                 json_object                                 
-----------------------------------------------------------------------------
 {"1": 87, "{\"a\":1}": null, "{\"b\":[1,2]}": "{\"c\":{\"c1\":[11,null]}}"}
(1 row)

--test for json key
select json_object('{"a": "b"}'::json, true, '{"json": {"abc": "cde"}}'::json, 'TEXT');
                            json_object                             
--------------------------------------------------------------------
 {"{\"a\": \"b\"}": true, "{\"json\": {\"abc\": \"cde\"}}": "TEXT"}
(1 row)

select json_object('{"a": "b"}'::jsonb, 12.32, '{"json": {"abc": "cde"}}'::jsonb, null);
                            json_object                            
-------------------------------------------------------------------
 {"{\"a\": \"b\"}": 12.32, "{\"json\": {\"abc\": \"cde\"}}": null}
(1 row)

select json_object(json_object('name', 'Jim', 'age', 20), 'MyContex');
                   json_object                    
--------------------------------------------------
 {"{\"age\": 20, \"name\": \"Jim\"}": "MyContex"}
(1 row)

-- test for type date and time
select json_object('2022-09-26'::date,20221001::date);
         json_object          
------------------------------
 {"2022-09-26": "2022-10-01"}
(1 row)

select json_object('12:12:58'::time,'24:00:00'::time);
       json_object        
--------------------------
 {"12:12:58": "24:00:00"}
(1 row)

--test with ->,->>
select json_object('a','{"a":"b"}','b',234342,'c',true)->'a';
 json_object_field 
-------------------
 "{\"a\":\"b\"}"
(1 row)

select json_object('a','{"a":"b"}'::json,'b',234342,'c',true)->'a';
 json_object_field 
-------------------
 {"a":"b"}
(1 row)

select json_object('a','{"a":"b"}'::json,'b',234342,'c',true)->>'b';
 json_object_field_text 
------------------------
 234342
(1 row)

--test with json functions
select json_object_field(json_object('Name','Adam','Age',23,'Address','Chengdu'),'Name');
 json_object_field 
-------------------
 "Adam"
(1 row)

select json_object_field(json_object('Name','Adam','Age',23,'Address','Chengdu','Test','{"a":233}'::json),'Test');
 json_object_field 
-------------------
 {"a":233}
(1 row)

select json_object_field_text(json_object('Name','Adam','Age',23,'Address','Chengdu','Test','{"a":233}'::json),'Test');
 json_object_field_text 
------------------------
 {"a":233}
(1 row)

select json_object_field_text(json_object('Name','Adam','Age',23,'Address','Chengdu'),'Name');
 json_object_field_text 
------------------------
 Adam
(1 row)

select json_extract_path(json_object('Name','Adam','Age',23,'Address','Chengdu'),'Name');
 json_extract_path 
-------------------
 "Adam"
(1 row)

select json_extract_path_op(json_object('Name','Adam','Age',23,'Address','Chengdu'),'{Name}');
 json_extract_path_op 
----------------------
 "Adam"
(1 row)

select pg_catalog.json_extract_path_op(cast('[0, 0, 0, 0]' as json), cast(pg_catalog.dolphin_types() as _text));
 json_extract_path_op 
----------------------
 
(1 row)

select json_extract_path_text(json_object('Name','Adam','Age',23,'Address','Chengdu'),'Name');
 json_extract_path_text 
------------------------
 Adam
(1 row)

select json_extract_path_text_op(json_object('Name','Adam','Age',23,'Address','Chengdu'),'{Name}');
 json_extract_path_text_op 
---------------------------
 Adam
(1 row)

select * from json_each(json_object('Name','Adam','Age',23,'Address','Chengdu'));
   key   |   value   
---------+-----------
 Age     | 23
 Name    | "Adam"
 Address | "Chengdu"
(3 rows)

select * from json_each_text(json_object('Name','Adam','Age',23,'Address','Chengdu'));
   key   |  value  
---------+---------
 Age     | 23
 Name    | Adam
 Address | Chengdu
(3 rows)

select * from json_object_keys(json_object('Name','Adam','Age',23,'Address','Chengdu'));
 json_object_keys 
------------------
 Age
 Name
 Address
(3 rows)

select json_typeof(json_object('Name','Adam','Age',23,'Address','Chengdu'));
 json_typeof 
-------------
 object
(1 row)

select * from json_to_record(json_object('name','Adam','age',23,'address','Chengdu'), true) as x(Name text, Age int, d text);
 name | age | d 
------+-----+---
 Adam |  23 | 
(1 row)

-- test for empty strings
select json_object('City', '', 'Population', 139693);
            json_object             
------------------------------------
 {"City": "", "Population": 139693}
(1 row)

select json_object('', 'Cairns', 'Population', 139693);
             json_object              
--------------------------------------
 {"": "Cairns", "Population": 139693}
(1 row)

-- test for empty lists
select json_object();
 json_object 
-------------
 {}
(1 row)

select json_object();
 json_object 
-------------
 {}
(1 row)

-- test for null values
select json_object('City', 'Cairns', 'Population', NULL);
              json_object               
----------------------------------------
 {"City": "Cairns", "Population": null}
(1 row)

select json_object('City', 'Cairns', 139693, NULL);
            json_object             
------------------------------------
 {"City": "Cairns", "139693": null}
(1 row)

-- test for null keys
select json_object(NULL, 'nothing');
ERROR:  arg 1: key cannot be null
CONTEXT:  referenced column: json_object
select json_object(NULL, NULL);
ERROR:  arg 1: key cannot be null
CONTEXT:  referenced column: json_object
-- test for float number
select json_object('City', '', 'Population', 139693.123);
              json_object               
----------------------------------------
 {"City": "", "Population": 139693.123}
(1 row)

select json_object('City', '', 'Population', 0.123);
            json_object            
-----------------------------------
 {"City": "", "Population": 0.123}
(1 row)

select json_object('City', '', 'Population', 5/7);
                    json_object                     
----------------------------------------------------
 {"City": "", "Population": 0.71428571428571428571}
(1 row)

-- test for enormous number
select json_object('a', 132454676878465464652222238888856744654563565446554798798451344787945.3153);
                                    json_object                                    
-----------------------------------------------------------------------------------
 {"a": 132454676878465464652222238888856744654563565446554798798451344787945.3153}
(1 row)

-- test for bool values
select json_object('Red', true, 'Blue', false);
         json_object          
------------------------------
 {"Red": true, "Blue": false}
(1 row)

select json_object(true, 1, false, 0);
   json_object    
------------------
 {"0": 0, "1": 1}
(1 row)

select json_object(true, false, false, true);
       json_object       
-------------------------
 {"0": true, "1": false}
(1 row)

-- test for lots of pairs
select json_object('Region', 'Asia', 'color', 'red', 'City', '', 'Population', 139693.123, 'name', 'Tim', 'age', 20, 'friend', json_object('name', 'Jim', 'age', 20), 'hobby', json_build_array('games', 'sports'), 'name', 'Tim', 'age', 20, 'friend', json_object('name', 'Jim', 'age', 20), 'hobby', json_build_array('games', 'sports'));
                                                                              json_object                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"age": 20, "City": "", "name": "Tim", "color": "red", "hobby": ["games", "sports"], "Region": "Asia", "friend": {"age": 20, "name": "Jim"}, "Population": 139693.123}
(1 row)

-- test for negative input
select json_object('Number', -123);
   json_object    
------------------
 {"Number": -123}
(1 row)

select json_object('Number', -123.12134);
      json_object       
------------------------
 {"Number": -123.12134}
(1 row)

select json_object('Number', -1234564564868789790867567.456);
                json_object                 
--------------------------------------------
 {"Number": -1234564564868789790867567.456}
(1 row)

-- test for numeric input starting with '+'
select json_object('Number', +123);
   json_object   
-----------------
 {"Number": 123}
(1 row)

select json_object('Number', ++123);
   json_object   
-----------------
 {"Number": 123}
(1 row)

-- test for type check
select json_object('Type', abc);
ERROR:  column "abc" does not exist
LINE 1: select json_object('Type', abc);
                                   ^
CONTEXT:  referenced column: json_object
select json_object('Type', t);
ERROR:  column "t" does not exist
LINE 1: select json_object('Type', t);
                                   ^
CONTEXT:  referenced column: json_object
-- wrong number of param
select json_object('key');
ERROR:  invalid number or arguments: object must be matched key value pairs
CONTEXT:  referenced column: json_object
select json_object('key', 'abc', 'value');
ERROR:  invalid number or arguments: object must be matched key value pairs
CONTEXT:  referenced column: json_object
-- test for trim
select json_object( 'City',            'Cairns',          'Population'          , NULL );
              json_object               
----------------------------------------
 {"City": "Cairns", "Population": null}
(1 row)

-- test for inserting object into tables
create table tab_json1(data json);
insert into tab_json1 values (json_object('names','David','address','Beijing','Tel',1324053333,'names','Mike'));
select * from tab_json1;
                            data                             
-------------------------------------------------------------
 {"Tel": 1324053333, "names": "David", "address": "Beijing"}
(1 row)

-- use the data in tables
create table info1(name varchar(30),address varchar(20),tel int);
insert into info1 values ('Jack','Zhongguo',1323394);
insert into info1 values ('Tobbo','Meiguo',132333394);
insert into info1 values ('Hnana','Riben',3403234);
insert into tab_json1 select json_object('name',name,'address',address,'tel',tel) from info1;
select * from tab_json1;
                            data                             
-------------------------------------------------------------
 {"Tel": 1324053333, "names": "David", "address": "Beijing"}
 {"tel": 1323394, "name": "Jack", "address": "Zhongguo"}
 {"tel": 132333394, "name": "Tobbo", "address": "Meiguo"}
 {"tel": 3403234, "name": "Hnana", "address": "Riben"}
(4 rows)

create table tab_json2(data json, my_text text);
insert into tab_json2 values('{"abc": 1234}', 'MyText');
select json_object(data, my_text) from tab_json2;
          json_object          
-------------------------------
 {"{\"abc\": 1234}": "MyText"}
(1 row)

-- test for setting b_compatibility_mode back to false
set dolphin.b_compatibility_mode = 0;
select json_object('{a,1,b,2,3,NULL,"d e f","a b c"}');
                      json_object                      
-------------------------------------------------------
 {"a" : "1", "b" : "2", "3" : null, "d e f" : "a b c"}
(1 row)

select json_object('{a,b,"a b c"}', '{a,1,1}');
              json_object              
---------------------------------------
 {"a" : "a", "b" : "1", "a b c" : "1"}
(1 row)

drop schema test_json_object cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table tab_json1
drop cascades to table info1
drop cascades to table tab_json2
reset current_schema;
