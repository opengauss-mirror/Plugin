create schema uint_join;
set current_schema to 'uint_join';
create table t1(a int2, b uint2);
create table t2(a uint4, b uint4);
insert into t1 values(1, 1);
insert into t1 values(2, 1);
insert into t1 values(-1, 1);
insert into t2 values(1, 3);
insert into t2 values(2, 2);
insert into t2 values(3, 1);
select * from t1 join t2;
 a  | b | a | b 
----+---+---+---
  1 | 1 | 1 | 3
  1 | 1 | 2 | 2
  1 | 1 | 3 | 1
  2 | 1 | 1 | 3
  2 | 1 | 2 | 2
  2 | 1 | 3 | 1
 -1 | 1 | 1 | 3
 -1 | 1 | 2 | 2
 -1 | 1 | 3 | 1
(9 rows)

select * from t1 cross join t2;
 a  | b | a | b 
----+---+---+---
  1 | 1 | 1 | 3
  1 | 1 | 2 | 2
  1 | 1 | 3 | 1
  2 | 1 | 1 | 3
  2 | 1 | 2 | 2
  2 | 1 | 3 | 1
 -1 | 1 | 1 | 3
 -1 | 1 | 2 | 2
 -1 | 1 | 3 | 1
(9 rows)

select * from t1 left join t2 on t1.a = t2.a;
 a  | b | a | b 
----+---+---+---
  1 | 1 | 1 | 3
  2 | 1 | 2 | 2
 -1 | 1 |   | 
(3 rows)

select * from t1 right join t2 on t1.a = t2.a;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 3
 2 | 1 | 2 | 2
   |   | 3 | 1
(3 rows)

select * from t1 inner join t2 on t1.a = t2.a;
 a | b | a | b 
---+---+---+---
 1 | 1 | 1 | 3
 2 | 1 | 2 | 2
(2 rows)

select /*+ nestloop(t1 t2)*/ * from t1 join t2;
 a  | b | a | b 
----+---+---+---
  1 | 1 | 1 | 3
  1 | 1 | 2 | 2
  1 | 1 | 3 | 1
  2 | 1 | 1 | 3
  2 | 1 | 2 | 2
  2 | 1 | 3 | 1
 -1 | 1 | 1 | 3
 -1 | 1 | 2 | 2
 -1 | 1 | 3 | 1
(9 rows)

select /*+ hashjoin(t1 t2)*/ * from t1 join t2;
 a  | b | a | b 
----+---+---+---
  1 | 1 | 1 | 3
  1 | 1 | 2 | 2
  1 | 1 | 3 | 1
  2 | 1 | 1 | 3
  2 | 1 | 2 | 2
  2 | 1 | 3 | 1
 -1 | 1 | 1 | 3
 -1 | 1 | 2 | 2
 -1 | 1 | 3 | 1
(9 rows)

select /*+ mergejoin(t1 t2)*/ * from t1 join t2;
 a  | b | a | b 
----+---+---+---
  1 | 1 | 1 | 3
  1 | 1 | 2 | 2
  1 | 1 | 3 | 1
  2 | 1 | 1 | 3
  2 | 1 | 2 | 2
  2 | 1 | 3 | 1
 -1 | 1 | 1 | 3
 -1 | 1 | 2 | 2
 -1 | 1 | 3 | 1
(9 rows)

drop schema uint_join cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table t1
drop cascades to table t2
reset current_schema;
create schema scott;
drop table if exists scott.emp;
NOTICE:  table "emp" does not exist, skipping
drop table if exists scott.dept;
NOTICE:  table "dept" does not exist, skipping
create table scott.dept(DEPTNO number(2) constraint pk_dept primary key,mgr number(4), dname varchar2(14) ,loc varchar2(13) );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_dept" for table "dept"
create table scott.emp
(empno number(4) constraint pk_emp primary key,
dept varchar2(10),
job varchar2(9),
mgr number(4),
hiredate date,
sal number(7,2),
comm number(7,2),
deptno number(2) constraint fk_deptno references scott.dept);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pk_emp" for table "emp"
select * from scott.emp join scott.dept on emp.deptno = dept.deptno;
 empno | dept | job | mgr | hiredate | sal | comm | deptno | DEPTNO | mgr | dname | loc 
-------+------+-----+-----+----------+-----+------+--------+--------+-----+-------+-----
(0 rows)

--for converage 
select * from scott.emp join scott.dept using(deptno);
 deptno | empno | dept | job | mgr | hiredate | sal | comm | mgr | dname | loc 
--------+-------+------+-----+-----+----------+-----+------+-----+-------+-----
(0 rows)

select * from scott.emp join scott.dept using(deptno, mgr);
 deptno | mgr | empno | dept | job | hiredate | sal | comm | dname | loc 
--------+-----+-------+------+-----+----------+-----+------+-------+-----
(0 rows)

select * from scott.emp natural join scott.dept;
 mgr | deptno | empno | dept | job | hiredate | sal | comm | dname | loc 
-----+--------+-------+------+-----+----------+-----+------+-------+-----
(0 rows)

drop schema scott cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table scott.dept
drop cascades to table scott.emp
reset current_schema;
-- test merge join
set enable_hashjoin to off;
set enable_nestloop to off;
set enable_mergejoin to on;
drop table if exists business_order;
NOTICE:  table "business_order" does not exist, skipping
drop table if exists statement;
NOTICE:  table "statement" does not exist, skipping
drop table if exists user_invoice_account;
NOTICE:  table "user_invoice_account" does not exist, skipping
create table business_order (id bigint NOT NULL);
create table statement (business_order_id bigint NOT NULL, user_invoice_account_id UINT1);
create table user_invoice_account (id bigint NOT NULL);
insert into business_order values(generate_series(-2, 3));
insert into statement values(generate_series(-1, 3), generate_series(2, 5));
insert into user_invoice_account values(generate_series(-3, 4));
explain (costs off) select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: bo.id NULLS FIRST, s.business_order_id NULLS FIRST, s.user_invoice_account_id NULLS FIRST, uia.id NULLS FIRST
   ->  Merge Right Join
         Merge Cond: (uia.id = s.user_invoice_account_id)
         ->  Sort
               Sort Key: uia.id
               ->  Seq Scan on user_invoice_account uia
         ->  Sort
               Sort Key: s.user_invoice_account_id
               ->  Merge Right Join
                     Merge Cond: (s.business_order_id = bo.id)
                     ->  Sort
                           Sort Key: s.business_order_id
                           ->  Seq Scan on statement s
                     ->  Sort
                           Sort Key: bo.id
                           ->  Seq Scan on business_order bo
(17 rows)

select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
 id | business_order_id | user_invoice_account_id | id 
----+-------------------+-------------------------+----
 -2 |                   |                         |   
 -1 |                -1 | 2                       |  2
 -1 |                -1 | 3                       |  3
 -1 |                -1 | 4                       |  4
 -1 |                -1 | 5                       |   
  0 |                 0 | 2                       |  2
  0 |                 0 | 3                       |  3
  0 |                 0 | 4                       |  4
  0 |                 0 | 5                       |   
  1 |                 1 | 2                       |  2
  1 |                 1 | 3                       |  3
  1 |                 1 | 4                       |  4
  1 |                 1 | 5                       |   
  2 |                 2 | 2                       |  2
  2 |                 2 | 3                       |  3
  2 |                 2 | 4                       |  4
  2 |                 2 | 5                       |   
  3 |                 3 | 2                       |  2
  3 |                 3 | 3                       |  3
  3 |                 3 | 4                       |  4
  3 |                 3 | 5                       |   
(21 rows)

drop table if exists business_order;
drop table if exists statement;
drop table if exists user_invoice_account;
create table business_order (id bigint NOT NULL);
create table statement (business_order_id bigint NOT NULL, user_invoice_account_id uint2);
create table user_invoice_account (id bigint NOT NULL);
insert into business_order values(generate_series(-2, 3));
insert into statement values(generate_series(-1, 3), generate_series(2, 5));
insert into user_invoice_account values(generate_series(-3, 4));
explain (costs off) select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: bo.id NULLS FIRST, s.business_order_id NULLS FIRST, s.user_invoice_account_id NULLS FIRST, uia.id NULLS FIRST
   ->  Merge Right Join
         Merge Cond: (uia.id = s.user_invoice_account_id)
         ->  Sort
               Sort Key: uia.id
               ->  Seq Scan on user_invoice_account uia
         ->  Sort
               Sort Key: s.user_invoice_account_id
               ->  Merge Right Join
                     Merge Cond: (s.business_order_id = bo.id)
                     ->  Sort
                           Sort Key: s.business_order_id
                           ->  Seq Scan on statement s
                     ->  Sort
                           Sort Key: bo.id
                           ->  Seq Scan on business_order bo
(17 rows)

select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
 id | business_order_id | user_invoice_account_id | id 
----+-------------------+-------------------------+----
 -2 |                   |                         |   
 -1 |                -1 | 2                       |  2
 -1 |                -1 | 3                       |  3
 -1 |                -1 | 4                       |  4
 -1 |                -1 | 5                       |   
  0 |                 0 | 2                       |  2
  0 |                 0 | 3                       |  3
  0 |                 0 | 4                       |  4
  0 |                 0 | 5                       |   
  1 |                 1 | 2                       |  2
  1 |                 1 | 3                       |  3
  1 |                 1 | 4                       |  4
  1 |                 1 | 5                       |   
  2 |                 2 | 2                       |  2
  2 |                 2 | 3                       |  3
  2 |                 2 | 4                       |  4
  2 |                 2 | 5                       |   
  3 |                 3 | 2                       |  2
  3 |                 3 | 3                       |  3
  3 |                 3 | 4                       |  4
  3 |                 3 | 5                       |   
(21 rows)

drop table if exists business_order;
drop table if exists statement;
drop table if exists user_invoice_account;
create table business_order (id bigint NOT NULL);
create table statement (business_order_id bigint NOT NULL, user_invoice_account_id UINT4);
create table user_invoice_account (id bigint NOT NULL);
insert into business_order values(generate_series(-2, 3));
insert into statement values(generate_series(-1, 3), generate_series(2, 5));
insert into user_invoice_account values(generate_series(-3, 4));
explain (costs off) select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: bo.id NULLS FIRST, s.business_order_id NULLS FIRST, s.user_invoice_account_id NULLS FIRST, uia.id NULLS FIRST
   ->  Merge Right Join
         Merge Cond: (uia.id = s.user_invoice_account_id)
         ->  Sort
               Sort Key: uia.id
               ->  Seq Scan on user_invoice_account uia
         ->  Sort
               Sort Key: s.user_invoice_account_id
               ->  Merge Right Join
                     Merge Cond: (s.business_order_id = bo.id)
                     ->  Sort
                           Sort Key: s.business_order_id
                           ->  Seq Scan on statement s
                     ->  Sort
                           Sort Key: bo.id
                           ->  Seq Scan on business_order bo
(17 rows)

select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
 id | business_order_id | user_invoice_account_id | id 
----+-------------------+-------------------------+----
 -2 |                   |                         |   
 -1 |                -1 | 2                       |  2
 -1 |                -1 | 3                       |  3
 -1 |                -1 | 4                       |  4
 -1 |                -1 | 5                       |   
  0 |                 0 | 2                       |  2
  0 |                 0 | 3                       |  3
  0 |                 0 | 4                       |  4
  0 |                 0 | 5                       |   
  1 |                 1 | 2                       |  2
  1 |                 1 | 3                       |  3
  1 |                 1 | 4                       |  4
  1 |                 1 | 5                       |   
  2 |                 2 | 2                       |  2
  2 |                 2 | 3                       |  3
  2 |                 2 | 4                       |  4
  2 |                 2 | 5                       |   
  3 |                 3 | 2                       |  2
  3 |                 3 | 3                       |  3
  3 |                 3 | 4                       |  4
  3 |                 3 | 5                       |   
(21 rows)

drop table if exists business_order;
drop table if exists statement;
drop table if exists user_invoice_account;
create table business_order (id bigint NOT NULL);
create table statement (business_order_id bigint NOT NULL, user_invoice_account_id UINT8);
create table user_invoice_account (id bigint NOT NULL);
insert into business_order values(generate_series(-2, 3));
insert into statement values(generate_series(-1, 3), generate_series(2, 5));
insert into user_invoice_account values(generate_series(-3, 4));
explain (costs off) select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: bo.id NULLS FIRST, s.business_order_id NULLS FIRST, s.user_invoice_account_id NULLS FIRST, uia.id NULLS FIRST
   ->  Merge Right Join
         Merge Cond: (uia.id = s.user_invoice_account_id)
         ->  Sort
               Sort Key: uia.id
               ->  Seq Scan on user_invoice_account uia
         ->  Sort
               Sort Key: s.user_invoice_account_id
               ->  Merge Right Join
                     Merge Cond: (s.business_order_id = bo.id)
                     ->  Sort
                           Sort Key: s.business_order_id
                           ->  Seq Scan on statement s
                     ->  Sort
                           Sort Key: bo.id
                           ->  Seq Scan on business_order bo
(17 rows)

select * from business_order bo
    left join statement s on bo.id = s.business_order_id
    left join user_invoice_account uia on s.user_invoice_account_id = uia.id
    order by bo.id, business_order_id, user_invoice_account_id, uia.id;
 id | business_order_id | user_invoice_account_id | id 
----+-------------------+-------------------------+----
 -2 |                   |                         |   
 -1 |                -1 | 2                       |  2
 -1 |                -1 | 3                       |  3
 -1 |                -1 | 4                       |  4
 -1 |                -1 | 5                       |   
  0 |                 0 | 2                       |  2
  0 |                 0 | 3                       |  3
  0 |                 0 | 4                       |  4
  0 |                 0 | 5                       |   
  1 |                 1 | 2                       |  2
  1 |                 1 | 3                       |  3
  1 |                 1 | 4                       |  4
  1 |                 1 | 5                       |   
  2 |                 2 | 2                       |  2
  2 |                 2 | 3                       |  3
  2 |                 2 | 4                       |  4
  2 |                 2 | 5                       |   
  3 |                 3 | 2                       |  2
  3 |                 3 | 3                       |  3
  3 |                 3 | 4                       |  4
  3 |                 3 | 5                       |   
(21 rows)

reset enable_hashjoin;
reset enable_nestloop;
reset enable_mergejoin;
set enable_hashjoin = on;
set enable_nestloop = off;
set enable_mergejoin = off;
create table test_tbl1(col1 uint1, col2 smallint, col3 int, col4 bigint);
create table test_tbl2(col1 uint1, col2 smallint, col3 int, col4 bigint);
insert into test_tbl1 values(0,0,0,0), (1,1,1,1);
insert into test_tbl2 values(0,0,0,0), (1,1,1,1);
select * from test_tbl1 t1 join test_tbl2 t2 on t1.col2=t2.col1;
 col1 | col2 | col3 | col4 | col1 | col2 | col3 | col4 
------+------+------+------+------+------+------+------
 0    |    0 |    0 |    0 | 0    |    0 |    0 |    0
 1    |    1 |    1 |    1 | 1    |    1 |    1 |    1
(2 rows)

select * from test_tbl1 t1 join test_tbl2 t2 on t1.col3=t2.col1;
 col1 | col2 | col3 | col4 | col1 | col2 | col3 | col4 
------+------+------+------+------+------+------+------
 0    |    0 |    0 |    0 | 0    |    0 |    0 |    0
 1    |    1 |    1 |    1 | 1    |    1 |    1 |    1
(2 rows)

explain (costs false) select * from test_tbl1 t1 join test_tbl2 t2 on t1.col2=t2.col1;
              QUERY PLAN              
--------------------------------------
 Hash Join
   Hash Cond: (t1.col2 = t2.col1)
   ->  Seq Scan on test_tbl1 t1
   ->  Hash
         ->  Seq Scan on test_tbl2 t2
(5 rows)

explain (costs false) select * from test_tbl1 t1 join test_tbl2 t2 on t1.col3=t2.col1;
              QUERY PLAN              
--------------------------------------
 Hash Join
   Hash Cond: (t1.col3 = t2.col1)
   ->  Seq Scan on test_tbl1 t1
   ->  Hash
         ->  Seq Scan on test_tbl2 t2
(5 rows)

reset enable_hashjoin;
reset enable_nestloop;
reset enable_mergejoin;
drop table test_tbl1;
drop table test_tbl2;
drop table if exists business_order;
drop table if exists statement;
drop table if exists user_invoice_account;
