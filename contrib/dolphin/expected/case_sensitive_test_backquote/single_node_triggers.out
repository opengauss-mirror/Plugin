\c table_name_test_db;
SET dolphin.lower_case_table_names TO 0;
CREATE TABLE `Test_trigger_src_tbl`(`id1` INT, `id2` INT, `id3` INT);
CREATE TABLE `Test_trigger_des_tbl`(`id1` INT, `id2` INT, `id3` INT);
CREATE OR REPLACE FUNCTION `tri_insert_func`() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
        INSERT INTO `Test_trigger_des_tbl` VALUES(`NEW`.`id1`, `NEW`.`id2`, `NEW`.`id3`);
        RETURN `NEW`;
END
$$ LANGUAGE PLPGSQL;
ERROR:  RETURN must specify a record or row variable in function returning row
LINE 6:         RETURN `NEW`;
                       ^
CREATE OR REPLACE FUNCTION `tri_update_func`() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
        UPDATE `Test_trigger_des_tbl` SET `id3` = `NEW`.`id3` WHERE `id1`=`OLD`.`id1`;
        RETURN `OLD`;
END
$$ LANGUAGE PLPGSQL;
ERROR:  RETURN must specify a record or row variable in function returning row
LINE 6:         RETURN `OLD`;
                       ^
CREATE OR REPLACE FUNCTION `TRI_DELETE_FUNC`() RETURNS TRIGGER AS
$$
DECLARE
BEGIN
        DELETE FROM `Test_trigger_des_tbl` WHERE `id1`=`OLD`.`id1`;
        RETURN `OLD`;
END
$$ LANGUAGE PLPGSQL;
ERROR:  RETURN must specify a record or row variable in function returning row
LINE 6:         RETURN `OLD`;
                       ^
CREATE TRIGGER `insert_trigger`
BEFORE INSERT ON `Test_trigger_src_tbl`
FOR EACH ROW
EXECUTE PROCEDURE `tri_insert_func`();
ERROR:  function tri_insert_func() does not exist
CREATE TRIGGER `update_trigger`
AFTER UPDATE ON `Test_trigger_src_tbl`  
FOR EACH ROW
EXECUTE PROCEDURE `tri_update_func`();
ERROR:  function tri_update_func() does not exist
CREATE TRIGGER `delete_trigger`
BEFORE DELETE ON `Test_trigger_src_tbl`
FOR EACH ROW
EXECUTE PROCEDURE `tri_delete_func`();
ERROR:  function tri_delete_func() does not exist
INSERT INTO `Test_trigger_src_tbl` VALUES(100,200,300);
SELECT * FROM `Test_trigger_src_tbl`;
 id1 | id2 | id3 
-----+-----+-----
 100 | 200 | 300
(1 row)

SELECT * FROM `Test_trigger_des_tbl`;
 id1 | id2 | id3 
-----+-----+-----
(0 rows)

UPDATE `Test_trigger_src_tbl` SET `id3`=400 WHERE `id1`=100;
SELECT * FROM `Test_trigger_src_tbl`;
 id1 | id2 | id3 
-----+-----+-----
 100 | 200 | 400
(1 row)

SELECT * FROM `Test_trigger_des_tbl`;
 id1 | id2 | id3 
-----+-----+-----
(0 rows)

DELETE FROM `Test_trigger_src_tbl` WHERE `id1`=100;
SELECT * FROM `Test_trigger_src_tbl`;
 id1 | id2 | id3 
-----+-----+-----
(0 rows)

SELECT * FROM `Test_trigger_des_tbl`;
 id1 | id2 | id3 
-----+-----+-----
(0 rows)

ALTER TRIGGER `delete_trigger` ON `Test_trigger_src_tbl` RENAME TO `delete_trigger_renamed`;
ERROR:  trigger "delete_trigger" for table "Test_trigger_src_tbl" does not exist
ALTER TABLE `Test_trigger_src_tbl` DISABLE TRIGGER `insert_trigger`;
ERROR:  trigger "insert_trigger" for table "Test_trigger_src_tbl" does not exist
ALTER TABLE `Test_trigger_src_tbl` DISABLE TRIGGER ALL;
DROP TRIGGER `insert_trigger` ON `Test_trigger_src_tbl`;
ERROR:  trigger "insert_trigger" for table "Test_trigger_src_tbl" does not exist
DROP TRIGGER `update_trigger` ON `Test_trigger_src_tbl`;
ERROR:  trigger "update_trigger" for table "Test_trigger_src_tbl" does not exist
DROP TRIGGER `delete_trigger_renamed` ON `Test_trigger_src_tbl`;
ERROR:  trigger "delete_trigger_renamed" for table "Test_trigger_src_tbl" does not exist
