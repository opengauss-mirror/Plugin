create schema json_objectagg_test;
set current_schema to 'json_objectagg_test';
set dolphin.b_compatibility_mode = 1;
-- create table for test
create table City(District varchar(30), Name varchar(30), Population int);
insert into City values ('Capital Region','Canberra',322723);
insert into City values ('New South Wales','Sydney',3276207);
insert into City values ('New South Wales','Newcastle',270324);
insert into City values ('New South Wales','Central Coast',227657);
insert into City values ('New South Wales','Wollongong',219761);
insert into City values ('Queensland','Brisbane',1291117);
insert into City values ('Queensland','Gold Coast',311932);
insert into City values ('Queensland','Townsville',109914);
insert into City values ('Queensland','Cairns',92273);
insert into City values ('South Australia','Adelaide',978100);
insert into City values ('Tasmania','Hobart',126118);
insert into City values ('Victoria','Melbourne',2865329);
insert into City values ('Victoria','Geelong',125382);
insert into City values ('West Australia','Perth',1096829);
-- test function
SELECT 
  JSON_OBJECTAGG(Name, Population) AS "City/Population"
FROM City;
                                                                                                                                        City/Population                                                                                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"Perth": 1096829, "Cairns": 92273, "Hobart": 126118, "Sydney": 3276207, "Geelong": 125382, "Adelaide": 978100, "Brisbane": 1291117, "Canberra": 322723, "Melbourne": 2865329, "Newcastle": 270324, "Gold Coast": 311932, "Townsville": 109914, "Wollongong": 219761, "Central Coast": 227657}
(1 row)

SELECT 
  District AS State,
  JSON_OBJECTAGG(Name, Population) AS "City/Population"
FROM City
GROUP BY State;
      State      |                                     City/Population                                     
-----------------+-----------------------------------------------------------------------------------------
 West Australia  | {"Perth": 1096829}
 Queensland      | {"Cairns": 92273, "Brisbane": 1291117, "Gold Coast": 311932, "Townsville": 109914}
 New South Wales | {"Sydney": 3276207, "Newcastle": 270324, "Wollongong": 219761, "Central Coast": 227657}
 Tasmania        | {"Hobart": 126118}
 Victoria        | {"Geelong": 125382, "Melbourne": 2865329}
 South Australia | {"Adelaide": 978100}
 Capital Region  | {"Canberra": 322723}
(7 rows)

CREATE TEMP TABLE foo (serial_num int, name text, type text);
INSERT INTO foo VALUES (847001,'t15','GE1043');
INSERT INTO foo VALUES (847002,'t16','GE1043');
INSERT INTO foo VALUES (847003,'sub-alpha','GESS90');
SELECT json_objectagg(serial_num,json_build_object('name',name,'type',type))
FROM foo;
                                                                json_objectagg                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------
 {"847001": {"name": "t15", "type": "GE1043"}, "847002": {"name": "t16", "type": "GE1043"}, "847003": {"name": "sub-alpha", "type": "GESS90"}}
(1 row)

create temp table time_table(a date, b numeric);
insert into time_table values(20200822, 1);
insert into time_table values(20211001, 2);
insert into time_table values(20221204, 3);
select json_objectagg(b, a) from time_table;
                      json_objectagg                       
-----------------------------------------------------------
 {"1": "2020-08-22", "2": "2021-10-01", "3": "2022-12-04"}
(1 row)

CREATE TEMP TABLE null_value (a int, b int);
SELECT json_objectagg(a, b) FROM null_value;
 json_objectagg 
----------------
 
(1 row)

select json_objectagg(true,null);
 json_objectagg 
----------------
 {"1": null}
(1 row)

select json_objectagg(FALSE,'null');
 json_objectagg 
----------------
 {"0": "null"}
(1 row)

select json_objectagg('id',87);
 json_objectagg 
----------------
 {"id": 87}
(1 row)

select json_objectagg('哈哈哈','select');
    json_objectagg    
----------------------
 {"哈哈哈": "select"}
(1 row)

select json_objectagg('["a", ["b", "c"], "d"]', null);
              json_objectagg              
------------------------------------------
 {"[\"a\", [\"b\", \"c\"], \"d\"]": null}
(1 row)

select json_objectagg('["a", ["b", "c"], "d"]', '[]');
              json_objectagg              
------------------------------------------
 {"[\"a\", [\"b\", \"c\"], \"d\"]": "[]"}
(1 row)

select json_objectagg('{"a": 1}', null);
    json_objectagg    
----------------------
 {"{\"a\": 1}": null}
(1 row)

select json_objectagg('{"b": [1, 2]}', '{"c":{"c1":[11,null]}}');
                  json_objectagg                   
---------------------------------------------------
 {"{\"b\": [1, 2]}": "{\"c\":{\"c1\":[11,null]}}"}
(1 row)

select json_objectagg('', null);
 json_objectagg 
----------------
 {"": null}
(1 row)

select json_objectagg(1, 341522654875451.12345678901234567890123456789012345678901234567890);
                              json_objectagg                               
---------------------------------------------------------------------------
 {"1": 341522654875451.12345678901234567890123456789012345678901234567890}
(1 row)

--test for json key
create temp table json_table(a json, b text);
insert into json_table values ('{"a": "b"}', 'Json');
insert into json_table values (json_object('name', 'Jim', 'age', 20, 'name', 'Tim'), 'Text');
insert into json_table values ('{"Number": 123, "Bool": false}', null);
select json_objectagg(a, b) from json_table;
                                                   json_objectagg                                                   
--------------------------------------------------------------------------------------------------------------------
 {"{\"a\": \"b\"}": "Json", "{\"age\": 20, \"name\": \"Jim\"}": "Text", "{\"Number\": 123, \"Bool\": false}": null}
(1 row)

-- special type, type typcategory is N(numeric), but out result is string actually
select pg_catalog.json_objectagg(1, cast(1247 as regclass));
  json_objectagg  
------------------
 {"1": "pg_type"}
(1 row)

select pg_catalog.json_objectagg(1, cast(598 as regproc));
       json_objectagg       
----------------------------
 {"1": "pg_catalog.abbrev"}
(1 row)

select pg_catalog.json_objectagg(1, cast(15 as regoperator));
       json_objectagg       
----------------------------
 {"1": "=(integer,bigint)"}
(1 row)

select pg_catalog.json_objectagg(1, cast(15 as regoper));
    json_objectagg     
-----------------------
 {"1": "pg_catalog.="}
(1 row)

select pg_catalog.json_objectagg(1, cast(598 as regprocedure));
    json_objectagg     
-----------------------
 {"1": "abbrev(inet)"}
(1 row)

select pg_catalog.json_objectagg(1, cast(23 as regtype));
  json_objectagg  
------------------
 {"1": "integer"}
(1 row)

select pg_catalog.json_objectagg(1, cast(3748 as regconfig));
 json_objectagg  
-----------------
 {"1": "simple"}
(1 row)

select pg_catalog.json_objectagg(1, cast(3765 as regdictionary));
 json_objectagg  
-----------------
 {"1": "simple"}
(1 row)

drop table if exists t_json0030;
NOTICE:  table "t_json0030" does not exist, skipping
create table t_json0030(col01 int, col02 json not null);
insert ignore into t_json0030 values(1,'{"id": "3", "name": "Barney"}'),
(2,'{"id": "4", "name": "Betty"}'),(3,'{"id": "2", "name": "Wilma"}'),
(10,'[3.65,10,"true","x","44"]'),(10,'[3.65,10,"true",17,[22,"y",66]]'),(10,'[3.65,10,"true",7,{"x":"y"}]'),
(20,'"qwi<>23，。"'),(20,'"123”“！#￥"'),(20,'"按时间JIwqe22"'),
(30,cast('true' as json)),(30,null),(30,cast('656964' as json)),(30,cast('56848.695' as json));
WARNING:  null value in column "col02" violates not-null constraint
DETAIL:  Failing row contains (30, null).
select * from t_json0030 where col02 is null;
 col01 | col02 
-------+-------
(0 rows)

select json_objectagg(col01, col02) from t_json0030 group by col01;
              json_objectagg               
-------------------------------------------
 {"1": {"id": "3", "name": "Barney"}}
 {"3": {"id": "2", "name": "Wilma"}}
 {"20": "按时间JIwqe22"}
 {"10": [3.65, 10, "true", 7, {"x": "y"}]}
 {"30": 56848.695}
 {"2": {"id": "4", "name": "Betty"}}
(6 rows)

create table t1 (a int, b int);
insert into t1 values (1,1), (2,2), (1,2);
select json_objectagg(a, b) from t1;
  json_objectagg  
------------------
 {"1": 2, "2": 2}
(1 row)

select json_objectagg(a, b) from t1 group by a;
 json_objectagg 
----------------
 {"1": 2}
 {"2": 2}
(2 rows)

select distinct (pg_catalog.json_objectagg(0, ref_0.aggfnoid) over (partition by ref_0.aggtranstype order by ref_0.aggfinalfn))::text from pg_catalog.pg_aggregate as ref_0 where aggfnoid::text like '%bit_xor%';
       json_objectagg        
-----------------------------
 {"0": "pg_catalog.bit_xor"}
(1 row)

drop schema json_objectagg_test cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table city
drop cascades to table t_json0030
drop cascades to table t1
reset current_schema;
