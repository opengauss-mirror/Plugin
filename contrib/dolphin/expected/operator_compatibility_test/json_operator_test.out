---------- note ----------
-- binary non cmp opers --
---- 1. + - * / div
---- 2. % mod ^ xor
---- 3. >>(shr) <<(shl)
---- 4. |(or) &(and)
---- 5. || or && and
-- left opers
---- 1. +(uplus) -(uminus)
---- 2. ~(invention) @(abs)
---- 3. ! not
drop schema if exists json_operator_test_schema cascade;
NOTICE:  schema "json_operator_test_schema" does not exist, skipping
create schema json_operator_test_schema;
set current_schema to 'json_operator_test_schema';
---------- head ----------
set dolphin.b_compatibility_mode to on;
set dolphin.sql_mode to 'sql_mode_full_group,ansi_quotes,no_zero_date';
DROP TABLE IF EXISTS test_json_table;
NOTICE:  table "test_json_table" does not exist, skipping
CREATE TABLE test_json_table
(
    `int1` tinyint,
    `uint1` tinyint unsigned,
    `int2` smallint,
    `uint2` smallint unsigned,
    `int4` integer,
    `uint4` integer unsigned,
    `int8` bigint,
    `uint8` bigint unsigned,
    `float4` float4,
    `float8` float8,
    `numeric` decimal(20, 6),
    `bit1` bit(1),
    `bit64` bit(64),
    `boolean` boolean,
    `date` date,
    `time` time,
    `time(4)` time(4),
    `datetime` datetime,
    `datetime(4)` datetime(4),
    `timestamp` timestamp,
    `timestamp(4)` timestamp(4),
    `year` year,
    `char` char(100),
    `varchar` varchar(100),
    `binary` binary(100),
    `varbinary` varbinary(100),
    `tinyblob` tinyblob,
    `blob` blob,
    `mediumblob` mediumblob,
    `longblob` longblob,
    `text` text,
    `enum_t` enum('a', 'b', 'c'),
    `set_t` set('a', 'b', 'c'),
    `json` json
);
NOTICE:  CREATE TABLE will create implicit set "test_json_table_set_t_set" for column "test_json_table.set_t"
-- type test
DROP TABLE IF EXISTS test_json_type;
NOTICE:  table "test_json_type" does not exist, skipping
CREATE TABLE test_json_type AS SELECT
`int1` + `json` AS `int1+json`,
`int1` - `json` AS `int1-json`,
`int1` * `json` AS `int1*json`,
`int1` / `json` AS `int1/json`,
`int1` % `json` AS `int1%json`,
`int1` ^ `json` AS `int1^json`,
`int1` >> `json` AS `int1>>json`,
`int1` << `json` AS `int1<<json`,
`int1` | `json` AS `int1|json`,
`int1` & `json` AS `int1&json`,
`int1` || `json` AS `int1||json`,
`int1` && `json` AS `int1&&json`,
`int1` div `json` AS `int1_div_json`,
`int1` mod `json` AS `int1_mod_json`,
`int1` xor `json` AS `int1_xor_json`,
`int1` and `json` AS `int1_and_json`,
`int1` or `json` AS `int1_or_json`,
`uint1` + `json` AS `uint1+json`,
`uint1` - `json` AS `uint1-json`,
`uint1` * `json` AS `uint1*json`,
`uint1` / `json` AS `uint1/json`,
`uint1` % `json` AS `uint1%json`,
`uint1` ^ `json` AS `uint1^json`,
`uint1` >> `json` AS `uint1>>json`,
`uint1` << `json` AS `uint1<<json`,
`uint1` | `json` AS `uint1|json`,
`uint1` & `json` AS `uint1&json`,
`uint1` || `json` AS `uint1||json`,
`uint1` && `json` AS `uint1&&json`,
`uint1` div `json` AS `uint1_div_json`,
`uint1` mod `json` AS `uint1_mod_json`,
`uint1` xor `json` AS `uint1_xor_json`,
`uint1` and `json` AS `uint1_and_json`,
`uint1` or `json` AS `uint1_or_json`,
`int2` + `json` AS `int2+json`,
`int2` - `json` AS `int2-json`,
`int2` * `json` AS `int2*json`,
`int2` / `json` AS `int2/json`,
`int2` % `json` AS `int2%json`,
`int2` ^ `json` AS `int2^json`,
`int2` >> `json` AS `int2>>json`,
`int2` << `json` AS `int2<<json`,
`int2` | `json` AS `int2|json`,
`int2` & `json` AS `int2&json`,
`int2` || `json` AS `int2||json`,
`int2` && `json` AS `int2&&json`,
`int2` div `json` AS `int2_div_json`,
`int2` mod `json` AS `int2_mod_json`,
`int2` xor `json` AS `int2_xor_json`,
`int2` and `json` AS `int2_and_json`,
`int2` or `json` AS `int2_or_json`,
`uint2` + `json` AS `uint2+json`,
`uint2` - `json` AS `uint2-json`,
`uint2` * `json` AS `uint2*json`,
`uint2` / `json` AS `uint2/json`,
`uint2` % `json` AS `uint2%json`,
`uint2` ^ `json` AS `uint2^json`,
`uint2` >> `json` AS `uint2>>json`,
`uint2` << `json` AS `uint2<<json`,
`uint2` | `json` AS `uint2|json`,
`uint2` & `json` AS `uint2&json`,
`uint2` || `json` AS `uint2||json`,
`uint2` && `json` AS `uint2&&json`,
`uint2` div `json` AS `uint2_div_json`,
`uint2` mod `json` AS `uint2_mod_json`,
`uint2` xor `json` AS `uint2_xor_json`,
`uint2` and `json` AS `uint2_and_json`,
`uint2` or `json` AS `uint2_or_json`,
`int4` + `json` AS `int4+json`,
`int4` - `json` AS `int4-json`,
`int4` * `json` AS `int4*json`,
`int4` / `json` AS `int4/json`,
`int4` % `json` AS `int4%json`,
`int4` ^ `json` AS `int4^json`,
`int4` >> `json` AS `int4>>json`,
`int4` << `json` AS `int4<<json`,
`int4` | `json` AS `int4|json`,
`int4` & `json` AS `int4&json`,
`int4` || `json` AS `int4||json`,
`int4` && `json` AS `int4&&json`,
`int4` div `json` AS `int4_div_json`,
`int4` mod `json` AS `int4_mod_json`,
`int4` xor `json` AS `int4_xor_json`,
`int4` and `json` AS `int4_and_json`,
`int4` or `json` AS `int4_or_json`,
`uint4` + `json` AS `uint4+json`,
`uint4` - `json` AS `uint4-json`,
`uint4` * `json` AS `uint4*json`,
`uint4` / `json` AS `uint4/json`,
`uint4` % `json` AS `uint4%json`,
`uint4` ^ `json` AS `uint4^json`,
`uint4` >> `json` AS `uint4>>json`,
`uint4` << `json` AS `uint4<<json`,
`uint4` | `json` AS `uint4|json`,
`uint4` & `json` AS `uint4&json`,
`uint4` || `json` AS `uint4||json`,
`uint4` && `json` AS `uint4&&json`,
`uint4` div `json` AS `uint4_div_json`,
`uint4` mod `json` AS `uint4_mod_json`,
`uint4` xor `json` AS `uint4_xor_json`,
`uint4` and `json` AS `uint4_and_json`,
`uint4` or `json` AS `uint4_or_json`,
`int8` + `json` AS `int8+json`,
`int8` - `json` AS `int8-json`,
`int8` * `json` AS `int8*json`,
`int8` / `json` AS `int8/json`,
`int8` % `json` AS `int8%json`,
`int8` ^ `json` AS `int8^json`,
`int8` >> `json` AS `int8>>json`,
`int8` << `json` AS `int8<<json`,
`int8` | `json` AS `int8|json`,
`int8` & `json` AS `int8&json`,
`int8` || `json` AS `int8||json`,
`int8` && `json` AS `int8&&json`,
`int8` div `json` AS `int8_div_json`,
`int8` mod `json` AS `int8_mod_json`,
`int8` xor `json` AS `int8_xor_json`,
`int8` and `json` AS `int8_and_json`,
`int8` or `json` AS `int8_or_json`,
`uint8` + `json` AS `uint8+json`,
`uint8` - `json` AS `uint8-json`,
`uint8` * `json` AS `uint8*json`,
`uint8` / `json` AS `uint8/json`,
`uint8` % `json` AS `uint8%json`,
`uint8` ^ `json` AS `uint8^json`,
`uint8` >> `json` AS `uint8>>json`,
`uint8` << `json` AS `uint8<<json`,
`uint8` | `json` AS `uint8|json`,
`uint8` & `json` AS `uint8&json`,
`uint8` || `json` AS `uint8||json`,
`uint8` && `json` AS `uint8&&json`,
`uint8` div `json` AS `uint8_div_json`,
`uint8` mod `json` AS `uint8_mod_json`,
`uint8` xor `json` AS `uint8_xor_json`,
`uint8` and `json` AS `uint8_and_json`,
`uint8` or `json` AS `uint8_or_json`,
`float4` + `json` AS `float4+json`,
`float4` - `json` AS `float4-json`,
`float4` * `json` AS `float4*json`,
`float4` / `json` AS `float4/json`,
`float4` % `json` AS `float4%json`,
`float4` ^ `json` AS `float4^json`,
`float4` >> `json` AS `float4>>json`,
`float4` << `json` AS `float4<<json`,
`float4` | `json` AS `float4|json`,
`float4` & `json` AS `float4&json`,
`float4` || `json` AS `float4||json`,
`float4` && `json` AS `float4&&json`,
`float4` div `json` AS `float4_div_json`,
`float4` mod `json` AS `float4_mod_json`,
`float4` xor `json` AS `float4_xor_json`,
`float4` and `json` AS `float4_and_json`,
`float4` or `json` AS `float4_or_json`,
`float8` + `json` AS `float8+json`,
`float8` - `json` AS `float8-json`,
`float8` * `json` AS `float8*json`,
`float8` / `json` AS `float8/json`,
`float8` % `json` AS `float8%json`,
`float8` ^ `json` AS `float8^json`,
`float8` >> `json` AS `float8>>json`,
`float8` << `json` AS `float8<<json`,
`float8` | `json` AS `float8|json`,
`float8` & `json` AS `float8&json`,
`float8` || `json` AS `float8||json`,
`float8` && `json` AS `float8&&json`,
`float8` div `json` AS `float8_div_json`,
`float8` mod `json` AS `float8_mod_json`,
`float8` xor `json` AS `float8_xor_json`,
`float8` and `json` AS `float8_and_json`,
`float8` or `json` AS `float8_or_json`,
`numeric` + `json` AS `numeric+json`,
`numeric` - `json` AS `numeric-json`,
`numeric` * `json` AS `numeric*json`,
`numeric` / `json` AS `numeric/json`,
`numeric` % `json` AS `numeric%json`,
`numeric` ^ `json` AS `numeric^json`,
`numeric` >> `json` AS `numeric>>json`,
`numeric` << `json` AS `numeric<<json`,
`numeric` | `json` AS `numeric|json`,
`numeric` & `json` AS `numeric&json`,
`numeric` || `json` AS `numeric||json`,
`numeric` && `json` AS `numeric&&json`,
`numeric` div `json` AS `numeric_div_json`,
`numeric` mod `json` AS `numeric_mod_json`,
`numeric` xor `json` AS `numeric_xor_json`,
`numeric` and `json` AS `numeric_and_json`,
`numeric` or `json` AS `numeric_or_json`,
`bit1` + `json` AS `bit1+json`,
`bit1` - `json` AS `bit1-json`,
`bit1` * `json` AS `bit1*json`,
`bit1` / `json` AS `bit1/json`,
`bit1` % `json` AS `bit1%json`,
`bit1` ^ `json` AS `bit1^json`,
`bit1` >> `json` AS `bit1>>json`,
`bit1` << `json` AS `bit1<<json`,
`bit1` | `json` AS `bit1|json`,
`bit1` & `json` AS `bit1&json`,
`bit1` || `json` AS `bit1||json`,
`bit1` && `json` AS `bit1&&json`,
`bit1` div `json` AS `bit1_div_json`,
`bit1` mod `json` AS `bit1_mod_json`,
`bit1` xor `json` AS `bit1_xor_json`,
`bit1` and `json` AS `bit1_and_json`,
`bit1` or `json` AS `bit1_or_json`,
`bit64` + `json` AS `bit64+json`,
`bit64` - `json` AS `bit64-json`,
`bit64` * `json` AS `bit64*json`,
`bit64` / `json` AS `bit64/json`,
`bit64` % `json` AS `bit64%json`,
`bit64` ^ `json` AS `bit64^json`,
`bit64` >> `json` AS `bit64>>json`,
`bit64` << `json` AS `bit64<<json`,
`bit64` | `json` AS `bit64|json`,
`bit64` & `json` AS `bit64&json`,
`bit64` || `json` AS `bit64||json`,
`bit64` && `json` AS `bit64&&json`,
`bit64` div `json` AS `bit64_div_json`,
`bit64` mod `json` AS `bit64_mod_json`,
`bit64` xor `json` AS `bit64_xor_json`,
`bit64` and `json` AS `bit64_and_json`,
`bit64` or `json` AS `bit64_or_json`,
`boolean` + `json` AS `boolean+json`,
`boolean` - `json` AS `boolean-json`,
`boolean` * `json` AS `boolean*json`,
`boolean` / `json` AS `boolean/json`,
`boolean` % `json` AS `boolean%json`,
-- `boolean` ^ `json` AS `boolean^json`,
`boolean` >> `json` AS `boolean>>json`,
`boolean` << `json` AS `boolean<<json`,
`boolean` | `json` AS `boolean|json`,
`boolean` & `json` AS `boolean&json`,
`boolean` || `json` AS `boolean||json`,
`boolean` && `json` AS `boolean&&json`,
`boolean` div `json` AS `boolean_div_json`,
`boolean` mod `json` AS `boolean_mod_json`,
-- `boolean` xor `json` AS `boolean_xor_json`,
`boolean` and `json` AS `boolean_and_json`,
`boolean` or `json` AS `boolean_or_json`,
`date` + `json` AS `date+json`,
`date` - `json` AS `date-json`,
`date` * `json` AS `date*json`,
`date` / `json` AS `date/json`,
`date` % `json` AS `date%json`,
`date` ^ `json` AS `date^json`,
`date` >> `json` AS `date>>json`,
`date` << `json` AS `date<<json`,
`date` | `json` AS `date|json`,
`date` & `json` AS `date&json`,
`date` || `json` AS `date||json`,
`date` && `json` AS `date&&json`,
`date` div `json` AS `date_div_json`,
`date` mod `json` AS `date_mod_json`,
`date` xor `json` AS `date_xor_json`,
`date` and `json` AS `date_and_json`,
`date` or `json` AS `date_or_json`,
`time` + `json` AS `time+json`,
`time` - `json` AS `time-json`,
`time` * `json` AS `time*json`,
`time` / `json` AS `time/json`,
`time` % `json` AS `time%json`,
`time` ^ `json` AS `time^json`,
`time` >> `json` AS `time>>json`,
`time` << `json` AS `time<<json`,
`time` | `json` AS `time|json`,
`time` & `json` AS `time&json`,
`time` || `json` AS `time||json`,
`time` && `json` AS `time&&json`,
`time` div `json` AS `time_div_json`,
`time` mod `json` AS `time_mod_json`,
`time` xor `json` AS `time_xor_json`,
`time` and `json` AS `time_and_json`,
`time` or `json` AS `time_or_json`,
`time(4)` + `json` AS `time(4)+json`,
`time(4)` - `json` AS `time(4)-json`,
`time(4)` * `json` AS `time(4)*json`,
`time(4)` / `json` AS `time(4)/json`,
`time(4)` % `json` AS `time(4)%json`,
`time(4)` ^ `json` AS `time(4)^json`,
`time(4)` >> `json` AS `time(4)>>json`,
`time(4)` << `json` AS `time(4)<<json`,
`time(4)` | `json` AS `time(4)|json`,
`time(4)` & `json` AS `time(4)&json`,
`time(4)` || `json` AS `time(4)||json`,
`time(4)` && `json` AS `time(4)&&json`,
`time(4)` div `json` AS `time(4)_div_json`,
`time(4)` mod `json` AS `time(4)_mod_json`,
`time(4)` xor `json` AS `time(4)_xor_json`,
`time(4)` and `json` AS `time(4)_and_json`,
`time(4)` or `json` AS `time(4)_or_json`,
`datetime` + `json` AS `datetime+json`,
`datetime` - `json` AS `datetime-json`,
`datetime` * `json` AS `datetime*json`,
`datetime` / `json` AS `datetime/json`,
`datetime` % `json` AS `datetime%json`,
`datetime` ^ `json` AS `datetime^json`,
`datetime` >> `json` AS `datetime>>json`,
`datetime` << `json` AS `datetime<<json`,
`datetime` | `json` AS `datetime|json`,
`datetime` & `json` AS `datetime&json`,
`datetime` || `json` AS `datetime||json`,
`datetime` && `json` AS `datetime&&json`,
`datetime` div `json` AS `datetime_div_json`,
`datetime` mod `json` AS `datetime_mod_json`,
`datetime` xor `json` AS `datetime_xor_json`,
`datetime` and `json` AS `datetime_and_json`,
`datetime` or `json` AS `datetime_or_json`,
`datetime(4)` + `json` AS `datetime(4)+json`,
`datetime(4)` - `json` AS `datetime(4)-json`,
`datetime(4)` * `json` AS `datetime(4)*json`,
`datetime(4)` / `json` AS `datetime(4)/json`,
`datetime(4)` % `json` AS `datetime(4)%json`,
`datetime(4)` ^ `json` AS `datetime(4)^json`,
`datetime(4)` >> `json` AS `datetime(4)>>json`,
`datetime(4)` << `json` AS `datetime(4)<<json`,
`datetime(4)` | `json` AS `datetime(4)|json`,
`datetime(4)` & `json` AS `datetime(4)&json`,
`datetime(4)` || `json` AS `datetime(4)||json`,
`datetime(4)` && `json` AS `datetime(4)&&json`,
`datetime(4)` div `json` AS `datetime(4)_div_json`,
`datetime(4)` mod `json` AS `datetime(4)_mod_json`,
`datetime(4)` xor `json` AS `datetime(4)_xor_json`,
`datetime(4)` and `json` AS `datetime(4)_and_json`,
`datetime(4)` or `json` AS `datetime(4)_or_json`,
`timestamp` + `json` AS `timestamp+json`,
`timestamp` - `json` AS `timestamp-json`,
`timestamp` * `json` AS `timestamp*json`,
`timestamp` / `json` AS `timestamp/json`,
`timestamp` % `json` AS `timestamp%json`,
`timestamp` ^ `json` AS `timestamp^json`,
`timestamp` >> `json` AS `timestamp>>json`,
`timestamp` << `json` AS `timestamp<<json`,
`timestamp` | `json` AS `timestamp|json`,
`timestamp` & `json` AS `timestamp&json`,
`timestamp` || `json` AS `timestamp||json`,
`timestamp` && `json` AS `timestamp&&json`,
`timestamp` div `json` AS `timestamp_div_json`,
`timestamp` mod `json` AS `timestamp_mod_json`,
`timestamp` xor `json` AS `timestamp_xor_json`,
`timestamp` and `json` AS `timestamp_and_json`,
`timestamp` or `json` AS `timestamp_or_json`,
`timestamp(4)` + `json` AS `timestamp(4)+json`,
`timestamp(4)` - `json` AS `timestamp(4)-json`,
`timestamp(4)` * `json` AS `timestamp(4)*json`,
`timestamp(4)` / `json` AS `timestamp(4)/json`,
`timestamp(4)` % `json` AS `timestamp(4)%json`,
`timestamp(4)` ^ `json` AS `timestamp(4)^json`,
`timestamp(4)` >> `json` AS `timestamp(4)>>json`,
`timestamp(4)` << `json` AS `timestamp(4)<<json`,
`timestamp(4)` | `json` AS `timestamp(4)|json`,
`timestamp(4)` & `json` AS `timestamp(4)&json`,
`timestamp(4)` || `json` AS `timestamp(4)||json`,
`timestamp(4)` && `json` AS `timestamp(4)&&json`,
`timestamp(4)` div `json` AS `timestamp(4)_div_json`,
`timestamp(4)` mod `json` AS `timestamp(4)_mod_json`,
`timestamp(4)` xor `json` AS `timestamp(4)_xor_json`,
`timestamp(4)` and `json` AS `timestamp(4)_and_json`,
`timestamp(4)` or `json` AS `timestamp(4)_or_json`,
`year` + `json` AS `year+json`,
`year` - `json` AS `year-json`,
`year` * `json` AS `year*json`,
`year` / `json` AS `year/json`,
`year` % `json` AS `year%json`,
`year` ^ `json` AS `year^json`,
`year` >> `json` AS `year>>json`,
`year` << `json` AS `year<<json`,
`year` | `json` AS `year|json`,
`year` & `json` AS `year&json`,
`year` || `json` AS `year||json`,
`year` && `json` AS `year&&json`,
`year` div `json` AS `year_div_json`,
`year` mod `json` AS `year_mod_json`,
`year` xor `json` AS `year_xor_json`,
`year` and `json` AS `year_and_json`,
`year` or `json` AS `year_or_json`,
`char` + `json` AS `char+json`,
`char` - `json` AS `char-json`,
`char` * `json` AS `char*json`,
`char` / `json` AS `char/json`,
`char` % `json` AS `char%json`,
`char` ^ `json` AS `char^json`,
`char` >> `json` AS `char>>json`,
`char` << `json` AS `char<<json`,
`char` | `json` AS `char|json`,
`char` & `json` AS `char&json`,
`char` || `json` AS `char||json`,
`char` && `json` AS `char&&json`,
`char` div `json` AS `char_div_json`,
`char` mod `json` AS `char_mod_json`,
`char` xor `json` AS `char_xor_json`,
`char` and `json` AS `char_and_json`,
`char` or `json` AS `char_or_json`,
`varchar` + `json` AS `varchar+json`,
`varchar` - `json` AS `varchar-json`,
`varchar` * `json` AS `varchar*json`,
`varchar` / `json` AS `varchar/json`,
`varchar` % `json` AS `varchar%json`,
`varchar` ^ `json` AS `varchar^json`,
`varchar` >> `json` AS `varchar>>json`,
`varchar` << `json` AS `varchar<<json`,
`varchar` | `json` AS `varchar|json`,
`varchar` & `json` AS `varchar&json`,
`varchar` || `json` AS `varchar||json`,
`varchar` && `json` AS `varchar&&json`,
`varchar` div `json` AS `varchar_div_json`,
`varchar` mod `json` AS `varchar_mod_json`,
`varchar` xor `json` AS `varchar_xor_json`,
`varchar` and `json` AS `varchar_and_json`,
`varchar` or `json` AS `varchar_or_json`,
`binary` + `json` AS `binary+json`,
`binary` - `json` AS `binary-json`,
`binary` * `json` AS `binary*json`,
`binary` / `json` AS `binary/json`,
-- `binary` % `json` AS `binary%json`,
`binary` ^ `json` AS `binary^json`,
-- `binary` >> `json` AS `binary>>json`,
-- `binary` << `json` AS `binary<<json`,
-- `binary` | `json` AS `binary|json`,
-- `binary` & `json` AS `binary&json`,
`binary` || `json` AS `binary||json`,
`binary` && `json` AS `binary&&json`,
`binary` div `json` AS `binary_div_json`,
`binary` mod `json` AS `binary_mod_json`,
`binary` xor `json` AS `binary_xor_json`,
`binary` and `json` AS `binary_and_json`,
`binary` or `json` AS `binary_or_json`,
`varbinary` + `json` AS `varbinary+json`,
`varbinary` - `json` AS `varbinary-json`,
`varbinary` * `json` AS `varbinary*json`,
`varbinary` / `json` AS `varbinary/json`,
-- `varbinary` % `json` AS `varbinary%json`,
`varbinary` ^ `json` AS `varbinary^json`,
-- `varbinary` >> `json` AS `varbinary>>json`,
-- `varbinary` << `json` AS `varbinary<<json`,
-- `varbinary` | `json` AS `varbinary|json`,
-- `varbinary` & `json` AS `varbinary&json`,
`varbinary` || `json` AS `varbinary||json`,
`varbinary` && `json` AS `varbinary&&json`,
`varbinary` div `json` AS `varbinary_div_json`,
`varbinary` mod `json` AS `varbinary_mod_json`,
`varbinary` xor `json` AS `varbinary_xor_json`,
`varbinary` and `json` AS `varbinary_and_json`,
`varbinary` or `json` AS `varbinary_or_json`,
`tinyblob` + `json` AS `tinyblob+json`,
`tinyblob` - `json` AS `tinyblob-json`,
`tinyblob` * `json` AS `tinyblob*json`,
`tinyblob` / `json` AS `tinyblob/json`,
-- `tinyblob` % `json` AS `tinyblob%json`,
`tinyblob` ^ `json` AS `tinyblob^json`,
-- `tinyblob` >> `json` AS `tinyblob>>json`,
-- `tinyblob` << `json` AS `tinyblob<<json`,
-- `tinyblob` | `json` AS `tinyblob|json`,
-- `tinyblob` & `json` AS `tinyblob&json`,
`tinyblob` || `json` AS `tinyblob||json`,
`tinyblob` && `json` AS `tinyblob&&json`,
`tinyblob` div `json` AS `tinyblob_div_json`,
`tinyblob` mod `json` AS `tinyblob_mod_json`,
`tinyblob` xor `json` AS `tinyblob_xor_json`,
`tinyblob` and `json` AS `tinyblob_and_json`,
`tinyblob` or `json` AS `tinyblob_or_json`,
`blob` + `json` AS `blob+json`,
`blob` - `json` AS `blob-json`,
`blob` * `json` AS `blob*json`,
`blob` / `json` AS `blob/json`,
-- `blob` % `json` AS `blob%json`,
`blob` ^ `json` AS `blob^json`,
-- `blob` >> `json` AS `blob>>json`,
-- `blob` << `json` AS `blob<<json`,
-- `blob` | `json` AS `blob|json`,
-- `blob` & `json` AS `blob&json`,
`blob` || `json` AS `blob||json`,
`blob` && `json` AS `blob&&json`,
`blob` div `json` AS `blob_div_json`,
`blob` mod `json` AS `blob_mod_json`,
`blob` xor `json` AS `blob_xor_json`,
`blob` and `json` AS `blob_and_json`,
`blob` or `json` AS `blob_or_json`,
`mediumblob` + `json` AS `mediumblob+json`,
`mediumblob` - `json` AS `mediumblob-json`,
`mediumblob` * `json` AS `mediumblob*json`,
`mediumblob` / `json` AS `mediumblob/json`,
-- `mediumblob` % `json` AS `mediumblob%json`,
`mediumblob` ^ `json` AS `mediumblob^json`,
-- `mediumblob` >> `json` AS `mediumblob>>json`,
-- `mediumblob` << `json` AS `mediumblob<<json`,
-- `mediumblob` | `json` AS `mediumblob|json`,
-- `mediumblob` & `json` AS `mediumblob&json`,
`mediumblob` || `json` AS `mediumblob||json`,
`mediumblob` && `json` AS `mediumblob&&json`,
`mediumblob` div `json` AS `mediumblob_div_json`,
`mediumblob` mod `json` AS `mediumblob_mod_json`,
`mediumblob` xor `json` AS `mediumblob_xor_json`,
`mediumblob` and `json` AS `mediumblob_and_json`,
`mediumblob` or `json` AS `mediumblob_or_json`,
`longblob` + `json` AS `longblob+json`,
`longblob` - `json` AS `longblob-json`,
`longblob` * `json` AS `longblob*json`,
`longblob` / `json` AS `longblob/json`,
-- `longblob` % `json` AS `longblob%json`,
`longblob` ^ `json` AS `longblob^json`,
-- `longblob` >> `json` AS `longblob>>json`,
-- `longblob` << `json` AS `longblob<<json`,
-- `longblob` | `json` AS `longblob|json`,
-- `longblob` & `json` AS `longblob&json`,
`longblob` || `json` AS `longblob||json`,
`longblob` && `json` AS `longblob&&json`,
`longblob` div `json` AS `longblob_div_json`,
`longblob` mod `json` AS `longblob_mod_json`,
`longblob` xor `json` AS `longblob_xor_json`,
`longblob` and `json` AS `longblob_and_json`,
`longblob` or `json` AS `longblob_or_json`,
`text` + `json` AS `text+json`,
`text` - `json` AS `text-json`,
`text` * `json` AS `text*json`,
`text` / `json` AS `text/json`,
`text` % `json` AS `text%json`,
`text` ^ `json` AS `text^json`,
`text` >> `json` AS `text>>json`,
`text` << `json` AS `text<<json`,
`text` | `json` AS `text|json`,
`text` & `json` AS `text&json`,
`text` || `json` AS `text||json`,
`text` && `json` AS `text&&json`,
`text` div `json` AS `text_div_json`,
`text` mod `json` AS `text_mod_json`,
`text` xor `json` AS `text_xor_json`,
`text` and `json` AS `text_and_json`,
`text` or `json` AS `text_or_json`,
`enum_t` + `json` AS `enum_t+json`,
`enum_t` - `json` AS `enum_t-json`,
`enum_t` * `json` AS `enum_t*json`,
`enum_t` / `json` AS `enum_t/json`,
`enum_t` % `json` AS `enum_t%json`,
`enum_t` ^ `json` AS `enum_t^json`,
`enum_t` >> `json` AS `enum_t>>json`,
`enum_t` << `json` AS `enum_t<<json`,
`enum_t` | `json` AS `enum_t|json`,
`enum_t` & `json` AS `enum_t&json`,
`enum_t` || `json` AS `enum_t||json`,
`enum_t` && `json` AS `enum_t&&json`,
`enum_t` div `json` AS `enum_t_div_json`,
`enum_t` mod `json` AS `enum_t_mod_json`,
`enum_t` xor `json` AS `enum_t_xor_json`,
`enum_t` and `json` AS `enum_t_and_json`,
`enum_t` or `json` AS `enum_t_or_json`,
`set_t` + `json` AS `set_t+json`,
`set_t` - `json` AS `set_t-json`,
`set_t` * `json` AS `set_t*json`,
`set_t` / `json` AS `set_t/json`,
`set_t` % `json` AS `set_t%json`,
`set_t` ^ `json` AS `set_t^json`,
`set_t` >> `json` AS `set_t>>json`,
`set_t` << `json` AS `set_t<<json`,
`set_t` | `json` AS `set_t|json`,
`set_t` & `json` AS `set_t&json`,
`set_t` || `json` AS `set_t||json`,
`set_t` && `json` AS `set_t&&json`,
`set_t` div `json` AS `set_t_div_json`,
`set_t` mod `json` AS `set_t_mod_json`,
`set_t` xor `json` AS `set_t_xor_json`,
`set_t` and `json` AS `set_t_and_json`,
`set_t` or `json` AS `set_t_or_json`,
`json` + `int1` AS `json+int1`,
`json` - `int1` AS `json-int1`,
`json` * `int1` AS `json*int1`,
`json` / `int1` AS `json/int1`,
`json` % `int1` AS `json%int1`,
`json` ^ `int1` AS `json^int1`,
`json` >> `int1` AS `json>>int1`,
`json` << `int1` AS `json<<int1`,
`json` | `int1` AS `json|int1`,
`json` & `int1` AS `json&int1`,
`json` || `int1` AS `json||int1`,
`json` && `int1` AS `json&&int1`,
`json` div `int1` AS `json_div_int1`,
`json` mod `int1` AS `json_mod_int1`,
`json` xor `int1` AS `json_xor_int1`,
`json` and `int1` AS `json_and_int1`,
`json` or `int1` AS `json_or_int1`,
`json` + `uint1` AS `json+uint1`,
`json` - `uint1` AS `json-uint1`,
`json` * `uint1` AS `json*uint1`,
`json` / `uint1` AS `json/uint1`,
`json` % `uint1` AS `json%uint1`,
`json` ^ `uint1` AS `json^uint1`,
`json` >> `uint1` AS `json>>uint1`,
`json` << `uint1` AS `json<<uint1`,
`json` | `uint1` AS `json|uint1`,
`json` & `uint1` AS `json&uint1`,
`json` || `uint1` AS `json||uint1`,
`json` && `uint1` AS `json&&uint1`,
`json` div `uint1` AS `json_div_uint1`,
`json` mod `uint1` AS `json_mod_uint1`,
`json` xor `uint1` AS `json_xor_uint1`,
`json` and `uint1` AS `json_and_uint1`,
`json` or `uint1` AS `json_or_uint1`,
`json` + `int2` AS `json+int2`,
`json` - `int2` AS `json-int2`,
`json` * `int2` AS `json*int2`,
`json` / `int2` AS `json/int2`,
`json` % `int2` AS `json%int2`,
`json` ^ `int2` AS `json^int2`,
`json` >> `int2` AS `json>>int2`,
`json` << `int2` AS `json<<int2`,
`json` | `int2` AS `json|int2`,
`json` & `int2` AS `json&int2`,
`json` || `int2` AS `json||int2`,
`json` && `int2` AS `json&&int2`,
`json` div `int2` AS `json_div_int2`,
`json` mod `int2` AS `json_mod_int2`,
`json` xor `int2` AS `json_xor_int2`,
`json` and `int2` AS `json_and_int2`,
`json` or `int2` AS `json_or_int2`,
`json` + `uint2` AS `json+uint2`,
`json` - `uint2` AS `json-uint2`,
`json` * `uint2` AS `json*uint2`,
`json` / `uint2` AS `json/uint2`,
`json` % `uint2` AS `json%uint2`,
`json` ^ `uint2` AS `json^uint2`,
`json` >> `uint2` AS `json>>uint2`,
`json` << `uint2` AS `json<<uint2`,
`json` | `uint2` AS `json|uint2`,
`json` & `uint2` AS `json&uint2`,
`json` || `uint2` AS `json||uint2`,
`json` && `uint2` AS `json&&uint2`,
`json` div `uint2` AS `json_div_uint2`,
`json` mod `uint2` AS `json_mod_uint2`,
`json` xor `uint2` AS `json_xor_uint2`,
`json` and `uint2` AS `json_and_uint2`,
`json` or `uint2` AS `json_or_uint2`,
`json` + `int4` AS `json+int4`,
`json` - `int4` AS `json-int4`,
`json` * `int4` AS `json*int4`,
`json` / `int4` AS `json/int4`,
`json` % `int4` AS `json%int4`,
`json` ^ `int4` AS `json^int4`,
`json` >> `int4` AS `json>>int4`,
`json` << `int4` AS `json<<int4`,
`json` | `int4` AS `json|int4`,
`json` & `int4` AS `json&int4`,
`json` || `int4` AS `json||int4`,
`json` && `int4` AS `json&&int4`,
`json` div `int4` AS `json_div_int4`,
`json` mod `int4` AS `json_mod_int4`,
`json` xor `int4` AS `json_xor_int4`,
`json` and `int4` AS `json_and_int4`,
`json` or `int4` AS `json_or_int4`,
`json` + `uint4` AS `json+uint4`,
`json` - `uint4` AS `json-uint4`,
`json` * `uint4` AS `json*uint4`,
`json` / `uint4` AS `json/uint4`,
`json` % `uint4` AS `json%uint4`,
`json` ^ `uint4` AS `json^uint4`,
`json` >> `uint4` AS `json>>uint4`,
`json` << `uint4` AS `json<<uint4`,
`json` | `uint4` AS `json|uint4`,
`json` & `uint4` AS `json&uint4`,
`json` || `uint4` AS `json||uint4`,
`json` && `uint4` AS `json&&uint4`,
`json` div `uint4` AS `json_div_uint4`,
`json` mod `uint4` AS `json_mod_uint4`,
`json` xor `uint4` AS `json_xor_uint4`,
`json` and `uint4` AS `json_and_uint4`,
`json` or `uint4` AS `json_or_uint4`,
`json` + `int8` AS `json+int8`,
`json` - `int8` AS `json-int8`,
`json` * `int8` AS `json*int8`,
`json` / `int8` AS `json/int8`,
`json` % `int8` AS `json%int8`,
`json` ^ `int8` AS `json^int8`,
`json` >> `int8` AS `json>>int8`,
`json` << `int8` AS `json<<int8`,
`json` | `int8` AS `json|int8`,
`json` & `int8` AS `json&int8`,
`json` || `int8` AS `json||int8`,
`json` && `int8` AS `json&&int8`,
`json` div `int8` AS `json_div_int8`,
`json` mod `int8` AS `json_mod_int8`,
`json` xor `int8` AS `json_xor_int8`,
`json` and `int8` AS `json_and_int8`,
`json` or `int8` AS `json_or_int8`,
`json` + `uint8` AS `json+uint8`,
`json` - `uint8` AS `json-uint8`,
`json` * `uint8` AS `json*uint8`,
`json` / `uint8` AS `json/uint8`,
`json` % `uint8` AS `json%uint8`,
`json` ^ `uint8` AS `json^uint8`,
`json` >> `uint8` AS `json>>uint8`,
`json` << `uint8` AS `json<<uint8`,
`json` | `uint8` AS `json|uint8`,
`json` & `uint8` AS `json&uint8`,
`json` || `uint8` AS `json||uint8`,
`json` && `uint8` AS `json&&uint8`,
`json` div `uint8` AS `json_div_uint8`,
`json` mod `uint8` AS `json_mod_uint8`,
`json` xor `uint8` AS `json_xor_uint8`,
`json` and `uint8` AS `json_and_uint8`,
`json` or `uint8` AS `json_or_uint8`,
`json` + `float4` AS `json+float4`,
`json` - `float4` AS `json-float4`,
`json` * `float4` AS `json*float4`,
`json` / `float4` AS `json/float4`,
`json` % `float4` AS `json%float4`,
`json` ^ `float4` AS `json^float4`,
`json` >> `float4` AS `json>>float4`,
`json` << `float4` AS `json<<float4`,
`json` | `float4` AS `json|float4`,
`json` & `float4` AS `json&float4`,
`json` || `float4` AS `json||float4`,
`json` && `float4` AS `json&&float4`,
`json` div `float4` AS `json_div_float4`,
`json` mod `float4` AS `json_mod_float4`,
`json` xor `float4` AS `json_xor_float4`,
`json` and `float4` AS `json_and_float4`,
`json` or `float4` AS `json_or_float4`,
`json` + `float8` AS `json+float8`,
`json` - `float8` AS `json-float8`,
`json` * `float8` AS `json*float8`,
`json` / `float8` AS `json/float8`,
`json` % `float8` AS `json%float8`,
`json` ^ `float8` AS `json^float8`,
`json` >> `float8` AS `json>>float8`,
`json` << `float8` AS `json<<float8`,
`json` | `float8` AS `json|float8`,
`json` & `float8` AS `json&float8`,
`json` || `float8` AS `json||float8`,
`json` && `float8` AS `json&&float8`,
`json` div `float8` AS `json_div_float8`,
`json` mod `float8` AS `json_mod_float8`,
`json` xor `float8` AS `json_xor_float8`,
`json` and `float8` AS `json_and_float8`,
`json` or `float8` AS `json_or_float8`,
`json` + `numeric` AS `json+numeric`,
`json` - `numeric` AS `json-numeric`,
`json` * `numeric` AS `json*numeric`,
`json` / `numeric` AS `json/numeric`,
`json` % `numeric` AS `json%numeric`,
`json` ^ `numeric` AS `json^numeric`,
`json` >> `numeric` AS `json>>numeric`,
`json` << `numeric` AS `json<<numeric`,
`json` | `numeric` AS `json|numeric`,
`json` & `numeric` AS `json&numeric`,
`json` || `numeric` AS `json||numeric`,
`json` && `numeric` AS `json&&numeric`,
`json` div `numeric` AS `json_div_numeric`,
`json` mod `numeric` AS `json_mod_numeric`,
`json` xor `numeric` AS `json_xor_numeric`,
`json` and `numeric` AS `json_and_numeric`,
`json` or `numeric` AS `json_or_numeric`,
`json` + `bit1` AS `json+bit1`,
`json` - `bit1` AS `json-bit1`,
`json` * `bit1` AS `json*bit1`,
`json` / `bit1` AS `json/bit1`,
`json` % `bit1` AS `json%bit1`,
`json` ^ `bit1` AS `json^bit1`,
-- `json` >> `bit1` AS `json>>bit1`,
-- `json` << `bit1` AS `json<<bit1`,
`json` | `bit1` AS `json|bit1`,
`json` & `bit1` AS `json&bit1`,
`json` || `bit1` AS `json||bit1`,
`json` && `bit1` AS `json&&bit1`,
`json` div `bit1` AS `json_div_bit1`,
`json` mod `bit1` AS `json_mod_bit1`,
`json` xor `bit1` AS `json_xor_bit1`,
`json` and `bit1` AS `json_and_bit1`,
`json` or `bit1` AS `json_or_bit1`,
`json` + `bit64` AS `json+bit64`,
`json` - `bit64` AS `json-bit64`,
`json` * `bit64` AS `json*bit64`,
`json` / `bit64` AS `json/bit64`,
`json` % `bit64` AS `json%bit64`,
`json` ^ `bit64` AS `json^bit64`,
-- `json` >> `bit64` AS `json>>bit64`,
-- `json` << `bit64` AS `json<<bit64`,
`json` | `bit64` AS `json|bit64`,
`json` & `bit64` AS `json&bit64`,
`json` || `bit64` AS `json||bit64`,
`json` && `bit64` AS `json&&bit64`,
`json` div `bit64` AS `json_div_bit64`,
`json` mod `bit64` AS `json_mod_bit64`,
`json` xor `bit64` AS `json_xor_bit64`,
`json` and `bit64` AS `json_and_bit64`,
`json` or `bit64` AS `json_or_bit64`,
`json` + `boolean` AS `json+boolean`,
`json` - `boolean` AS `json-boolean`,
`json` * `boolean` AS `json*boolean`,
`json` / `boolean` AS `json/boolean`,
`json` % `boolean` AS `json%boolean`,
-- `json` ^ `boolean` AS `json^boolean`,
`json` >> `boolean` AS `json>>boolean`,
`json` << `boolean` AS `json<<boolean`,
`json` | `boolean` AS `json|boolean`,
`json` & `boolean` AS `json&boolean`,
`json` || `boolean` AS `json||boolean`,
`json` && `boolean` AS `json&&boolean`,
`json` div `boolean` AS `json_div_boolean`,
`json` mod `boolean` AS `json_mod_boolean`,
-- `json` xor `boolean` AS `json_xor_boolean`,
`json` and `boolean` AS `json_and_boolean`,
`json` or `boolean` AS `json_or_boolean`,
`json` + `date` AS `json+date`,
`json` - `date` AS `json-date`,
`json` * `date` AS `json*date`,
`json` / `date` AS `json/date`,
`json` % `date` AS `json%date`,
`json` ^ `date` AS `json^date`,
`json` >> `date` AS `json>>date`,
`json` << `date` AS `json<<date`,
`json` | `date` AS `json|date`,
`json` & `date` AS `json&date`,
`json` || `date` AS `json||date`,
`json` && `date` AS `json&&date`,
`json` div `date` AS `json_div_date`,
`json` mod `date` AS `json_mod_date`,
`json` xor `date` AS `json_xor_date`,
`json` and `date` AS `json_and_date`,
`json` or `date` AS `json_or_date`,
`json` + `time` AS `json+time`,
`json` - `time` AS `json-time`,
`json` * `time` AS `json*time`,
`json` / `time` AS `json/time`,
`json` % `time` AS `json%time`,
`json` ^ `time` AS `json^time`,
`json` >> `time` AS `json>>time`,
`json` << `time` AS `json<<time`,
`json` | `time` AS `json|time`,
`json` & `time` AS `json&time`,
`json` || `time` AS `json||time`,
`json` && `time` AS `json&&time`,
`json` div `time` AS `json_div_time`,
`json` mod `time` AS `json_mod_time`,
`json` xor `time` AS `json_xor_time`,
`json` and `time` AS `json_and_time`,
`json` or `time` AS `json_or_time`,
`json` + `time(4)` AS `json+time(4)`,
`json` - `time(4)` AS `json-time(4)`,
`json` * `time(4)` AS `json*time(4)`,
`json` / `time(4)` AS `json/time(4)`,
`json` % `time(4)` AS `json%time(4)`,
`json` ^ `time(4)` AS `json^time(4)`,
`json` >> `time(4)` AS `json>>time(4)`,
`json` << `time(4)` AS `json<<time(4)`,
`json` | `time(4)` AS `json|time(4)`,
`json` & `time(4)` AS `json&time(4)`,
`json` || `time(4)` AS `json||time(4)`,
`json` && `time(4)` AS `json&&time(4)`,
`json` div `time(4)` AS `json_div_time(4)`,
`json` mod `time(4)` AS `json_mod_time(4)`,
`json` xor `time(4)` AS `json_xor_time(4)`,
`json` and `time(4)` AS `json_and_time(4)`,
`json` or `time(4)` AS `json_or_time(4)`,
`json` + `datetime` AS `json+datetime`,
`json` - `datetime` AS `json-datetime`,
`json` * `datetime` AS `json*datetime`,
`json` / `datetime` AS `json/datetime`,
`json` % `datetime` AS `json%datetime`,
`json` ^ `datetime` AS `json^datetime`,
`json` >> `datetime` AS `json>>datetime`,
`json` << `datetime` AS `json<<datetime`,
`json` | `datetime` AS `json|datetime`,
`json` & `datetime` AS `json&datetime`,
`json` || `datetime` AS `json||datetime`,
`json` && `datetime` AS `json&&datetime`,
`json` div `datetime` AS `json_div_datetime`,
`json` mod `datetime` AS `json_mod_datetime`,
`json` xor `datetime` AS `json_xor_datetime`,
`json` and `datetime` AS `json_and_datetime`,
`json` or `datetime` AS `json_or_datetime`,
`json` + `datetime(4)` AS `json+datetime(4)`,
`json` - `datetime(4)` AS `json-datetime(4)`,
`json` * `datetime(4)` AS `json*datetime(4)`,
`json` / `datetime(4)` AS `json/datetime(4)`,
`json` % `datetime(4)` AS `json%datetime(4)`,
`json` ^ `datetime(4)` AS `json^datetime(4)`,
`json` >> `datetime(4)` AS `json>>datetime(4)`,
`json` << `datetime(4)` AS `json<<datetime(4)`,
`json` | `datetime(4)` AS `json|datetime(4)`,
`json` & `datetime(4)` AS `json&datetime(4)`,
`json` || `datetime(4)` AS `json||datetime(4)`,
`json` && `datetime(4)` AS `json&&datetime(4)`,
`json` div `datetime(4)` AS `json_div_datetime(4)`,
`json` mod `datetime(4)` AS `json_mod_datetime(4)`,
`json` xor `datetime(4)` AS `json_xor_datetime(4)`,
`json` and `datetime(4)` AS `json_and_datetime(4)`,
`json` or `datetime(4)` AS `json_or_datetime(4)`,
`json` + `timestamp` AS `json+timestamp`,
`json` - `timestamp` AS `json-timestamp`,
`json` * `timestamp` AS `json*timestamp`,
`json` / `timestamp` AS `json/timestamp`,
`json` % `timestamp` AS `json%timestamp`,
`json` ^ `timestamp` AS `json^timestamp`,
`json` >> `timestamp` AS `json>>timestamp`,
`json` << `timestamp` AS `json<<timestamp`,
`json` | `timestamp` AS `json|timestamp`,
`json` & `timestamp` AS `json&timestamp`,
`json` || `timestamp` AS `json||timestamp`,
`json` && `timestamp` AS `json&&timestamp`,
`json` div `timestamp` AS `json_div_timestamp`,
`json` mod `timestamp` AS `json_mod_timestamp`,
`json` xor `timestamp` AS `json_xor_timestamp`,
`json` and `timestamp` AS `json_and_timestamp`,
`json` or `timestamp` AS `json_or_timestamp`,
`json` + `timestamp(4)` AS `json+timestamp(4)`,
`json` - `timestamp(4)` AS `json-timestamp(4)`,
`json` * `timestamp(4)` AS `json*timestamp(4)`,
`json` / `timestamp(4)` AS `json/timestamp(4)`,
`json` % `timestamp(4)` AS `json%timestamp(4)`,
`json` ^ `timestamp(4)` AS `json^timestamp(4)`,
`json` >> `timestamp(4)` AS `json>>timestamp(4)`,
`json` << `timestamp(4)` AS `json<<timestamp(4)`,
`json` | `timestamp(4)` AS `json|timestamp(4)`,
`json` & `timestamp(4)` AS `json&timestamp(4)`,
`json` || `timestamp(4)` AS `json||timestamp(4)`,
`json` && `timestamp(4)` AS `json&&timestamp(4)`,
`json` div `timestamp(4)` AS `json_div_timestamp(4)`,
`json` mod `timestamp(4)` AS `json_mod_timestamp(4)`,
`json` xor `timestamp(4)` AS `json_xor_timestamp(4)`,
`json` and `timestamp(4)` AS `json_and_timestamp(4)`,
`json` or `timestamp(4)` AS `json_or_timestamp(4)`,
`json` + `year` AS `json+year`,
`json` - `year` AS `json-year`,
`json` * `year` AS `json*year`,
`json` / `year` AS `json/year`,
`json` % `year` AS `json%year`,
`json` ^ `year` AS `json^year`,
`json` >> `year` AS `json>>year`,
`json` << `year` AS `json<<year`,
`json` | `year` AS `json|year`,
`json` & `year` AS `json&year`,
`json` || `year` AS `json||year`,
`json` && `year` AS `json&&year`,
`json` div `year` AS `json_div_year`,
`json` mod `year` AS `json_mod_year`,
`json` xor `year` AS `json_xor_year`,
`json` and `year` AS `json_and_year`,
`json` or `year` AS `json_or_year`,
`json` + `char` AS `json+char`,
`json` - `char` AS `json-char`,
`json` * `char` AS `json*char`,
`json` / `char` AS `json/char`,
`json` % `char` AS `json%char`,
`json` ^ `char` AS `json^char`,
`json` >> `char` AS `json>>char`,
`json` << `char` AS `json<<char`,
`json` | `char` AS `json|char`,
`json` & `char` AS `json&char`,
`json` || `char` AS `json||char`,
`json` && `char` AS `json&&char`,
`json` div `char` AS `json_div_char`,
`json` mod `char` AS `json_mod_char`,
`json` xor `char` AS `json_xor_char`,
`json` and `char` AS `json_and_char`,
`json` or `char` AS `json_or_char`,
`json` + `varchar` AS `json+varchar`,
`json` - `varchar` AS `json-varchar`,
`json` * `varchar` AS `json*varchar`,
`json` / `varchar` AS `json/varchar`,
`json` % `varchar` AS `json%varchar`,
`json` ^ `varchar` AS `json^varchar`,
`json` >> `varchar` AS `json>>varchar`,
`json` << `varchar` AS `json<<varchar`,
`json` | `varchar` AS `json|varchar`,
`json` & `varchar` AS `json&varchar`,
`json` || `varchar` AS `json||varchar`,
`json` && `varchar` AS `json&&varchar`,
`json` div `varchar` AS `json_div_varchar`,
`json` mod `varchar` AS `json_mod_varchar`,
`json` xor `varchar` AS `json_xor_varchar`,
`json` and `varchar` AS `json_and_varchar`,
`json` or `varchar` AS `json_or_varchar`,
`json` + `binary` AS `json+binary`,
`json` - `binary` AS `json-binary`,
`json` * `binary` AS `json*binary`,
`json` / `binary` AS `json/binary`,
-- `json` % `binary` AS `json%binary`,
`json` ^ `binary` AS `json^binary`,
-- `json` >> `binary` AS `json>>binary`,
-- `json` << `binary` AS `json<<binary`,
-- `json` | `binary` AS `json|binary`,
-- `json` & `binary` AS `json&binary`,
`json` || `binary` AS `json||binary`,
`json` && `binary` AS `json&&binary`,
`json` div `binary` AS `json_div_binary`,
`json` mod `binary` AS `json_mod_binary`,
`json` xor `binary` AS `json_xor_binary`,
`json` and `binary` AS `json_and_binary`,
`json` or `binary` AS `json_or_binary`,
`json` + `varbinary` AS `json+varbinary`,
`json` - `varbinary` AS `json-varbinary`,
`json` * `varbinary` AS `json*varbinary`,
`json` / `varbinary` AS `json/varbinary`,
-- `json` % `varbinary` AS `json%varbinary`,
`json` ^ `varbinary` AS `json^varbinary`,
-- `json` >> `varbinary` AS `json>>varbinary`,
-- `json` << `varbinary` AS `json<<varbinary`,
-- `json` | `varbinary` AS `json|varbinary`,
-- `json` & `varbinary` AS `json&varbinary`,
`json` || `varbinary` AS `json||varbinary`,
`json` && `varbinary` AS `json&&varbinary`,
`json` div `varbinary` AS `json_div_varbinary`,
`json` mod `varbinary` AS `json_mod_varbinary`,
`json` xor `varbinary` AS `json_xor_varbinary`,
`json` and `varbinary` AS `json_and_varbinary`,
`json` or `varbinary` AS `json_or_varbinary`,
`json` + `tinyblob` AS `json+tinyblob`,
`json` - `tinyblob` AS `json-tinyblob`,
`json` * `tinyblob` AS `json*tinyblob`,
`json` / `tinyblob` AS `json/tinyblob`,
-- `json` % `tinyblob` AS `json%tinyblob`,
`json` ^ `tinyblob` AS `json^tinyblob`,
-- `json` >> `tinyblob` AS `json>>tinyblob`,
-- `json` << `tinyblob` AS `json<<tinyblob`,
-- `json` | `tinyblob` AS `json|tinyblob`,
-- `json` & `tinyblob` AS `json&tinyblob`,
`json` || `tinyblob` AS `json||tinyblob`,
`json` && `tinyblob` AS `json&&tinyblob`,
`json` div `tinyblob` AS `json_div_tinyblob`,
`json` mod `tinyblob` AS `json_mod_tinyblob`,
`json` xor `tinyblob` AS `json_xor_tinyblob`,
`json` and `tinyblob` AS `json_and_tinyblob`,
`json` or `tinyblob` AS `json_or_tinyblob`,
`json` + `blob` AS `json+blob`,
`json` - `blob` AS `json-blob`,
`json` * `blob` AS `json*blob`,
`json` / `blob` AS `json/blob`,
-- `json` % `blob` AS `json%blob`,
`json` ^ `blob` AS `json^blob`,
-- `json` >> `blob` AS `json>>blob`,
-- `json` << `blob` AS `json<<blob`,
-- `json` | `blob` AS `json|blob`,
-- `json` & `blob` AS `json&blob`,
`json` || `blob` AS `json||blob`,
`json` && `blob` AS `json&&blob`,
`json` div `blob` AS `json_div_blob`,
`json` mod `blob` AS `json_mod_blob`,
`json` xor `blob` AS `json_xor_blob`,
`json` and `blob` AS `json_and_blob`,
`json` or `blob` AS `json_or_blob`,
`json` + `mediumblob` AS `json+mediumblob`,
`json` - `mediumblob` AS `json-mediumblob`,
`json` * `mediumblob` AS `json*mediumblob`,
`json` / `mediumblob` AS `json/mediumblob`,
-- `json` % `mediumblob` AS `json%mediumblob`,
`json` ^ `mediumblob` AS `json^mediumblob`,
-- `json` >> `mediumblob` AS `json>>mediumblob`,
-- `json` << `mediumblob` AS `json<<mediumblob`,
-- `json` | `mediumblob` AS `json|mediumblob`,
-- `json` & `mediumblob` AS `json&mediumblob`,
`json` || `mediumblob` AS `json||mediumblob`,
`json` && `mediumblob` AS `json&&mediumblob`,
`json` div `mediumblob` AS `json_div_mediumblob`,
`json` mod `mediumblob` AS `json_mod_mediumblob`,
`json` xor `mediumblob` AS `json_xor_mediumblob`,
`json` and `mediumblob` AS `json_and_mediumblob`,
`json` or `mediumblob` AS `json_or_mediumblob`,
`json` + `longblob` AS `json+longblob`,
`json` - `longblob` AS `json-longblob`,
`json` * `longblob` AS `json*longblob`,
`json` / `longblob` AS `json/longblob`,
-- `json` % `longblob` AS `json%longblob`,
`json` ^ `longblob` AS `json^longblob`,
-- `json` >> `longblob` AS `json>>longblob`,
-- `json` << `longblob` AS `json<<longblob`,
-- `json` | `longblob` AS `json|longblob`,
-- `json` & `longblob` AS `json&longblob`,
`json` || `longblob` AS `json||longblob`,
`json` && `longblob` AS `json&&longblob`,
`json` div `longblob` AS `json_div_longblob`,
`json` mod `longblob` AS `json_mod_longblob`,
`json` xor `longblob` AS `json_xor_longblob`,
`json` and `longblob` AS `json_and_longblob`,
`json` or `longblob` AS `json_or_longblob`,
`json` + `text` AS `json+text`,
`json` - `text` AS `json-text`,
`json` * `text` AS `json*text`,
`json` / `text` AS `json/text`,
`json` % `text` AS `json%text`,
`json` ^ `text` AS `json^text`,
`json` >> `text` AS `json>>text`,
`json` << `text` AS `json<<text`,
`json` | `text` AS `json|text`,
`json` & `text` AS `json&text`,
`json` || `text` AS `json||text`,
`json` && `text` AS `json&&text`,
`json` div `text` AS `json_div_text`,
`json` mod `text` AS `json_mod_text`,
`json` xor `text` AS `json_xor_text`,
`json` and `text` AS `json_and_text`,
`json` or `text` AS `json_or_text`,
`json` + `enum_t` AS `json+enum_t`,
`json` - `enum_t` AS `json-enum_t`,
`json` * `enum_t` AS `json*enum_t`,
`json` / `enum_t` AS `json/enum_t`,
`json` % `enum_t` AS `json%enum_t`,
`json` ^ `enum_t` AS `json^enum_t`,
`json` >> `enum_t` AS `json>>enum_t`,
`json` << `enum_t` AS `json<<enum_t`,
`json` | `enum_t` AS `json|enum_t`,
`json` & `enum_t` AS `json&enum_t`,
`json` || `enum_t` AS `json||enum_t`,
`json` && `enum_t` AS `json&&enum_t`,
`json` div `enum_t` AS `json_div_enum_t`,
`json` mod `enum_t` AS `json_mod_enum_t`,
`json` xor `enum_t` AS `json_xor_enum_t`,
`json` and `enum_t` AS `json_and_enum_t`,
`json` or `enum_t` AS `json_or_enum_t`,
`json` + `set_t` AS `json+set_t`,
`json` - `set_t` AS `json-set_t`,
`json` * `set_t` AS `json*set_t`,
`json` / `set_t` AS `json/set_t`,
`json` % `set_t` AS `json%set_t`,
`json` ^ `set_t` AS `json^set_t`,
`json` >> `set_t` AS `json>>set_t`,
`json` << `set_t` AS `json<<set_t`,
`json` | `set_t` AS `json|set_t`,
`json` & `set_t` AS `json&set_t`,
`json` || `set_t` AS `json||set_t`,
`json` && `set_t` AS `json&&set_t`,
`json` div `set_t` AS `json_div_set_t`,
`json` mod `set_t` AS `json_mod_set_t`,
`json` xor `set_t` AS `json_xor_set_t`,
`json` and `set_t` AS `json_and_set_t`,
`json` or `set_t` AS `json_or_set_t`,
`json` + `json` AS `json+json`,
`json` - `json` AS `json-json`,
`json` * `json` AS `json*json`,
`json` / `json` AS `json/json`,
`json` % `json` AS `json%json`,
`json` ^ `json` AS `json^json`,
`json` >> `json` AS `json>>json`,
`json` << `json` AS `json<<json`,
`json` | `json` AS `json|json`,
`json` & `json` AS `json&json`,
`json` || `json` AS `json||json`,
`json` && `json` AS `json&&json`,
`json` div `json` AS `json_div_json`,
`json` mod `json` AS `json_mod_json`,
`json` xor `json` AS `json_xor_json`,
`json` and `json` AS `json_and_json`,
`json` or `json` AS `json_or_json`,
+ `json` AS `+json`,
- `json` AS `-json`,
~ `json` AS `~json`,
@ `json` AS `@json`,
! `json` AS `!json`,
not `json` AS `not_json`
FROM test_json_table;
SHOW COLUMNS FROM test_json_type;
         Field         |       Type       | Null | Key | Default | Extra 
-----------------------+------------------+------+-----+---------+-------
 int1+json             | double precision | YES  |     | NULL    | 
 int1-json             | double precision | YES  |     | NULL    | 
 int1*json             | double precision | YES  |     | NULL    | 
 int1/json             | double precision | YES  |     | NULL    | 
 int1%json             | tinyint          | YES  |     | NULL    | 
 int1^json             | double precision | YES  |     | NULL    | 
 int1>>json            | tinyint          | YES  |     | NULL    | 
 int1<<json            | tinyint          | YES  |     | NULL    | 
 int1|json             | tinyint          | YES  |     | NULL    | 
 int1&json             | tinyint          | YES  |     | NULL    | 
 int1||json            | boolean          | YES  |     | NULL    | 
 int1&&json            | boolean          | YES  |     | NULL    | 
 int1_div_json         | numeric          | YES  |     | NULL    | 
 int1_mod_json         | numeric          | YES  |     | NULL    | 
 int1_xor_json         | integer          | YES  |     | NULL    | 
 int1_and_json         | boolean          | YES  |     | NULL    | 
 int1_or_json          | boolean          | YES  |     | NULL    | 
 uint1+json            | double precision | YES  |     | NULL    | 
 uint1-json            | double precision | YES  |     | NULL    | 
 uint1*json            | double precision | YES  |     | NULL    | 
 uint1/json            | double precision | YES  |     | NULL    | 
 uint1%json            | uint1            | YES  |     | NULL    | 
 uint1^json            | double precision | YES  |     | NULL    | 
 uint1>>json           | uint1            | YES  |     | NULL    | 
 uint1<<json           | uint8            | YES  |     | NULL    | 
 uint1|json            | uint1            | YES  |     | NULL    | 
 uint1&json            | uint1            | YES  |     | NULL    | 
 uint1||json           | boolean          | YES  |     | NULL    | 
 uint1&&json           | boolean          | YES  |     | NULL    | 
 uint1_div_json        | numeric          | YES  |     | NULL    | 
 uint1_mod_json        | numeric          | YES  |     | NULL    | 
 uint1_xor_json        | integer          | YES  |     | NULL    | 
 uint1_and_json        | boolean          | YES  |     | NULL    | 
 uint1_or_json         | boolean          | YES  |     | NULL    | 
 int2+json             | double precision | YES  |     | NULL    | 
 int2-json             | double precision | YES  |     | NULL    | 
 int2*json             | double precision | YES  |     | NULL    | 
 int2/json             | double precision | YES  |     | NULL    | 
 int2%json             | smallint         | YES  |     | NULL    | 
 int2^json             | double precision | YES  |     | NULL    | 
 int2>>json            | smallint         | YES  |     | NULL    | 
 int2<<json            | smallint         | YES  |     | NULL    | 
 int2|json             | smallint         | YES  |     | NULL    | 
 int2&json             | smallint         | YES  |     | NULL    | 
 int2||json            | boolean          | YES  |     | NULL    | 
 int2&&json            | boolean          | YES  |     | NULL    | 
 int2_div_json         | numeric          | YES  |     | NULL    | 
 int2_mod_json         | numeric          | YES  |     | NULL    | 
 int2_xor_json         | integer          | YES  |     | NULL    | 
 int2_and_json         | boolean          | YES  |     | NULL    | 
 int2_or_json          | boolean          | YES  |     | NULL    | 
 uint2+json            | double precision | YES  |     | NULL    | 
 uint2-json            | double precision | YES  |     | NULL    | 
 uint2*json            | double precision | YES  |     | NULL    | 
 uint2/json            | double precision | YES  |     | NULL    | 
 uint2%json            | uint2            | YES  |     | NULL    | 
 uint2^json            | double precision | YES  |     | NULL    | 
 uint2>>json           | uint2            | YES  |     | NULL    | 
 uint2<<json           | uint8            | YES  |     | NULL    | 
 uint2|json            | uint2            | YES  |     | NULL    | 
 uint2&json            | uint2            | YES  |     | NULL    | 
 uint2||json           | boolean          | YES  |     | NULL    | 
 uint2&&json           | boolean          | YES  |     | NULL    | 
 uint2_div_json        | numeric          | YES  |     | NULL    | 
 uint2_mod_json        | numeric          | YES  |     | NULL    | 
 uint2_xor_json        | integer          | YES  |     | NULL    | 
 uint2_and_json        | boolean          | YES  |     | NULL    | 
 uint2_or_json         | boolean          | YES  |     | NULL    | 
 int4+json             | double precision | YES  |     | NULL    | 
 int4-json             | double precision | YES  |     | NULL    | 
 int4*json             | double precision | YES  |     | NULL    | 
 int4/json             | double precision | YES  |     | NULL    | 
 int4%json             | integer          | YES  |     | NULL    | 
 int4^json             | double precision | YES  |     | NULL    | 
 int4>>json            | integer          | YES  |     | NULL    | 
 int4<<json            | integer          | YES  |     | NULL    | 
 int4|json             | integer          | YES  |     | NULL    | 
 int4&json             | integer          | YES  |     | NULL    | 
 int4||json            | boolean          | YES  |     | NULL    | 
 int4&&json            | boolean          | YES  |     | NULL    | 
 int4_div_json         | numeric          | YES  |     | NULL    | 
 int4_mod_json         | numeric          | YES  |     | NULL    | 
 int4_xor_json         | integer          | YES  |     | NULL    | 
 int4_and_json         | boolean          | YES  |     | NULL    | 
 int4_or_json          | boolean          | YES  |     | NULL    | 
 uint4+json            | double precision | YES  |     | NULL    | 
 uint4-json            | double precision | YES  |     | NULL    | 
 uint4*json            | double precision | YES  |     | NULL    | 
 uint4/json            | double precision | YES  |     | NULL    | 
 uint4%json            | uint4            | YES  |     | NULL    | 
 uint4^json            | double precision | YES  |     | NULL    | 
 uint4>>json           | uint4            | YES  |     | NULL    | 
 uint4<<json           | uint8            | YES  |     | NULL    | 
 uint4|json            | uint4            | YES  |     | NULL    | 
 uint4&json            | uint4            | YES  |     | NULL    | 
 uint4||json           | boolean          | YES  |     | NULL    | 
 uint4&&json           | boolean          | YES  |     | NULL    | 
 uint4_div_json        | numeric          | YES  |     | NULL    | 
 uint4_mod_json        | numeric          | YES  |     | NULL    | 
 uint4_xor_json        | integer          | YES  |     | NULL    | 
 uint4_and_json        | boolean          | YES  |     | NULL    | 
 uint4_or_json         | boolean          | YES  |     | NULL    | 
 int8+json             | double precision | YES  |     | NULL    | 
 int8-json             | double precision | YES  |     | NULL    | 
 int8*json             | double precision | YES  |     | NULL    | 
 int8/json             | double precision | YES  |     | NULL    | 
 int8%json             | bigint           | YES  |     | NULL    | 
 int8^json             | double precision | YES  |     | NULL    | 
 int8>>json            | bigint           | YES  |     | NULL    | 
 int8<<json            | bigint           | YES  |     | NULL    | 
 int8|json             | bigint           | YES  |     | NULL    | 
 int8&json             | bigint           | YES  |     | NULL    | 
 int8||json            | boolean          | YES  |     | NULL    | 
 int8&&json            | boolean          | YES  |     | NULL    | 
 int8_div_json         | numeric          | YES  |     | NULL    | 
 int8_mod_json         | numeric          | YES  |     | NULL    | 
 int8_xor_json         | integer          | YES  |     | NULL    | 
 int8_and_json         | boolean          | YES  |     | NULL    | 
 int8_or_json          | boolean          | YES  |     | NULL    | 
 uint8+json            | double precision | YES  |     | NULL    | 
 uint8-json            | double precision | YES  |     | NULL    | 
 uint8*json            | double precision | YES  |     | NULL    | 
 uint8/json            | double precision | YES  |     | NULL    | 
 uint8%json            | uint8            | YES  |     | NULL    | 
 uint8^json            | double precision | YES  |     | NULL    | 
 uint8>>json           | uint8            | YES  |     | NULL    | 
 uint8<<json           | uint8            | YES  |     | NULL    | 
 uint8|json            | uint8            | YES  |     | NULL    | 
 uint8&json            | uint8            | YES  |     | NULL    | 
 uint8||json           | boolean          | YES  |     | NULL    | 
 uint8&&json           | boolean          | YES  |     | NULL    | 
 uint8_div_json        | numeric          | YES  |     | NULL    | 
 uint8_mod_json        | numeric          | YES  |     | NULL    | 
 uint8_xor_json        | integer          | YES  |     | NULL    | 
 uint8_and_json        | boolean          | YES  |     | NULL    | 
 uint8_or_json         | boolean          | YES  |     | NULL    | 
 float4+json           | double precision | YES  |     | NULL    | 
 float4-json           | double precision | YES  |     | NULL    | 
 float4*json           | double precision | YES  |     | NULL    | 
 float4/json           | double precision | YES  |     | NULL    | 
 float4%json           | numeric          | YES  |     | NULL    | 
 float4^json           | double precision | YES  |     | NULL    | 
 float4>>json          | bigint           | YES  |     | NULL    | 
 float4<<json          | bigint           | YES  |     | NULL    | 
 float4|json           | bigint           | YES  |     | NULL    | 
 float4&json           | bigint           | YES  |     | NULL    | 
 float4||json          | boolean          | YES  |     | NULL    | 
 float4&&json          | boolean          | YES  |     | NULL    | 
 float4_div_json       | numeric          | YES  |     | NULL    | 
 float4_mod_json       | numeric          | YES  |     | NULL    | 
 float4_xor_json       | integer          | YES  |     | NULL    | 
 float4_and_json       | boolean          | YES  |     | NULL    | 
 float4_or_json        | boolean          | YES  |     | NULL    | 
 float8+json           | double precision | YES  |     | NULL    | 
 float8-json           | double precision | YES  |     | NULL    | 
 float8*json           | double precision | YES  |     | NULL    | 
 float8/json           | double precision | YES  |     | NULL    | 
 float8%json           | numeric          | YES  |     | NULL    | 
 float8^json           | double precision | YES  |     | NULL    | 
 float8>>json          | bigint           | YES  |     | NULL    | 
 float8<<json          | bigint           | YES  |     | NULL    | 
 float8|json           | bigint           | YES  |     | NULL    | 
 float8&json           | bigint           | YES  |     | NULL    | 
 float8||json          | boolean          | YES  |     | NULL    | 
 float8&&json          | boolean          | YES  |     | NULL    | 
 float8_div_json       | numeric          | YES  |     | NULL    | 
 float8_mod_json       | numeric          | YES  |     | NULL    | 
 float8_xor_json       | integer          | YES  |     | NULL    | 
 float8_and_json       | boolean          | YES  |     | NULL    | 
 float8_or_json        | boolean          | YES  |     | NULL    | 
 numeric+json          | double precision | YES  |     | NULL    | 
 numeric-json          | double precision | YES  |     | NULL    | 
 numeric*json          | double precision | YES  |     | NULL    | 
 numeric/json          | double precision | YES  |     | NULL    | 
 numeric%json          | numeric          | YES  |     | NULL    | 
 numeric^json          | double precision | YES  |     | NULL    | 
 numeric>>json         | bigint           | YES  |     | NULL    | 
 numeric<<json         | bigint           | YES  |     | NULL    | 
 numeric|json          | bigint           | YES  |     | NULL    | 
 numeric&json          | bigint           | YES  |     | NULL    | 
 numeric||json         | boolean          | YES  |     | NULL    | 
 numeric&&json         | boolean          | YES  |     | NULL    | 
 numeric_div_json      | numeric          | YES  |     | NULL    | 
 numeric_mod_json      | numeric          | YES  |     | NULL    | 
 numeric_xor_json      | integer          | YES  |     | NULL    | 
 numeric_and_json      | boolean          | YES  |     | NULL    | 
 numeric_or_json       | boolean          | YES  |     | NULL    | 
 bit1+json             | double precision | YES  |     | NULL    | 
 bit1-json             | double precision | YES  |     | NULL    | 
 bit1*json             | double precision | YES  |     | NULL    | 
 bit1/json             | double precision | YES  |     | NULL    | 
 bit1%json             | numeric          | YES  |     | NULL    | 
 bit1^json             | double precision | YES  |     | NULL    | 
 bit1>>json            | "bit"            | YES  |     | NULL    | 
 bit1<<json            | "bit"            | YES  |     | NULL    | 
 bit1|json             | uint8            | YES  |     | NULL    | 
 bit1&json             | uint8            | YES  |     | NULL    | 
 bit1||json            | boolean          | YES  |     | NULL    | 
 bit1&&json            | boolean          | YES  |     | NULL    | 
 bit1_div_json         | numeric          | YES  |     | NULL    | 
 bit1_mod_json         | numeric          | YES  |     | NULL    | 
 bit1_xor_json         | integer          | YES  |     | NULL    | 
 bit1_and_json         | boolean          | YES  |     | NULL    | 
 bit1_or_json          | boolean          | YES  |     | NULL    | 
 bit64+json            | double precision | YES  |     | NULL    | 
 bit64-json            | double precision | YES  |     | NULL    | 
 bit64*json            | double precision | YES  |     | NULL    | 
 bit64/json            | double precision | YES  |     | NULL    | 
 bit64%json            | numeric          | YES  |     | NULL    | 
 bit64^json            | double precision | YES  |     | NULL    | 
 bit64>>json           | "bit"            | YES  |     | NULL    | 
 bit64<<json           | "bit"            | YES  |     | NULL    | 
 bit64|json            | uint8            | YES  |     | NULL    | 
 bit64&json            | uint8            | YES  |     | NULL    | 
 bit64||json           | boolean          | YES  |     | NULL    | 
 bit64&&json           | boolean          | YES  |     | NULL    | 
 bit64_div_json        | numeric          | YES  |     | NULL    | 
 bit64_mod_json        | numeric          | YES  |     | NULL    | 
 bit64_xor_json        | integer          | YES  |     | NULL    | 
 bit64_and_json        | boolean          | YES  |     | NULL    | 
 bit64_or_json         | boolean          | YES  |     | NULL    | 
 boolean+json          | integer          | YES  |     | NULL    | 
 boolean-json          | integer          | YES  |     | NULL    | 
 boolean*json          | integer          | YES  |     | NULL    | 
 boolean/json          | double precision | YES  |     | NULL    | 
 boolean%json          | numeric          | YES  |     | NULL    | 
 boolean>>json         | bigint           | YES  |     | NULL    | 
 boolean<<json         | bigint           | YES  |     | NULL    | 
 boolean|json          | bigint           | YES  |     | NULL    | 
 boolean&json          | bigint           | YES  |     | NULL    | 
 boolean||json         | boolean          | YES  |     | NULL    | 
 boolean&&json         | boolean          | YES  |     | NULL    | 
 boolean_div_json      | numeric          | YES  |     | NULL    | 
 boolean_mod_json      | numeric          | YES  |     | NULL    | 
 boolean_and_json      | boolean          | YES  |     | NULL    | 
 boolean_or_json       | boolean          | YES  |     | NULL    | 
 date+json             | double precision | YES  |     | NULL    | 
 date-json             | double precision | YES  |     | NULL    | 
 date*json             | double precision | YES  |     | NULL    | 
 date/json             | double precision | YES  |     | NULL    | 
 date%json             | numeric          | YES  |     | NULL    | 
 date^json             | double precision | YES  |     | NULL    | 
 date>>json            | bigint           | YES  |     | NULL    | 
 date<<json            | bigint           | YES  |     | NULL    | 
 date|json             | bigint           | YES  |     | NULL    | 
 date&json             | bigint           | YES  |     | NULL    | 
 date||json            | boolean          | YES  |     | NULL    | 
 date&&json            | boolean          | YES  |     | NULL    | 
 date_div_json         | numeric          | YES  |     | NULL    | 
 date_mod_json         | numeric          | YES  |     | NULL    | 
 date_xor_json         | integer          | YES  |     | NULL    | 
 date_and_json         | boolean          | YES  |     | NULL    | 
 date_or_json          | boolean          | YES  |     | NULL    | 
 time+json             | double precision | YES  |     | NULL    | 
 time-json             | double precision | YES  |     | NULL    | 
 time*json             | double precision | YES  |     | NULL    | 
 time/json             | double precision | YES  |     | NULL    | 
 time%json             | numeric          | YES  |     | NULL    | 
 time^json             | double precision | YES  |     | NULL    | 
 time>>json            | bigint           | YES  |     | NULL    | 
 time<<json            | bigint           | YES  |     | NULL    | 
 time|json             | bigint           | YES  |     | NULL    | 
 time&json             | bigint           | YES  |     | NULL    | 
 time||json            | boolean          | YES  |     | NULL    | 
 time&&json            | boolean          | YES  |     | NULL    | 
 time_div_json         | numeric          | YES  |     | NULL    | 
 time_mod_json         | numeric          | YES  |     | NULL    | 
 time_xor_json         | integer          | YES  |     | NULL    | 
 time_and_json         | boolean          | YES  |     | NULL    | 
 time_or_json          | boolean          | YES  |     | NULL    | 
 time(4)+json          | double precision | YES  |     | NULL    | 
 time(4)-json          | double precision | YES  |     | NULL    | 
 time(4)*json          | double precision | YES  |     | NULL    | 
 time(4)/json          | double precision | YES  |     | NULL    | 
 time(4)%json          | numeric          | YES  |     | NULL    | 
 time(4)^json          | double precision | YES  |     | NULL    | 
 time(4)>>json         | bigint           | YES  |     | NULL    | 
 time(4)<<json         | bigint           | YES  |     | NULL    | 
 time(4)|json          | bigint           | YES  |     | NULL    | 
 time(4)&json          | bigint           | YES  |     | NULL    | 
 time(4)||json         | boolean          | YES  |     | NULL    | 
 time(4)&&json         | boolean          | YES  |     | NULL    | 
 time(4)_div_json      | numeric          | YES  |     | NULL    | 
 time(4)_mod_json      | numeric          | YES  |     | NULL    | 
 time(4)_xor_json      | integer          | YES  |     | NULL    | 
 time(4)_and_json      | boolean          | YES  |     | NULL    | 
 time(4)_or_json       | boolean          | YES  |     | NULL    | 
 datetime+json         | double precision | YES  |     | NULL    | 
 datetime-json         | double precision | YES  |     | NULL    | 
 datetime*json         | double precision | YES  |     | NULL    | 
 datetime/json         | double precision | YES  |     | NULL    | 
 datetime%json         | numeric          | YES  |     | NULL    | 
 datetime^json         | double precision | YES  |     | NULL    | 
 datetime>>json        | bigint           | YES  |     | NULL    | 
 datetime<<json        | bigint           | YES  |     | NULL    | 
 datetime|json         | bigint           | YES  |     | NULL    | 
 datetime&json         | bigint           | YES  |     | NULL    | 
 datetime||json        | boolean          | YES  |     | NULL    | 
 datetime&&json        | boolean          | YES  |     | NULL    | 
 datetime_div_json     | numeric          | YES  |     | NULL    | 
 datetime_mod_json     | numeric          | YES  |     | NULL    | 
 datetime_xor_json     | integer          | YES  |     | NULL    | 
 datetime_and_json     | boolean          | YES  |     | NULL    | 
 datetime_or_json      | boolean          | YES  |     | NULL    | 
 datetime(4)+json      | double precision | YES  |     | NULL    | 
 datetime(4)-json      | double precision | YES  |     | NULL    | 
 datetime(4)*json      | double precision | YES  |     | NULL    | 
 datetime(4)/json      | double precision | YES  |     | NULL    | 
 datetime(4)%json      | numeric          | YES  |     | NULL    | 
 datetime(4)^json      | double precision | YES  |     | NULL    | 
 datetime(4)>>json     | bigint           | YES  |     | NULL    | 
 datetime(4)<<json     | bigint           | YES  |     | NULL    | 
 datetime(4)|json      | bigint           | YES  |     | NULL    | 
 datetime(4)&json      | bigint           | YES  |     | NULL    | 
 datetime(4)||json     | boolean          | YES  |     | NULL    | 
 datetime(4)&&json     | boolean          | YES  |     | NULL    | 
 datetime(4)_div_json  | numeric          | YES  |     | NULL    | 
 datetime(4)_mod_json  | numeric          | YES  |     | NULL    | 
 datetime(4)_xor_json  | integer          | YES  |     | NULL    | 
 datetime(4)_and_json  | boolean          | YES  |     | NULL    | 
 datetime(4)_or_json   | boolean          | YES  |     | NULL    | 
 timestamp+json        | double precision | YES  |     | NULL    | 
 timestamp-json        | double precision | YES  |     | NULL    | 
 timestamp*json        | double precision | YES  |     | NULL    | 
 timestamp/json        | double precision | YES  |     | NULL    | 
 timestamp%json        | numeric          | YES  |     | NULL    | 
 timestamp^json        | double precision | YES  |     | NULL    | 
 timestamp>>json       | bigint           | YES  |     | NULL    | 
 timestamp<<json       | bigint           | YES  |     | NULL    | 
 timestamp|json        | bigint           | YES  |     | NULL    | 
 timestamp&json        | bigint           | YES  |     | NULL    | 
 timestamp||json       | boolean          | YES  |     | NULL    | 
 timestamp&&json       | boolean          | YES  |     | NULL    | 
 timestamp_div_json    | numeric          | YES  |     | NULL    | 
 timestamp_mod_json    | numeric          | YES  |     | NULL    | 
 timestamp_xor_json    | integer          | YES  |     | NULL    | 
 timestamp_and_json    | boolean          | YES  |     | NULL    | 
 timestamp_or_json     | boolean          | YES  |     | NULL    | 
 timestamp(4)+json     | double precision | YES  |     | NULL    | 
 timestamp(4)-json     | double precision | YES  |     | NULL    | 
 timestamp(4)*json     | double precision | YES  |     | NULL    | 
 timestamp(4)/json     | double precision | YES  |     | NULL    | 
 timestamp(4)%json     | numeric          | YES  |     | NULL    | 
 timestamp(4)^json     | double precision | YES  |     | NULL    | 
 timestamp(4)>>json    | bigint           | YES  |     | NULL    | 
 timestamp(4)<<json    | bigint           | YES  |     | NULL    | 
 timestamp(4)|json     | bigint           | YES  |     | NULL    | 
 timestamp(4)&json     | bigint           | YES  |     | NULL    | 
 timestamp(4)||json    | boolean          | YES  |     | NULL    | 
 timestamp(4)&&json    | boolean          | YES  |     | NULL    | 
 timestamp(4)_div_json | numeric          | YES  |     | NULL    | 
 timestamp(4)_mod_json | numeric          | YES  |     | NULL    | 
 timestamp(4)_xor_json | integer          | YES  |     | NULL    | 
 timestamp(4)_and_json | boolean          | YES  |     | NULL    | 
 timestamp(4)_or_json  | boolean          | YES  |     | NULL    | 
 year+json             | double precision | YES  |     | NULL    | 
 year-json             | double precision | YES  |     | NULL    | 
 year*json             | double precision | YES  |     | NULL    | 
 year/json             | double precision | YES  |     | NULL    | 
 year%json             | numeric          | YES  |     | NULL    | 
 year^json             | double precision | YES  |     | NULL    | 
 year>>json            | bigint           | YES  |     | NULL    | 
 year<<json            | bigint           | YES  |     | NULL    | 
 year|json             | bigint           | YES  |     | NULL    | 
 year&json             | bigint           | YES  |     | NULL    | 
 year||json            | boolean          | YES  |     | NULL    | 
 year&&json            | boolean          | YES  |     | NULL    | 
 year_div_json         | numeric          | YES  |     | NULL    | 
 year_mod_json         | numeric          | YES  |     | NULL    | 
 year_xor_json         | integer          | YES  |     | NULL    | 
 year_and_json         | boolean          | YES  |     | NULL    | 
 year_or_json          | boolean          | YES  |     | NULL    | 
 char+json             | double precision | YES  |     | NULL    | 
 char-json             | double precision | YES  |     | NULL    | 
 char*json             | double precision | YES  |     | NULL    | 
 char/json             | double precision | YES  |     | NULL    | 
 char%json             | numeric          | YES  |     | NULL    | 
 char^json             | double precision | YES  |     | NULL    | 
 char>>json            | bigint           | YES  |     | NULL    | 
 char<<json            | bigint           | YES  |     | NULL    | 
 char|json             | bigint           | YES  |     | NULL    | 
 char&json             | bigint           | YES  |     | NULL    | 
 char||json            | boolean          | YES  |     | NULL    | 
 char&&json            | boolean          | YES  |     | NULL    | 
 char_div_json         | numeric          | YES  |     | NULL    | 
 char_mod_json         | numeric          | YES  |     | NULL    | 
 char_xor_json         | integer          | YES  |     | NULL    | 
 char_and_json         | boolean          | YES  |     | NULL    | 
 char_or_json          | boolean          | YES  |     | NULL    | 
 varchar+json          | double precision | YES  |     | NULL    | 
 varchar-json          | double precision | YES  |     | NULL    | 
 varchar*json          | double precision | YES  |     | NULL    | 
 varchar/json          | double precision | YES  |     | NULL    | 
 varchar%json          | numeric          | YES  |     | NULL    | 
 varchar^json          | double precision | YES  |     | NULL    | 
 varchar>>json         | bigint           | YES  |     | NULL    | 
 varchar<<json         | bigint           | YES  |     | NULL    | 
 varchar|json          | bigint           | YES  |     | NULL    | 
 varchar&json          | bigint           | YES  |     | NULL    | 
 varchar||json         | boolean          | YES  |     | NULL    | 
 varchar&&json         | boolean          | YES  |     | NULL    | 
 varchar_div_json      | numeric          | YES  |     | NULL    | 
 varchar_mod_json      | numeric          | YES  |     | NULL    | 
 varchar_xor_json      | integer          | YES  |     | NULL    | 
 varchar_and_json      | boolean          | YES  |     | NULL    | 
 varchar_or_json       | boolean          | YES  |     | NULL    | 
 binary+json           | double precision | YES  |     | NULL    | 
 binary-json           | double precision | YES  |     | NULL    | 
 binary*json           | double precision | YES  |     | NULL    | 
 binary/json           | double precision | YES  |     | NULL    | 
 binary^json           | double precision | YES  |     | NULL    | 
 binary||json          | boolean          | YES  |     | NULL    | 
 binary&&json          | boolean          | YES  |     | NULL    | 
 binary_div_json       | numeric          | YES  |     | NULL    | 
 binary_mod_json       | numeric          | YES  |     | NULL    | 
 binary_xor_json       | integer          | YES  |     | NULL    | 
 binary_and_json       | boolean          | YES  |     | NULL    | 
 binary_or_json        | boolean          | YES  |     | NULL    | 
 varbinary+json        | double precision | YES  |     | NULL    | 
 varbinary-json        | double precision | YES  |     | NULL    | 
 varbinary*json        | double precision | YES  |     | NULL    | 
 varbinary/json        | double precision | YES  |     | NULL    | 
 varbinary^json        | double precision | YES  |     | NULL    | 
 varbinary||json       | boolean          | YES  |     | NULL    | 
 varbinary&&json       | boolean          | YES  |     | NULL    | 
 varbinary_div_json    | numeric          | YES  |     | NULL    | 
 varbinary_mod_json    | numeric          | YES  |     | NULL    | 
 varbinary_xor_json    | integer          | YES  |     | NULL    | 
 varbinary_and_json    | boolean          | YES  |     | NULL    | 
 varbinary_or_json     | boolean          | YES  |     | NULL    | 
 tinyblob+json         | double precision | YES  |     | NULL    | 
 tinyblob-json         | double precision | YES  |     | NULL    | 
 tinyblob*json         | double precision | YES  |     | NULL    | 
 tinyblob/json         | double precision | YES  |     | NULL    | 
 tinyblob^json         | double precision | YES  |     | NULL    | 
 tinyblob||json        | boolean          | YES  |     | NULL    | 
 tinyblob&&json        | boolean          | YES  |     | NULL    | 
 tinyblob_div_json     | numeric          | YES  |     | NULL    | 
 tinyblob_mod_json     | numeric          | YES  |     | NULL    | 
 tinyblob_xor_json     | integer          | YES  |     | NULL    | 
 tinyblob_and_json     | boolean          | YES  |     | NULL    | 
 tinyblob_or_json      | boolean          | YES  |     | NULL    | 
 blob+json             | double precision | YES  |     | NULL    | 
 blob-json             | double precision | YES  |     | NULL    | 
 blob*json             | double precision | YES  |     | NULL    | 
 blob/json             | double precision | YES  |     | NULL    | 
 blob^json             | double precision | YES  |     | NULL    | 
 blob||json            | boolean          | YES  |     | NULL    | 
 blob&&json            | boolean          | YES  |     | NULL    | 
 blob_div_json         | numeric          | YES  |     | NULL    | 
 blob_mod_json         | numeric          | YES  |     | NULL    | 
 blob_xor_json         | integer          | YES  |     | NULL    | 
 blob_and_json         | boolean          | YES  |     | NULL    | 
 blob_or_json          | boolean          | YES  |     | NULL    | 
 mediumblob+json       | double precision | YES  |     | NULL    | 
 mediumblob-json       | double precision | YES  |     | NULL    | 
 mediumblob*json       | double precision | YES  |     | NULL    | 
 mediumblob/json       | double precision | YES  |     | NULL    | 
 mediumblob^json       | double precision | YES  |     | NULL    | 
 mediumblob||json      | boolean          | YES  |     | NULL    | 
 mediumblob&&json      | boolean          | YES  |     | NULL    | 
 mediumblob_div_json   | numeric          | YES  |     | NULL    | 
 mediumblob_mod_json   | numeric          | YES  |     | NULL    | 
 mediumblob_xor_json   | integer          | YES  |     | NULL    | 
 mediumblob_and_json   | boolean          | YES  |     | NULL    | 
 mediumblob_or_json    | boolean          | YES  |     | NULL    | 
 longblob+json         | double precision | YES  |     | NULL    | 
 longblob-json         | double precision | YES  |     | NULL    | 
 longblob*json         | double precision | YES  |     | NULL    | 
 longblob/json         | double precision | YES  |     | NULL    | 
 longblob^json         | double precision | YES  |     | NULL    | 
 longblob||json        | boolean          | YES  |     | NULL    | 
 longblob&&json        | boolean          | YES  |     | NULL    | 
 longblob_div_json     | numeric          | YES  |     | NULL    | 
 longblob_mod_json     | numeric          | YES  |     | NULL    | 
 longblob_xor_json     | integer          | YES  |     | NULL    | 
 longblob_and_json     | boolean          | YES  |     | NULL    | 
 longblob_or_json      | boolean          | YES  |     | NULL    | 
 text+json             | double precision | YES  |     | NULL    | 
 text-json             | double precision | YES  |     | NULL    | 
 text*json             | double precision | YES  |     | NULL    | 
 text/json             | double precision | YES  |     | NULL    | 
 text%json             | numeric          | YES  |     | NULL    | 
 text^json             | double precision | YES  |     | NULL    | 
 text>>json            | bigint           | YES  |     | NULL    | 
 text<<json            | bigint           | YES  |     | NULL    | 
 text|json             | bigint           | YES  |     | NULL    | 
 text&json             | bigint           | YES  |     | NULL    | 
 text||json            | boolean          | YES  |     | NULL    | 
 text&&json            | boolean          | YES  |     | NULL    | 
 text_div_json         | numeric          | YES  |     | NULL    | 
 text_mod_json         | numeric          | YES  |     | NULL    | 
 text_xor_json         | integer          | YES  |     | NULL    | 
 text_and_json         | boolean          | YES  |     | NULL    | 
 text_or_json          | boolean          | YES  |     | NULL    | 
 enum_t+json           | double precision | YES  |     | NULL    | 
 enum_t-json           | double precision | YES  |     | NULL    | 
 enum_t*json           | double precision | YES  |     | NULL    | 
 enum_t/json           | double precision | YES  |     | NULL    | 
 enum_t%json           | numeric          | YES  |     | NULL    | 
 enum_t^json           | double precision | YES  |     | NULL    | 
 enum_t>>json          | bigint           | YES  |     | NULL    | 
 enum_t<<json          | bigint           | YES  |     | NULL    | 
 enum_t|json           | bigint           | YES  |     | NULL    | 
 enum_t&json           | bigint           | YES  |     | NULL    | 
 enum_t||json          | boolean          | YES  |     | NULL    | 
 enum_t&&json          | boolean          | YES  |     | NULL    | 
 enum_t_div_json       | numeric          | YES  |     | NULL    | 
 enum_t_mod_json       | numeric          | YES  |     | NULL    | 
 enum_t_xor_json       | integer          | YES  |     | NULL    | 
 enum_t_and_json       | boolean          | YES  |     | NULL    | 
 enum_t_or_json        | boolean          | YES  |     | NULL    | 
 set_t+json            | double precision | YES  |     | NULL    | 
 set_t-json            | double precision | YES  |     | NULL    | 
 set_t*json            | double precision | YES  |     | NULL    | 
 set_t/json            | double precision | YES  |     | NULL    | 
 set_t%json            | numeric          | YES  |     | NULL    | 
 set_t^json            | double precision | YES  |     | NULL    | 
 set_t>>json           | bigint           | YES  |     | NULL    | 
 set_t<<json           | bigint           | YES  |     | NULL    | 
 set_t|json            | bigint           | YES  |     | NULL    | 
 set_t&json            | bigint           | YES  |     | NULL    | 
 set_t||json           | boolean          | YES  |     | NULL    | 
 set_t&&json           | boolean          | YES  |     | NULL    | 
 set_t_div_json        | numeric          | YES  |     | NULL    | 
 set_t_mod_json        | numeric          | YES  |     | NULL    | 
 set_t_xor_json        | integer          | YES  |     | NULL    | 
 set_t_and_json        | boolean          | YES  |     | NULL    | 
 set_t_or_json         | boolean          | YES  |     | NULL    | 
 json+int1             | double precision | YES  |     | NULL    | 
 json-int1             | double precision | YES  |     | NULL    | 
 json*int1             | double precision | YES  |     | NULL    | 
 json/int1             | double precision | YES  |     | NULL    | 
 json%int1             | tinyint          | YES  |     | NULL    | 
 json^int1             | double precision | YES  |     | NULL    | 
 json>>int1            | bigint           | YES  |     | NULL    | 
 json<<int1            | bigint           | YES  |     | NULL    | 
 json|int1             | tinyint          | YES  |     | NULL    | 
 json&int1             | tinyint          | YES  |     | NULL    | 
 json||int1            | boolean          | YES  |     | NULL    | 
 json&&int1            | boolean          | YES  |     | NULL    | 
 json_div_int1         | numeric          | YES  |     | NULL    | 
 json_mod_int1         | numeric          | YES  |     | NULL    | 
 json_xor_int1         | integer          | YES  |     | NULL    | 
 json_and_int1         | boolean          | YES  |     | NULL    | 
 json_or_int1          | boolean          | YES  |     | NULL    | 
 json+uint1            | double precision | YES  |     | NULL    | 
 json-uint1            | double precision | YES  |     | NULL    | 
 json*uint1            | double precision | YES  |     | NULL    | 
 json/uint1            | double precision | YES  |     | NULL    | 
 json%uint1            | uint1            | YES  |     | NULL    | 
 json^uint1            | double precision | YES  |     | NULL    | 
 json>>uint1           | bigint           | YES  |     | NULL    | 
 json<<uint1           | bigint           | YES  |     | NULL    | 
 json|uint1            | uint1            | YES  |     | NULL    | 
 json&uint1            | uint1            | YES  |     | NULL    | 
 json||uint1           | boolean          | YES  |     | NULL    | 
 json&&uint1           | boolean          | YES  |     | NULL    | 
 json_div_uint1        | numeric          | YES  |     | NULL    | 
 json_mod_uint1        | numeric          | YES  |     | NULL    | 
 json_xor_uint1        | integer          | YES  |     | NULL    | 
 json_and_uint1        | boolean          | YES  |     | NULL    | 
 json_or_uint1         | boolean          | YES  |     | NULL    | 
 json+int2             | double precision | YES  |     | NULL    | 
 json-int2             | double precision | YES  |     | NULL    | 
 json*int2             | double precision | YES  |     | NULL    | 
 json/int2             | double precision | YES  |     | NULL    | 
 json%int2             | smallint         | YES  |     | NULL    | 
 json^int2             | double precision | YES  |     | NULL    | 
 json>>int2            | bigint           | YES  |     | NULL    | 
 json<<int2            | bigint           | YES  |     | NULL    | 
 json|int2             | smallint         | YES  |     | NULL    | 
 json&int2             | smallint         | YES  |     | NULL    | 
 json||int2            | boolean          | YES  |     | NULL    | 
 json&&int2            | boolean          | YES  |     | NULL    | 
 json_div_int2         | numeric          | YES  |     | NULL    | 
 json_mod_int2         | numeric          | YES  |     | NULL    | 
 json_xor_int2         | integer          | YES  |     | NULL    | 
 json_and_int2         | boolean          | YES  |     | NULL    | 
 json_or_int2          | boolean          | YES  |     | NULL    | 
 json+uint2            | double precision | YES  |     | NULL    | 
 json-uint2            | double precision | YES  |     | NULL    | 
 json*uint2            | double precision | YES  |     | NULL    | 
 json/uint2            | double precision | YES  |     | NULL    | 
 json%uint2            | smallint         | YES  |     | NULL    | 
 json^uint2            | double precision | YES  |     | NULL    | 
 json>>uint2           | bigint           | YES  |     | NULL    | 
 json<<uint2           | bigint           | YES  |     | NULL    | 
 json|uint2            | uint2            | YES  |     | NULL    | 
 json&uint2            | uint2            | YES  |     | NULL    | 
 json||uint2           | boolean          | YES  |     | NULL    | 
 json&&uint2           | boolean          | YES  |     | NULL    | 
 json_div_uint2        | numeric          | YES  |     | NULL    | 
 json_mod_uint2        | numeric          | YES  |     | NULL    | 
 json_xor_uint2        | integer          | YES  |     | NULL    | 
 json_and_uint2        | boolean          | YES  |     | NULL    | 
 json_or_uint2         | boolean          | YES  |     | NULL    | 
 json+int4             | double precision | YES  |     | NULL    | 
 json-int4             | double precision | YES  |     | NULL    | 
 json*int4             | double precision | YES  |     | NULL    | 
 json/int4             | double precision | YES  |     | NULL    | 
 json%int4             | integer          | YES  |     | NULL    | 
 json^int4             | double precision | YES  |     | NULL    | 
 json>>int4            | bigint           | YES  |     | NULL    | 
 json<<int4            | bigint           | YES  |     | NULL    | 
 json|int4             | integer          | YES  |     | NULL    | 
 json&int4             | integer          | YES  |     | NULL    | 
 json||int4            | boolean          | YES  |     | NULL    | 
 json&&int4            | boolean          | YES  |     | NULL    | 
 json_div_int4         | numeric          | YES  |     | NULL    | 
 json_mod_int4         | numeric          | YES  |     | NULL    | 
 json_xor_int4         | integer          | YES  |     | NULL    | 
 json_and_int4         | boolean          | YES  |     | NULL    | 
 json_or_int4          | boolean          | YES  |     | NULL    | 
 json+uint4            | double precision | YES  |     | NULL    | 
 json-uint4            | double precision | YES  |     | NULL    | 
 json*uint4            | double precision | YES  |     | NULL    | 
 json/uint4            | double precision | YES  |     | NULL    | 
 json%uint4            | integer          | YES  |     | NULL    | 
 json^uint4            | double precision | YES  |     | NULL    | 
 json>>uint4           | bigint           | YES  |     | NULL    | 
 json<<uint4           | bigint           | YES  |     | NULL    | 
 json|uint4            | uint4            | YES  |     | NULL    | 
 json&uint4            | uint4            | YES  |     | NULL    | 
 json||uint4           | boolean          | YES  |     | NULL    | 
 json&&uint4           | boolean          | YES  |     | NULL    | 
 json_div_uint4        | numeric          | YES  |     | NULL    | 
 json_mod_uint4        | numeric          | YES  |     | NULL    | 
 json_xor_uint4        | integer          | YES  |     | NULL    | 
 json_and_uint4        | boolean          | YES  |     | NULL    | 
 json_or_uint4         | boolean          | YES  |     | NULL    | 
 json+int8             | double precision | YES  |     | NULL    | 
 json-int8             | double precision | YES  |     | NULL    | 
 json*int8             | double precision | YES  |     | NULL    | 
 json/int8             | double precision | YES  |     | NULL    | 
 json%int8             | bigint           | YES  |     | NULL    | 
 json^int8             | double precision | YES  |     | NULL    | 
 json>>int8            | bigint           | YES  |     | NULL    | 
 json<<int8            | bigint           | YES  |     | NULL    | 
 json|int8             | bigint           | YES  |     | NULL    | 
 json&int8             | bigint           | YES  |     | NULL    | 
 json||int8            | boolean          | YES  |     | NULL    | 
 json&&int8            | boolean          | YES  |     | NULL    | 
 json_div_int8         | numeric          | YES  |     | NULL    | 
 json_mod_int8         | numeric          | YES  |     | NULL    | 
 json_xor_int8         | integer          | YES  |     | NULL    | 
 json_and_int8         | boolean          | YES  |     | NULL    | 
 json_or_int8          | boolean          | YES  |     | NULL    | 
 json+uint8            | double precision | YES  |     | NULL    | 
 json-uint8            | double precision | YES  |     | NULL    | 
 json*uint8            | double precision | YES  |     | NULL    | 
 json/uint8            | double precision | YES  |     | NULL    | 
 json%uint8            | bigint           | YES  |     | NULL    | 
 json^uint8            | double precision | YES  |     | NULL    | 
 json>>uint8           | bigint           | YES  |     | NULL    | 
 json<<uint8           | bigint           | YES  |     | NULL    | 
 json|uint8            | uint8            | YES  |     | NULL    | 
 json&uint8            | uint8            | YES  |     | NULL    | 
 json||uint8           | boolean          | YES  |     | NULL    | 
 json&&uint8           | boolean          | YES  |     | NULL    | 
 json_div_uint8        | numeric          | YES  |     | NULL    | 
 json_mod_uint8        | numeric          | YES  |     | NULL    | 
 json_xor_uint8        | integer          | YES  |     | NULL    | 
 json_and_uint8        | boolean          | YES  |     | NULL    | 
 json_or_uint8         | boolean          | YES  |     | NULL    | 
 json+float4           | double precision | YES  |     | NULL    | 
 json-float4           | double precision | YES  |     | NULL    | 
 json*float4           | double precision | YES  |     | NULL    | 
 json/float4           | double precision | YES  |     | NULL    | 
 json%float4           | numeric          | YES  |     | NULL    | 
 json^float4           | double precision | YES  |     | NULL    | 
 json>>float4          | bigint           | YES  |     | NULL    | 
 json<<float4          | bigint           | YES  |     | NULL    | 
 json|float4           | bigint           | YES  |     | NULL    | 
 json&float4           | bigint           | YES  |     | NULL    | 
 json||float4          | boolean          | YES  |     | NULL    | 
 json&&float4          | boolean          | YES  |     | NULL    | 
 json_div_float4       | numeric          | YES  |     | NULL    | 
 json_mod_float4       | numeric          | YES  |     | NULL    | 
 json_xor_float4       | integer          | YES  |     | NULL    | 
 json_and_float4       | boolean          | YES  |     | NULL    | 
 json_or_float4        | boolean          | YES  |     | NULL    | 
 json+float8           | double precision | YES  |     | NULL    | 
 json-float8           | double precision | YES  |     | NULL    | 
 json*float8           | double precision | YES  |     | NULL    | 
 json/float8           | double precision | YES  |     | NULL    | 
 json%float8           | numeric          | YES  |     | NULL    | 
 json^float8           | double precision | YES  |     | NULL    | 
 json>>float8          | bigint           | YES  |     | NULL    | 
 json<<float8          | bigint           | YES  |     | NULL    | 
 json|float8           | bigint           | YES  |     | NULL    | 
 json&float8           | bigint           | YES  |     | NULL    | 
 json||float8          | boolean          | YES  |     | NULL    | 
 json&&float8          | boolean          | YES  |     | NULL    | 
 json_div_float8       | numeric          | YES  |     | NULL    | 
 json_mod_float8       | numeric          | YES  |     | NULL    | 
 json_xor_float8       | integer          | YES  |     | NULL    | 
 json_and_float8       | boolean          | YES  |     | NULL    | 
 json_or_float8        | boolean          | YES  |     | NULL    | 
 json+numeric          | double precision | YES  |     | NULL    | 
 json-numeric          | double precision | YES  |     | NULL    | 
 json*numeric          | double precision | YES  |     | NULL    | 
 json/numeric          | double precision | YES  |     | NULL    | 
 json%numeric          | numeric          | YES  |     | NULL    | 
 json^numeric          | double precision | YES  |     | NULL    | 
 json>>numeric         | bigint           | YES  |     | NULL    | 
 json<<numeric         | bigint           | YES  |     | NULL    | 
 json|numeric          | bigint           | YES  |     | NULL    | 
 json&numeric          | bigint           | YES  |     | NULL    | 
 json||numeric         | boolean          | YES  |     | NULL    | 
 json&&numeric         | boolean          | YES  |     | NULL    | 
 json_div_numeric      | numeric          | YES  |     | NULL    | 
 json_mod_numeric      | numeric          | YES  |     | NULL    | 
 json_xor_numeric      | integer          | YES  |     | NULL    | 
 json_and_numeric      | boolean          | YES  |     | NULL    | 
 json_or_numeric       | boolean          | YES  |     | NULL    | 
 json+bit1             | double precision | YES  |     | NULL    | 
 json-bit1             | double precision | YES  |     | NULL    | 
 json*bit1             | double precision | YES  |     | NULL    | 
 json/bit1             | double precision | YES  |     | NULL    | 
 json%bit1             | numeric          | YES  |     | NULL    | 
 json^bit1             | double precision | YES  |     | NULL    | 
 json|bit1             | uint8            | YES  |     | NULL    | 
 json&bit1             | uint8            | YES  |     | NULL    | 
 json||bit1            | boolean          | YES  |     | NULL    | 
 json&&bit1            | boolean          | YES  |     | NULL    | 
 json_div_bit1         | numeric          | YES  |     | NULL    | 
 json_mod_bit1         | numeric          | YES  |     | NULL    | 
 json_xor_bit1         | integer          | YES  |     | NULL    | 
 json_and_bit1         | boolean          | YES  |     | NULL    | 
 json_or_bit1          | boolean          | YES  |     | NULL    | 
 json+bit64            | double precision | YES  |     | NULL    | 
 json-bit64            | double precision | YES  |     | NULL    | 
 json*bit64            | double precision | YES  |     | NULL    | 
 json/bit64            | double precision | YES  |     | NULL    | 
 json%bit64            | numeric          | YES  |     | NULL    | 
 json^bit64            | double precision | YES  |     | NULL    | 
 json|bit64            | uint8            | YES  |     | NULL    | 
 json&bit64            | uint8            | YES  |     | NULL    | 
 json||bit64           | boolean          | YES  |     | NULL    | 
 json&&bit64           | boolean          | YES  |     | NULL    | 
 json_div_bit64        | numeric          | YES  |     | NULL    | 
 json_mod_bit64        | numeric          | YES  |     | NULL    | 
 json_xor_bit64        | integer          | YES  |     | NULL    | 
 json_and_bit64        | boolean          | YES  |     | NULL    | 
 json_or_bit64         | boolean          | YES  |     | NULL    | 
 json+boolean          | integer          | YES  |     | NULL    | 
 json-boolean          | integer          | YES  |     | NULL    | 
 json*boolean          | integer          | YES  |     | NULL    | 
 json/boolean          | double precision | YES  |     | NULL    | 
 json%boolean          | numeric          | YES  |     | NULL    | 
 json>>boolean         | bigint           | YES  |     | NULL    | 
 json<<boolean         | bigint           | YES  |     | NULL    | 
 json|boolean          | bigint           | YES  |     | NULL    | 
 json&boolean          | bigint           | YES  |     | NULL    | 
 json||boolean         | boolean          | YES  |     | NULL    | 
 json&&boolean         | boolean          | YES  |     | NULL    | 
 json_div_boolean      | numeric          | YES  |     | NULL    | 
 json_mod_boolean      | numeric          | YES  |     | NULL    | 
 json_and_boolean      | boolean          | YES  |     | NULL    | 
 json_or_boolean       | boolean          | YES  |     | NULL    | 
 json+date             | double precision | YES  |     | NULL    | 
 json-date             | double precision | YES  |     | NULL    | 
 json*date             | double precision | YES  |     | NULL    | 
 json/date             | double precision | YES  |     | NULL    | 
 json%date             | numeric          | YES  |     | NULL    | 
 json^date             | double precision | YES  |     | NULL    | 
 json>>date            | bigint           | YES  |     | NULL    | 
 json<<date            | bigint           | YES  |     | NULL    | 
 json|date             | bigint           | YES  |     | NULL    | 
 json&date             | bigint           | YES  |     | NULL    | 
 json||date            | boolean          | YES  |     | NULL    | 
 json&&date            | boolean          | YES  |     | NULL    | 
 json_div_date         | numeric          | YES  |     | NULL    | 
 json_mod_date         | numeric          | YES  |     | NULL    | 
 json_xor_date         | integer          | YES  |     | NULL    | 
 json_and_date         | boolean          | YES  |     | NULL    | 
 json_or_date          | boolean          | YES  |     | NULL    | 
 json+time             | double precision | YES  |     | NULL    | 
 json-time             | double precision | YES  |     | NULL    | 
 json*time             | double precision | YES  |     | NULL    | 
 json/time             | double precision | YES  |     | NULL    | 
 json%time             | numeric          | YES  |     | NULL    | 
 json^time             | double precision | YES  |     | NULL    | 
 json>>time            | bigint           | YES  |     | NULL    | 
 json<<time            | bigint           | YES  |     | NULL    | 
 json|time             | bigint           | YES  |     | NULL    | 
 json&time             | bigint           | YES  |     | NULL    | 
 json||time            | boolean          | YES  |     | NULL    | 
 json&&time            | boolean          | YES  |     | NULL    | 
 json_div_time         | numeric          | YES  |     | NULL    | 
 json_mod_time         | numeric          | YES  |     | NULL    | 
 json_xor_time         | integer          | YES  |     | NULL    | 
 json_and_time         | boolean          | YES  |     | NULL    | 
 json_or_time          | boolean          | YES  |     | NULL    | 
 json+time(4)          | double precision | YES  |     | NULL    | 
 json-time(4)          | double precision | YES  |     | NULL    | 
 json*time(4)          | double precision | YES  |     | NULL    | 
 json/time(4)          | double precision | YES  |     | NULL    | 
 json%time(4)          | numeric          | YES  |     | NULL    | 
 json^time(4)          | double precision | YES  |     | NULL    | 
 json>>time(4)         | bigint           | YES  |     | NULL    | 
 json<<time(4)         | bigint           | YES  |     | NULL    | 
 json|time(4)          | bigint           | YES  |     | NULL    | 
 json&time(4)          | bigint           | YES  |     | NULL    | 
 json||time(4)         | boolean          | YES  |     | NULL    | 
 json&&time(4)         | boolean          | YES  |     | NULL    | 
 json_div_time(4)      | numeric          | YES  |     | NULL    | 
 json_mod_time(4)      | numeric          | YES  |     | NULL    | 
 json_xor_time(4)      | integer          | YES  |     | NULL    | 
 json_and_time(4)      | boolean          | YES  |     | NULL    | 
 json_or_time(4)       | boolean          | YES  |     | NULL    | 
 json+datetime         | double precision | YES  |     | NULL    | 
 json-datetime         | double precision | YES  |     | NULL    | 
 json*datetime         | double precision | YES  |     | NULL    | 
 json/datetime         | double precision | YES  |     | NULL    | 
 json%datetime         | numeric          | YES  |     | NULL    | 
 json^datetime         | double precision | YES  |     | NULL    | 
 json>>datetime        | bigint           | YES  |     | NULL    | 
 json<<datetime        | bigint           | YES  |     | NULL    | 
 json|datetime         | bigint           | YES  |     | NULL    | 
 json&datetime         | bigint           | YES  |     | NULL    | 
 json||datetime        | boolean          | YES  |     | NULL    | 
 json&&datetime        | boolean          | YES  |     | NULL    | 
 json_div_datetime     | numeric          | YES  |     | NULL    | 
 json_mod_datetime     | numeric          | YES  |     | NULL    | 
 json_xor_datetime     | integer          | YES  |     | NULL    | 
 json_and_datetime     | boolean          | YES  |     | NULL    | 
 json_or_datetime      | boolean          | YES  |     | NULL    | 
 json+datetime(4)      | double precision | YES  |     | NULL    | 
 json-datetime(4)      | double precision | YES  |     | NULL    | 
 json*datetime(4)      | double precision | YES  |     | NULL    | 
 json/datetime(4)      | double precision | YES  |     | NULL    | 
 json%datetime(4)      | numeric          | YES  |     | NULL    | 
 json^datetime(4)      | double precision | YES  |     | NULL    | 
 json>>datetime(4)     | bigint           | YES  |     | NULL    | 
 json<<datetime(4)     | bigint           | YES  |     | NULL    | 
 json|datetime(4)      | bigint           | YES  |     | NULL    | 
 json&datetime(4)      | bigint           | YES  |     | NULL    | 
 json||datetime(4)     | boolean          | YES  |     | NULL    | 
 json&&datetime(4)     | boolean          | YES  |     | NULL    | 
 json_div_datetime(4)  | numeric          | YES  |     | NULL    | 
 json_mod_datetime(4)  | numeric          | YES  |     | NULL    | 
 json_xor_datetime(4)  | integer          | YES  |     | NULL    | 
 json_and_datetime(4)  | boolean          | YES  |     | NULL    | 
 json_or_datetime(4)   | boolean          | YES  |     | NULL    | 
 json+timestamp        | double precision | YES  |     | NULL    | 
 json-timestamp        | double precision | YES  |     | NULL    | 
 json*timestamp        | double precision | YES  |     | NULL    | 
 json/timestamp        | double precision | YES  |     | NULL    | 
 json%timestamp        | numeric          | YES  |     | NULL    | 
 json^timestamp        | double precision | YES  |     | NULL    | 
 json>>timestamp       | bigint           | YES  |     | NULL    | 
 json<<timestamp       | bigint           | YES  |     | NULL    | 
 json|timestamp        | bigint           | YES  |     | NULL    | 
 json&timestamp        | bigint           | YES  |     | NULL    | 
 json||timestamp       | boolean          | YES  |     | NULL    | 
 json&&timestamp       | boolean          | YES  |     | NULL    | 
 json_div_timestamp    | numeric          | YES  |     | NULL    | 
 json_mod_timestamp    | numeric          | YES  |     | NULL    | 
 json_xor_timestamp    | integer          | YES  |     | NULL    | 
 json_and_timestamp    | boolean          | YES  |     | NULL    | 
 json_or_timestamp     | boolean          | YES  |     | NULL    | 
 json+timestamp(4)     | double precision | YES  |     | NULL    | 
 json-timestamp(4)     | double precision | YES  |     | NULL    | 
 json*timestamp(4)     | double precision | YES  |     | NULL    | 
 json/timestamp(4)     | double precision | YES  |     | NULL    | 
 json%timestamp(4)     | numeric          | YES  |     | NULL    | 
 json^timestamp(4)     | double precision | YES  |     | NULL    | 
 json>>timestamp(4)    | bigint           | YES  |     | NULL    | 
 json<<timestamp(4)    | bigint           | YES  |     | NULL    | 
 json|timestamp(4)     | bigint           | YES  |     | NULL    | 
 json&timestamp(4)     | bigint           | YES  |     | NULL    | 
 json||timestamp(4)    | boolean          | YES  |     | NULL    | 
 json&&timestamp(4)    | boolean          | YES  |     | NULL    | 
 json_div_timestamp(4) | numeric          | YES  |     | NULL    | 
 json_mod_timestamp(4) | numeric          | YES  |     | NULL    | 
 json_xor_timestamp(4) | integer          | YES  |     | NULL    | 
 json_and_timestamp(4) | boolean          | YES  |     | NULL    | 
 json_or_timestamp(4)  | boolean          | YES  |     | NULL    | 
 json+year             | double precision | YES  |     | NULL    | 
 json-year             | double precision | YES  |     | NULL    | 
 json*year             | double precision | YES  |     | NULL    | 
 json/year             | double precision | YES  |     | NULL    | 
 json%year             | numeric          | YES  |     | NULL    | 
 json^year             | double precision | YES  |     | NULL    | 
 json>>year            | bigint           | YES  |     | NULL    | 
 json<<year            | bigint           | YES  |     | NULL    | 
 json|year             | bigint           | YES  |     | NULL    | 
 json&year             | bigint           | YES  |     | NULL    | 
 json||year            | boolean          | YES  |     | NULL    | 
 json&&year            | boolean          | YES  |     | NULL    | 
 json_div_year         | numeric          | YES  |     | NULL    | 
 json_mod_year         | numeric          | YES  |     | NULL    | 
 json_xor_year         | integer          | YES  |     | NULL    | 
 json_and_year         | boolean          | YES  |     | NULL    | 
 json_or_year          | boolean          | YES  |     | NULL    | 
 json+char             | double precision | YES  |     | NULL    | 
 json-char             | double precision | YES  |     | NULL    | 
 json*char             | double precision | YES  |     | NULL    | 
 json/char             | double precision | YES  |     | NULL    | 
 json%char             | numeric          | YES  |     | NULL    | 
 json^char             | double precision | YES  |     | NULL    | 
 json>>char            | bigint           | YES  |     | NULL    | 
 json<<char            | bigint           | YES  |     | NULL    | 
 json|char             | bigint           | YES  |     | NULL    | 
 json&char             | bigint           | YES  |     | NULL    | 
 json||char            | boolean          | YES  |     | NULL    | 
 json&&char            | boolean          | YES  |     | NULL    | 
 json_div_char         | numeric          | YES  |     | NULL    | 
 json_mod_char         | numeric          | YES  |     | NULL    | 
 json_xor_char         | integer          | YES  |     | NULL    | 
 json_and_char         | boolean          | YES  |     | NULL    | 
 json_or_char          | boolean          | YES  |     | NULL    | 
 json+varchar          | double precision | YES  |     | NULL    | 
 json-varchar          | double precision | YES  |     | NULL    | 
 json*varchar          | double precision | YES  |     | NULL    | 
 json/varchar          | double precision | YES  |     | NULL    | 
 json%varchar          | numeric          | YES  |     | NULL    | 
 json^varchar          | double precision | YES  |     | NULL    | 
 json>>varchar         | bigint           | YES  |     | NULL    | 
 json<<varchar         | bigint           | YES  |     | NULL    | 
 json|varchar          | bigint           | YES  |     | NULL    | 
 json&varchar          | bigint           | YES  |     | NULL    | 
 json||varchar         | boolean          | YES  |     | NULL    | 
 json&&varchar         | boolean          | YES  |     | NULL    | 
 json_div_varchar      | numeric          | YES  |     | NULL    | 
 json_mod_varchar      | numeric          | YES  |     | NULL    | 
 json_xor_varchar      | integer          | YES  |     | NULL    | 
 json_and_varchar      | boolean          | YES  |     | NULL    | 
 json_or_varchar       | boolean          | YES  |     | NULL    | 
 json+binary           | double precision | YES  |     | NULL    | 
 json-binary           | double precision | YES  |     | NULL    | 
 json*binary           | double precision | YES  |     | NULL    | 
 json/binary           | double precision | YES  |     | NULL    | 
 json^binary           | double precision | YES  |     | NULL    | 
 json||binary          | boolean          | YES  |     | NULL    | 
 json&&binary          | boolean          | YES  |     | NULL    | 
 json_div_binary       | numeric          | YES  |     | NULL    | 
 json_mod_binary       | numeric          | YES  |     | NULL    | 
 json_xor_binary       | integer          | YES  |     | NULL    | 
 json_and_binary       | boolean          | YES  |     | NULL    | 
 json_or_binary        | boolean          | YES  |     | NULL    | 
 json+varbinary        | double precision | YES  |     | NULL    | 
 json-varbinary        | double precision | YES  |     | NULL    | 
 json*varbinary        | double precision | YES  |     | NULL    | 
 json/varbinary        | double precision | YES  |     | NULL    | 
 json^varbinary        | double precision | YES  |     | NULL    | 
 json||varbinary       | boolean          | YES  |     | NULL    | 
 json&&varbinary       | boolean          | YES  |     | NULL    | 
 json_div_varbinary    | numeric          | YES  |     | NULL    | 
 json_mod_varbinary    | numeric          | YES  |     | NULL    | 
 json_xor_varbinary    | integer          | YES  |     | NULL    | 
 json_and_varbinary    | boolean          | YES  |     | NULL    | 
 json_or_varbinary     | boolean          | YES  |     | NULL    | 
 json+tinyblob         | double precision | YES  |     | NULL    | 
 json-tinyblob         | double precision | YES  |     | NULL    | 
 json*tinyblob         | double precision | YES  |     | NULL    | 
 json/tinyblob         | double precision | YES  |     | NULL    | 
 json^tinyblob         | double precision | YES  |     | NULL    | 
 json||tinyblob        | boolean          | YES  |     | NULL    | 
 json&&tinyblob        | boolean          | YES  |     | NULL    | 
 json_div_tinyblob     | numeric          | YES  |     | NULL    | 
 json_mod_tinyblob     | numeric          | YES  |     | NULL    | 
 json_xor_tinyblob     | integer          | YES  |     | NULL    | 
 json_and_tinyblob     | boolean          | YES  |     | NULL    | 
 json_or_tinyblob      | boolean          | YES  |     | NULL    | 
 json+blob             | double precision | YES  |     | NULL    | 
 json-blob             | double precision | YES  |     | NULL    | 
 json*blob             | double precision | YES  |     | NULL    | 
 json/blob             | double precision | YES  |     | NULL    | 
 json^blob             | double precision | YES  |     | NULL    | 
 json||blob            | boolean          | YES  |     | NULL    | 
 json&&blob            | boolean          | YES  |     | NULL    | 
 json_div_blob         | numeric          | YES  |     | NULL    | 
 json_mod_blob         | numeric          | YES  |     | NULL    | 
 json_xor_blob         | integer          | YES  |     | NULL    | 
 json_and_blob         | boolean          | YES  |     | NULL    | 
 json_or_blob          | boolean          | YES  |     | NULL    | 
 json+mediumblob       | double precision | YES  |     | NULL    | 
 json-mediumblob       | double precision | YES  |     | NULL    | 
 json*mediumblob       | double precision | YES  |     | NULL    | 
 json/mediumblob       | double precision | YES  |     | NULL    | 
 json^mediumblob       | double precision | YES  |     | NULL    | 
 json||mediumblob      | boolean          | YES  |     | NULL    | 
 json&&mediumblob      | boolean          | YES  |     | NULL    | 
 json_div_mediumblob   | numeric          | YES  |     | NULL    | 
 json_mod_mediumblob   | numeric          | YES  |     | NULL    | 
 json_xor_mediumblob   | integer          | YES  |     | NULL    | 
 json_and_mediumblob   | boolean          | YES  |     | NULL    | 
 json_or_mediumblob    | boolean          | YES  |     | NULL    | 
 json+longblob         | double precision | YES  |     | NULL    | 
 json-longblob         | double precision | YES  |     | NULL    | 
 json*longblob         | double precision | YES  |     | NULL    | 
 json/longblob         | double precision | YES  |     | NULL    | 
 json^longblob         | double precision | YES  |     | NULL    | 
 json||longblob        | boolean          | YES  |     | NULL    | 
 json&&longblob        | boolean          | YES  |     | NULL    | 
 json_div_longblob     | numeric          | YES  |     | NULL    | 
 json_mod_longblob     | numeric          | YES  |     | NULL    | 
 json_xor_longblob     | integer          | YES  |     | NULL    | 
 json_and_longblob     | boolean          | YES  |     | NULL    | 
 json_or_longblob      | boolean          | YES  |     | NULL    | 
 json+text             | double precision | YES  |     | NULL    | 
 json-text             | double precision | YES  |     | NULL    | 
 json*text             | double precision | YES  |     | NULL    | 
 json/text             | double precision | YES  |     | NULL    | 
 json%text             | numeric          | YES  |     | NULL    | 
 json^text             | double precision | YES  |     | NULL    | 
 json>>text            | bigint           | YES  |     | NULL    | 
 json<<text            | bigint           | YES  |     | NULL    | 
 json|text             | bigint           | YES  |     | NULL    | 
 json&text             | bigint           | YES  |     | NULL    | 
 json||text            | boolean          | YES  |     | NULL    | 
 json&&text            | boolean          | YES  |     | NULL    | 
 json_div_text         | numeric          | YES  |     | NULL    | 
 json_mod_text         | numeric          | YES  |     | NULL    | 
 json_xor_text         | integer          | YES  |     | NULL    | 
 json_and_text         | boolean          | YES  |     | NULL    | 
 json_or_text          | boolean          | YES  |     | NULL    | 
 json+enum_t           | double precision | YES  |     | NULL    | 
 json-enum_t           | double precision | YES  |     | NULL    | 
 json*enum_t           | double precision | YES  |     | NULL    | 
 json/enum_t           | double precision | YES  |     | NULL    | 
 json%enum_t           | numeric          | YES  |     | NULL    | 
 json^enum_t           | double precision | YES  |     | NULL    | 
 json>>enum_t          | bigint           | YES  |     | NULL    | 
 json<<enum_t          | bigint           | YES  |     | NULL    | 
 json|enum_t           | bigint           | YES  |     | NULL    | 
 json&enum_t           | bigint           | YES  |     | NULL    | 
 json||enum_t          | boolean          | YES  |     | NULL    | 
 json&&enum_t          | boolean          | YES  |     | NULL    | 
 json_div_enum_t       | numeric          | YES  |     | NULL    | 
 json_mod_enum_t       | numeric          | YES  |     | NULL    | 
 json_xor_enum_t       | integer          | YES  |     | NULL    | 
 json_and_enum_t       | boolean          | YES  |     | NULL    | 
 json_or_enum_t        | boolean          | YES  |     | NULL    | 
 json+set_t            | double precision | YES  |     | NULL    | 
 json-set_t            | double precision | YES  |     | NULL    | 
 json*set_t            | double precision | YES  |     | NULL    | 
 json/set_t            | double precision | YES  |     | NULL    | 
 json%set_t            | numeric          | YES  |     | NULL    | 
 json^set_t            | double precision | YES  |     | NULL    | 
 json>>set_t           | bigint           | YES  |     | NULL    | 
 json<<set_t           | bigint           | YES  |     | NULL    | 
 json|set_t            | bigint           | YES  |     | NULL    | 
 json&set_t            | bigint           | YES  |     | NULL    | 
 json||set_t           | boolean          | YES  |     | NULL    | 
 json&&set_t           | boolean          | YES  |     | NULL    | 
 json_div_set_t        | numeric          | YES  |     | NULL    | 
 json_mod_set_t        | numeric          | YES  |     | NULL    | 
 json_xor_set_t        | integer          | YES  |     | NULL    | 
 json_and_set_t        | boolean          | YES  |     | NULL    | 
 json_or_set_t         | boolean          | YES  |     | NULL    | 
 json+json             | double precision | YES  |     | NULL    | 
 json-json             | double precision | YES  |     | NULL    | 
 json*json             | double precision | YES  |     | NULL    | 
 json/json             | double precision | YES  |     | NULL    | 
 json%json             | numeric          | YES  |     | NULL    | 
 json^json             | double precision | YES  |     | NULL    | 
 json>>json            | bigint           | YES  |     | NULL    | 
 json<<json            | bigint           | YES  |     | NULL    | 
 json|json             | bigint           | YES  |     | NULL    | 
 json&json             | bigint           | YES  |     | NULL    | 
 json||json            | boolean          | YES  |     | NULL    | 
 json&&json            | boolean          | YES  |     | NULL    | 
 json_div_json         | numeric          | YES  |     | NULL    | 
 json_mod_json         | numeric          | YES  |     | NULL    | 
 json_xor_json         | integer          | YES  |     | NULL    | 
 json_and_json         | boolean          | YES  |     | NULL    | 
 json_or_json          | boolean          | YES  |     | NULL    | 
 +json                 | json             | YES  |     | NULL    | 
 -json                 | double precision | YES  |     | NULL    | 
 ~json                 | uint8            | YES  |     | NULL    | 
 @json                 | double precision | YES  |     | NULL    | 
 !json                 | boolean          | YES  |     | NULL    | 
 not_json              | boolean          | YES  |     | NULL    | 
(1077 rows)

-- test value
delete from test_json_type;
delete from test_json_table;
insert into test_json_type values(null);
insert into test_json_table values(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                   b'1', b'111', true,
                                   '2023-02-05', '19:10:50', '19:10:50.3456', '2023-02-05 19:10:50', '2023-02-05 19:10:50.456', '2023-02-05 19:10:50', '2023-02-05 19:10:50.456', '2023',
                                   '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a', '1.23a',
                                   'a', 'a,c',
                                   json_object('a', 1, 'b', 2));
UPDATE test_json_type, test_json_table SET test_json_type.`int1+json` = test_json_table.`int1` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1+json
UPDATE test_json_type, test_json_table SET test_json_type.`int1-json` = test_json_table.`int1` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1-json
UPDATE test_json_type, test_json_table SET test_json_type.`int1*json` = test_json_table.`int1` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1*json
UPDATE test_json_type, test_json_table SET test_json_type.`int1/json` = test_json_table.`int1` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1/json
UPDATE test_json_type, test_json_table SET test_json_type.`int1%json` = test_json_table.`int1` % test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1%json
UPDATE test_json_type, test_json_table SET test_json_type.`int1^json` = test_json_table.`int1` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1^json
UPDATE test_json_type, test_json_table SET test_json_type.`int1>>json` = test_json_table.`int1` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1>>json
UPDATE test_json_type, test_json_table SET test_json_type.`int1<<json` = test_json_table.`int1` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1<<json
UPDATE test_json_type, test_json_table SET test_json_type.`int1|json` = test_json_table.`int1` | test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1|json
UPDATE test_json_type, test_json_table SET test_json_type.`int1&json` = test_json_table.`int1` & test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int1&json
UPDATE test_json_type, test_json_table SET test_json_type.`int1||json` = test_json_table.`int1` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int1&&json` = test_json_table.`int1` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int1_div_json` = test_json_table.`int1` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: int1_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`int1_mod_json` = test_json_table.`int1` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: int1_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`int1_xor_json` = test_json_table.`int1` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: int1_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`int1_and_json` = test_json_table.`int1` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int1_or_json` = test_json_table.`int1` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint1+json` = test_json_table.`uint1` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1+json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1-json` = test_json_table.`uint1` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1-json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1*json` = test_json_table.`uint1` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1*json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1/json` = test_json_table.`uint1` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1/json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1%json` = test_json_table.`uint1` % test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1%json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1^json` = test_json_table.`uint1` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1^json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1>>json` = test_json_table.`uint1` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1>>json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1<<json` = test_json_table.`uint1` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1<<json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1|json` = test_json_table.`uint1` | test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1|json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1&json` = test_json_table.`uint1` & test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint1&json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1||json` = test_json_table.`uint1` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint1&&json` = test_json_table.`uint1` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint1_div_json` = test_json_table.`uint1` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: uint1_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1_mod_json` = test_json_table.`uint1` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: uint1_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1_xor_json` = test_json_table.`uint1` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: uint1_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint1_and_json` = test_json_table.`uint1` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint1_or_json` = test_json_table.`uint1` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int2+json` = test_json_table.`int2` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2+json
UPDATE test_json_type, test_json_table SET test_json_type.`int2-json` = test_json_table.`int2` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2-json
UPDATE test_json_type, test_json_table SET test_json_type.`int2*json` = test_json_table.`int2` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2*json
UPDATE test_json_type, test_json_table SET test_json_type.`int2/json` = test_json_table.`int2` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2/json
UPDATE test_json_type, test_json_table SET test_json_type.`int2%json` = test_json_table.`int2` % test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2%json
UPDATE test_json_type, test_json_table SET test_json_type.`int2^json` = test_json_table.`int2` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2^json
UPDATE test_json_type, test_json_table SET test_json_type.`int2>>json` = test_json_table.`int2` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2>>json
UPDATE test_json_type, test_json_table SET test_json_type.`int2<<json` = test_json_table.`int2` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2<<json
UPDATE test_json_type, test_json_table SET test_json_type.`int2|json` = test_json_table.`int2` | test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2|json
UPDATE test_json_type, test_json_table SET test_json_type.`int2&json` = test_json_table.`int2` & test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int2&json
UPDATE test_json_type, test_json_table SET test_json_type.`int2||json` = test_json_table.`int2` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int2&&json` = test_json_table.`int2` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int2_div_json` = test_json_table.`int2` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: int2_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`int2_mod_json` = test_json_table.`int2` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: int2_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`int2_xor_json` = test_json_table.`int2` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: int2_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`int2_and_json` = test_json_table.`int2` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int2_or_json` = test_json_table.`int2` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint2+json` = test_json_table.`uint2` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2+json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2-json` = test_json_table.`uint2` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2-json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2*json` = test_json_table.`uint2` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2*json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2/json` = test_json_table.`uint2` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2/json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2%json` = test_json_table.`uint2` % test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2%json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2^json` = test_json_table.`uint2` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2^json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2>>json` = test_json_table.`uint2` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2>>json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2<<json` = test_json_table.`uint2` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2<<json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2|json` = test_json_table.`uint2` | test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2|json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2&json` = test_json_table.`uint2` & test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint2&json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2||json` = test_json_table.`uint2` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint2&&json` = test_json_table.`uint2` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint2_div_json` = test_json_table.`uint2` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: uint2_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2_mod_json` = test_json_table.`uint2` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: uint2_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2_xor_json` = test_json_table.`uint2` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: uint2_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint2_and_json` = test_json_table.`uint2` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint2_or_json` = test_json_table.`uint2` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int4+json` = test_json_table.`int4` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4+json
UPDATE test_json_type, test_json_table SET test_json_type.`int4-json` = test_json_table.`int4` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4-json
UPDATE test_json_type, test_json_table SET test_json_type.`int4*json` = test_json_table.`int4` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4*json
UPDATE test_json_type, test_json_table SET test_json_type.`int4/json` = test_json_table.`int4` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4/json
UPDATE test_json_type, test_json_table SET test_json_type.`int4%json` = test_json_table.`int4` % test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4%json
UPDATE test_json_type, test_json_table SET test_json_type.`int4^json` = test_json_table.`int4` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4^json
UPDATE test_json_type, test_json_table SET test_json_type.`int4>>json` = test_json_table.`int4` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4>>json
UPDATE test_json_type, test_json_table SET test_json_type.`int4<<json` = test_json_table.`int4` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4<<json
UPDATE test_json_type, test_json_table SET test_json_type.`int4|json` = test_json_table.`int4` | test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4|json
UPDATE test_json_type, test_json_table SET test_json_type.`int4&json` = test_json_table.`int4` & test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int4&json
UPDATE test_json_type, test_json_table SET test_json_type.`int4||json` = test_json_table.`int4` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int4&&json` = test_json_table.`int4` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int4_div_json` = test_json_table.`int4` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: int4_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`int4_mod_json` = test_json_table.`int4` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: int4_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`int4_xor_json` = test_json_table.`int4` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: int4_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`int4_and_json` = test_json_table.`int4` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int4_or_json` = test_json_table.`int4` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint4+json` = test_json_table.`uint4` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4+json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4-json` = test_json_table.`uint4` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4-json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4*json` = test_json_table.`uint4` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4*json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4/json` = test_json_table.`uint4` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4/json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4%json` = test_json_table.`uint4` % test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4%json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4^json` = test_json_table.`uint4` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4^json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4>>json` = test_json_table.`uint4` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4>>json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4<<json` = test_json_table.`uint4` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4<<json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4|json` = test_json_table.`uint4` | test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4|json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4&json` = test_json_table.`uint4` & test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint4&json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4||json` = test_json_table.`uint4` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint4&&json` = test_json_table.`uint4` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint4_div_json` = test_json_table.`uint4` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: uint4_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4_mod_json` = test_json_table.`uint4` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: uint4_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4_xor_json` = test_json_table.`uint4` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: uint4_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint4_and_json` = test_json_table.`uint4` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint4_or_json` = test_json_table.`uint4` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int8+json` = test_json_table.`int8` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8+json
UPDATE test_json_type, test_json_table SET test_json_type.`int8-json` = test_json_table.`int8` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8-json
UPDATE test_json_type, test_json_table SET test_json_type.`int8*json` = test_json_table.`int8` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8*json
UPDATE test_json_type, test_json_table SET test_json_type.`int8/json` = test_json_table.`int8` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8/json
UPDATE test_json_type, test_json_table SET test_json_type.`int8%json` = test_json_table.`int8` % test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: int8%json
UPDATE test_json_type, test_json_table SET test_json_type.`int8^json` = test_json_table.`int8` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8^json
UPDATE test_json_type, test_json_table SET test_json_type.`int8>>json` = test_json_table.`int8` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8>>json
UPDATE test_json_type, test_json_table SET test_json_type.`int8<<json` = test_json_table.`int8` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: int8<<json
UPDATE test_json_type, test_json_table SET test_json_type.`int8|json` = test_json_table.`int8` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: int8|json
UPDATE test_json_type, test_json_table SET test_json_type.`int8&json` = test_json_table.`int8` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: int8&json
UPDATE test_json_type, test_json_table SET test_json_type.`int8||json` = test_json_table.`int8` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int8&&json` = test_json_table.`int8` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int8_div_json` = test_json_table.`int8` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: int8_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`int8_mod_json` = test_json_table.`int8` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: int8_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`int8_xor_json` = test_json_table.`int8` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: int8_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`int8_and_json` = test_json_table.`int8` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`int8_or_json` = test_json_table.`int8` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint8+json` = test_json_table.`uint8` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8+json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8-json` = test_json_table.`uint8` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8-json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8*json` = test_json_table.`uint8` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8*json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8/json` = test_json_table.`uint8` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8/json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8%json` = test_json_table.`uint8` % test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: uint8%json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8^json` = test_json_table.`uint8` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8^json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8>>json` = test_json_table.`uint8` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8>>json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8<<json` = test_json_table.`uint8` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: uint8<<json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8|json` = test_json_table.`uint8` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: uint8|json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8&json` = test_json_table.`uint8` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: uint8&json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8||json` = test_json_table.`uint8` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint8&&json` = test_json_table.`uint8` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint8_div_json` = test_json_table.`uint8` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: uint8_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8_mod_json` = test_json_table.`uint8` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: uint8_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8_xor_json` = test_json_table.`uint8` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: uint8_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`uint8_and_json` = test_json_table.`uint8` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`uint8_or_json` = test_json_table.`uint8` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float4+json` = test_json_table.`float4` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4+json
UPDATE test_json_type, test_json_table SET test_json_type.`float4-json` = test_json_table.`float4` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4-json
UPDATE test_json_type, test_json_table SET test_json_type.`float4*json` = test_json_table.`float4` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4*json
UPDATE test_json_type, test_json_table SET test_json_type.`float4/json` = test_json_table.`float4` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4/json
UPDATE test_json_type, test_json_table SET test_json_type.`float4%json` = test_json_table.`float4` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4%json
UPDATE test_json_type, test_json_table SET test_json_type.`float4^json` = test_json_table.`float4` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4^json
UPDATE test_json_type, test_json_table SET test_json_type.`float4>>json` = test_json_table.`float4` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4>>json
UPDATE test_json_type, test_json_table SET test_json_type.`float4<<json` = test_json_table.`float4` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float4<<json
UPDATE test_json_type, test_json_table SET test_json_type.`float4|json` = test_json_table.`float4` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: float4|json
UPDATE test_json_type, test_json_table SET test_json_type.`float4&json` = test_json_table.`float4` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: float4&json
UPDATE test_json_type, test_json_table SET test_json_type.`float4||json` = test_json_table.`float4` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float4&&json` = test_json_table.`float4` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float4_div_json` = test_json_table.`float4` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: float4_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`float4_mod_json` = test_json_table.`float4` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: float4_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`float4_xor_json` = test_json_table.`float4` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: float4_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`float4_and_json` = test_json_table.`float4` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float4_or_json` = test_json_table.`float4` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float8+json` = test_json_table.`float8` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8+json
UPDATE test_json_type, test_json_table SET test_json_type.`float8-json` = test_json_table.`float8` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8-json
UPDATE test_json_type, test_json_table SET test_json_type.`float8*json` = test_json_table.`float8` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8*json
UPDATE test_json_type, test_json_table SET test_json_type.`float8/json` = test_json_table.`float8` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8/json
UPDATE test_json_type, test_json_table SET test_json_type.`float8%json` = test_json_table.`float8` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8%json
UPDATE test_json_type, test_json_table SET test_json_type.`float8^json` = test_json_table.`float8` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8^json
UPDATE test_json_type, test_json_table SET test_json_type.`float8>>json` = test_json_table.`float8` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8>>json
UPDATE test_json_type, test_json_table SET test_json_type.`float8<<json` = test_json_table.`float8` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: float8<<json
UPDATE test_json_type, test_json_table SET test_json_type.`float8|json` = test_json_table.`float8` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: float8|json
UPDATE test_json_type, test_json_table SET test_json_type.`float8&json` = test_json_table.`float8` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: float8&json
UPDATE test_json_type, test_json_table SET test_json_type.`float8||json` = test_json_table.`float8` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float8&&json` = test_json_table.`float8` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float8_div_json` = test_json_table.`float8` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: float8_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`float8_mod_json` = test_json_table.`float8` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: float8_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`float8_xor_json` = test_json_table.`float8` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: float8_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`float8_and_json` = test_json_table.`float8` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`float8_or_json` = test_json_table.`float8` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`numeric+json` = test_json_table.`numeric` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric+json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric-json` = test_json_table.`numeric` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric-json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric*json` = test_json_table.`numeric` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric*json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric/json` = test_json_table.`numeric` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric/json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric%json` = test_json_table.`numeric` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric%json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric^json` = test_json_table.`numeric` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric^json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric>>json` = test_json_table.`numeric` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric>>json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric<<json` = test_json_table.`numeric` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: numeric<<json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric|json` = test_json_table.`numeric` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: numeric|json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric&json` = test_json_table.`numeric` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: numeric&json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric||json` = test_json_table.`numeric` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`numeric&&json` = test_json_table.`numeric` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`numeric_div_json` = test_json_table.`numeric` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: numeric_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric_mod_json` = test_json_table.`numeric` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: numeric_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric_xor_json` = test_json_table.`numeric` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: numeric_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`numeric_and_json` = test_json_table.`numeric` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`numeric_or_json` = test_json_table.`numeric` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit1+json` = test_json_table.`bit1` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1+json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1-json` = test_json_table.`bit1` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1-json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1*json` = test_json_table.`bit1` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1*json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1/json` = test_json_table.`bit1` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1/json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1%json` = test_json_table.`bit1` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1%json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1^json` = test_json_table.`bit1` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1^json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1>>json` = test_json_table.`bit1` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1>>json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1<<json` = test_json_table.`bit1` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit1<<json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1|json` = test_json_table.`bit1` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: bit1|json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1&json` = test_json_table.`bit1` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: bit1&json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1||json` = test_json_table.`bit1` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit1&&json` = test_json_table.`bit1` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit1_div_json` = test_json_table.`bit1` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: bit1_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1_mod_json` = test_json_table.`bit1` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: bit1_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1_xor_json` = test_json_table.`bit1` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: bit1_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`bit1_and_json` = test_json_table.`bit1` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit1_or_json` = test_json_table.`bit1` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit64+json` = test_json_table.`bit64` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64+json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64-json` = test_json_table.`bit64` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64-json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64*json` = test_json_table.`bit64` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64*json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64/json` = test_json_table.`bit64` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64/json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64%json` = test_json_table.`bit64` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64%json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64^json` = test_json_table.`bit64` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64^json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64>>json` = test_json_table.`bit64` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64>>json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64<<json` = test_json_table.`bit64` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: bit64<<json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64|json` = test_json_table.`bit64` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: bit64|json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64&json` = test_json_table.`bit64` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: bit64&json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64||json` = test_json_table.`bit64` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit64&&json` = test_json_table.`bit64` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit64_div_json` = test_json_table.`bit64` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: bit64_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64_mod_json` = test_json_table.`bit64` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: bit64_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64_xor_json` = test_json_table.`bit64` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: bit64_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`bit64_and_json` = test_json_table.`bit64` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`bit64_or_json` = test_json_table.`bit64` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`boolean+json` = test_json_table.`boolean` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean+json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean-json` = test_json_table.`boolean` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean-json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean*json` = test_json_table.`boolean` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean*json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean/json` = test_json_table.`boolean` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean/json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean%json` = test_json_table.`boolean` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean%json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean^json` = test_json_table.`boolean` ^ test_json_table.`json`;
ERROR:  failed to find conversion function from boolean to double precision
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`boolean>>json` = test_json_table.`boolean` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean>>json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean<<json` = test_json_table.`boolean` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: boolean<<json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean|json` = test_json_table.`boolean` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: boolean|json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean&json` = test_json_table.`boolean` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: boolean&json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean||json` = test_json_table.`boolean` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`boolean&&json` = test_json_table.`boolean` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`boolean_div_json` = test_json_table.`boolean` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: boolean_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`boolean_mod_json` = test_json_table.`boolean` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: boolean_mod_json
-- UPDATE test_json_type, test_json_table SET test_json_type.`boolean_xor_json` = test_json_table.`boolean` xor test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`boolean_and_json` = test_json_table.`boolean` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`boolean_or_json` = test_json_table.`boolean` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`date+json` = test_json_table.`date` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date+json
UPDATE test_json_type, test_json_table SET test_json_type.`date-json` = test_json_table.`date` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date-json
UPDATE test_json_type, test_json_table SET test_json_type.`date*json` = test_json_table.`date` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date*json
UPDATE test_json_type, test_json_table SET test_json_type.`date/json` = test_json_table.`date` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date/json
UPDATE test_json_type, test_json_table SET test_json_type.`date%json` = test_json_table.`date` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date%json
UPDATE test_json_type, test_json_table SET test_json_type.`date^json` = test_json_table.`date` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date^json
UPDATE test_json_type, test_json_table SET test_json_type.`date>>json` = test_json_table.`date` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date>>json
UPDATE test_json_type, test_json_table SET test_json_type.`date<<json` = test_json_table.`date` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: date<<json
UPDATE test_json_type, test_json_table SET test_json_type.`date|json` = test_json_table.`date` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: date|json
UPDATE test_json_type, test_json_table SET test_json_type.`date&json` = test_json_table.`date` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: date&json
UPDATE test_json_type, test_json_table SET test_json_type.`date||json` = test_json_table.`date` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`date&&json` = test_json_table.`date` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`date_div_json` = test_json_table.`date` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: date_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`date_mod_json` = test_json_table.`date` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: date_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`date_xor_json` = test_json_table.`date` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: date_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`date_and_json` = test_json_table.`date` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`date_or_json` = test_json_table.`date` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time+json` = test_json_table.`time` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time+json
UPDATE test_json_type, test_json_table SET test_json_type.`time-json` = test_json_table.`time` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time-json
UPDATE test_json_type, test_json_table SET test_json_type.`time*json` = test_json_table.`time` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time*json
UPDATE test_json_type, test_json_table SET test_json_type.`time/json` = test_json_table.`time` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time/json
UPDATE test_json_type, test_json_table SET test_json_type.`time%json` = test_json_table.`time` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time%json
UPDATE test_json_type, test_json_table SET test_json_type.`time^json` = test_json_table.`time` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time^json
UPDATE test_json_type, test_json_table SET test_json_type.`time>>json` = test_json_table.`time` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time>>json
UPDATE test_json_type, test_json_table SET test_json_type.`time<<json` = test_json_table.`time` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time<<json
UPDATE test_json_type, test_json_table SET test_json_type.`time|json` = test_json_table.`time` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: time|json
UPDATE test_json_type, test_json_table SET test_json_type.`time&json` = test_json_table.`time` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: time&json
UPDATE test_json_type, test_json_table SET test_json_type.`time||json` = test_json_table.`time` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time&&json` = test_json_table.`time` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time_div_json` = test_json_table.`time` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: time_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`time_mod_json` = test_json_table.`time` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: time_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`time_xor_json` = test_json_table.`time` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: time_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`time_and_json` = test_json_table.`time` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time_or_json` = test_json_table.`time` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)+json` = test_json_table.`time(4)` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)+json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)-json` = test_json_table.`time(4)` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)-json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)*json` = test_json_table.`time(4)` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)*json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)/json` = test_json_table.`time(4)` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)/json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)%json` = test_json_table.`time(4)` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)%json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)^json` = test_json_table.`time(4)` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)^json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)>>json` = test_json_table.`time(4)` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)>>json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)<<json` = test_json_table.`time(4)` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: time(4)<<json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)|json` = test_json_table.`time(4)` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: time(4)|json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)&json` = test_json_table.`time(4)` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: time(4)&json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)||json` = test_json_table.`time(4)` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)&&json` = test_json_table.`time(4)` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)_div_json` = test_json_table.`time(4)` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: time(4)_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)_mod_json` = test_json_table.`time(4)` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: time(4)_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)_xor_json` = test_json_table.`time(4)` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: time(4)_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)_and_json` = test_json_table.`time(4)` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`time(4)_or_json` = test_json_table.`time(4)` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime+json` = test_json_table.`datetime` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime+json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime-json` = test_json_table.`datetime` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime-json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime*json` = test_json_table.`datetime` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime*json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime/json` = test_json_table.`datetime` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime/json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime%json` = test_json_table.`datetime` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime%json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime^json` = test_json_table.`datetime` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime^json
WARNING:  integer out of range
CONTEXT:  referenced column: datetime^json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime>>json` = test_json_table.`datetime` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime>>json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime<<json` = test_json_table.`datetime` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime<<json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime|json` = test_json_table.`datetime` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: datetime|json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime&json` = test_json_table.`datetime` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: datetime&json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime||json` = test_json_table.`datetime` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime&&json` = test_json_table.`datetime` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime_div_json` = test_json_table.`datetime` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: datetime_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime_mod_json` = test_json_table.`datetime` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: datetime_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime_xor_json` = test_json_table.`datetime` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: datetime_xor_json
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: datetime_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime_and_json` = test_json_table.`datetime` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime_or_json` = test_json_table.`datetime` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)+json` = test_json_table.`datetime(4)` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)+json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)-json` = test_json_table.`datetime(4)` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)-json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)*json` = test_json_table.`datetime(4)` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)*json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)/json` = test_json_table.`datetime(4)` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)/json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)%json` = test_json_table.`datetime(4)` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)%json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)^json` = test_json_table.`datetime(4)` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)^json
WARNING:  integer out of range
CONTEXT:  referenced column: datetime(4)^json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)>>json` = test_json_table.`datetime(4)` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)>>json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)<<json` = test_json_table.`datetime(4)` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: datetime(4)<<json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)|json` = test_json_table.`datetime(4)` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: datetime(4)|json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)&json` = test_json_table.`datetime(4)` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: datetime(4)&json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)||json` = test_json_table.`datetime(4)` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)&&json` = test_json_table.`datetime(4)` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)_div_json` = test_json_table.`datetime(4)` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: datetime(4)_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)_mod_json` = test_json_table.`datetime(4)` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: datetime(4)_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)_xor_json` = test_json_table.`datetime(4)` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: datetime(4)_xor_json
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: datetime(4)_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)_and_json` = test_json_table.`datetime(4)` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`datetime(4)_or_json` = test_json_table.`datetime(4)` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp+json` = test_json_table.`timestamp` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp+json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp-json` = test_json_table.`timestamp` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp-json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp*json` = test_json_table.`timestamp` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp*json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp/json` = test_json_table.`timestamp` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp/json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp%json` = test_json_table.`timestamp` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp%json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp^json` = test_json_table.`timestamp` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp^json
WARNING:  integer out of range
CONTEXT:  referenced column: timestamp^json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp>>json` = test_json_table.`timestamp` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp>>json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp<<json` = test_json_table.`timestamp` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp<<json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp|json` = test_json_table.`timestamp` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: timestamp|json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp&json` = test_json_table.`timestamp` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: timestamp&json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp||json` = test_json_table.`timestamp` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp&&json` = test_json_table.`timestamp` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp_div_json` = test_json_table.`timestamp` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: timestamp_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp_mod_json` = test_json_table.`timestamp` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: timestamp_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp_xor_json` = test_json_table.`timestamp` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: timestamp_xor_json
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: timestamp_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp_and_json` = test_json_table.`timestamp` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp_or_json` = test_json_table.`timestamp` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)+json` = test_json_table.`timestamp(4)` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)+json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)-json` = test_json_table.`timestamp(4)` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)-json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)*json` = test_json_table.`timestamp(4)` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)*json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)/json` = test_json_table.`timestamp(4)` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)/json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)%json` = test_json_table.`timestamp(4)` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)%json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)^json` = test_json_table.`timestamp(4)` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)^json
WARNING:  integer out of range
CONTEXT:  referenced column: timestamp(4)^json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)>>json` = test_json_table.`timestamp(4)` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)>>json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)<<json` = test_json_table.`timestamp(4)` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: timestamp(4)<<json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)|json` = test_json_table.`timestamp(4)` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: timestamp(4)|json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)&json` = test_json_table.`timestamp(4)` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: timestamp(4)&json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)||json` = test_json_table.`timestamp(4)` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)&&json` = test_json_table.`timestamp(4)` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)_div_json` = test_json_table.`timestamp(4)` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: timestamp(4)_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)_mod_json` = test_json_table.`timestamp(4)` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: timestamp(4)_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)_xor_json` = test_json_table.`timestamp(4)` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: timestamp(4)_xor_json
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: timestamp(4)_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)_and_json` = test_json_table.`timestamp(4)` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`timestamp(4)_or_json` = test_json_table.`timestamp(4)` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`year+json` = test_json_table.`year` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year+json
UPDATE test_json_type, test_json_table SET test_json_type.`year-json` = test_json_table.`year` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year-json
UPDATE test_json_type, test_json_table SET test_json_type.`year*json` = test_json_table.`year` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year*json
UPDATE test_json_type, test_json_table SET test_json_type.`year/json` = test_json_table.`year` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year/json
UPDATE test_json_type, test_json_table SET test_json_type.`year%json` = test_json_table.`year` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year%json
UPDATE test_json_type, test_json_table SET test_json_type.`year^json` = test_json_table.`year` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year^json
UPDATE test_json_type, test_json_table SET test_json_type.`year>>json` = test_json_table.`year` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year>>json
UPDATE test_json_type, test_json_table SET test_json_type.`year<<json` = test_json_table.`year` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: year<<json
UPDATE test_json_type, test_json_table SET test_json_type.`year|json` = test_json_table.`year` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: year|json
UPDATE test_json_type, test_json_table SET test_json_type.`year&json` = test_json_table.`year` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: year&json
UPDATE test_json_type, test_json_table SET test_json_type.`year||json` = test_json_table.`year` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`year&&json` = test_json_table.`year` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`year_div_json` = test_json_table.`year` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: year_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`year_mod_json` = test_json_table.`year` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: year_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`year_xor_json` = test_json_table.`year` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: year_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`year_and_json` = test_json_table.`year` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`year_or_json` = test_json_table.`year` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`char+json` = test_json_table.`char` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: char+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char+json
UPDATE test_json_type, test_json_table SET test_json_type.`char-json` = test_json_table.`char` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: char-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char-json
UPDATE test_json_type, test_json_table SET test_json_type.`char*json` = test_json_table.`char` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: char*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char*json
UPDATE test_json_type, test_json_table SET test_json_type.`char/json` = test_json_table.`char` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: char/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char/json
UPDATE test_json_type, test_json_table SET test_json_type.`char%json` = test_json_table.`char` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: char%json
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char%json
UPDATE test_json_type, test_json_table SET test_json_type.`char^json` = test_json_table.`char` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: char^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char^json
UPDATE test_json_type, test_json_table SET test_json_type.`char>>json` = test_json_table.`char` >> test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: char>>json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char>>json
UPDATE test_json_type, test_json_table SET test_json_type.`char<<json` = test_json_table.`char` << test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: char<<json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: char<<json
UPDATE test_json_type, test_json_table SET test_json_type.`char|json` = test_json_table.`char` | test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: char|json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: char|json
UPDATE test_json_type, test_json_table SET test_json_type.`char&json` = test_json_table.`char` & test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: char&json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: char&json
UPDATE test_json_type, test_json_table SET test_json_type.`char||json` = test_json_table.`char` || test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a                                                                                               
CONTEXT:  referenced column: char||json
UPDATE test_json_type, test_json_table SET test_json_type.`char&&json` = test_json_table.`char` && test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a                                                                                               
CONTEXT:  referenced column: char&&json
UPDATE test_json_type, test_json_table SET test_json_type.`char_div_json` = test_json_table.`char` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: char_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: char_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`char_mod_json` = test_json_table.`char` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: char_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: char_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`char_xor_json` = test_json_table.`char` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: char_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: char_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`char_and_json` = test_json_table.`char` and test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a                                                                                               
CONTEXT:  referenced column: char_and_json
UPDATE test_json_type, test_json_table SET test_json_type.`char_or_json` = test_json_table.`char` or test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a                                                                                               
CONTEXT:  referenced column: char_or_json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar+json` = test_json_table.`varchar` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varchar+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar+json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar-json` = test_json_table.`varchar` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varchar-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar-json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar*json` = test_json_table.`varchar` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varchar*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar*json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar/json` = test_json_table.`varchar` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varchar/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar/json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar%json` = test_json_table.`varchar` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: varchar%json
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar%json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar^json` = test_json_table.`varchar` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varchar^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar^json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar>>json` = test_json_table.`varchar` >> test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: varchar>>json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar>>json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar<<json` = test_json_table.`varchar` << test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: varchar<<json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varchar<<json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar|json` = test_json_table.`varchar` | test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: varchar|json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: varchar|json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar&json` = test_json_table.`varchar` & test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: varchar&json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: varchar&json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar||json` = test_json_table.`varchar` || test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a
CONTEXT:  referenced column: varchar||json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar&&json` = test_json_table.`varchar` && test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a
CONTEXT:  referenced column: varchar&&json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar_div_json` = test_json_table.`varchar` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: varchar_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: varchar_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar_mod_json` = test_json_table.`varchar` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: varchar_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: varchar_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar_xor_json` = test_json_table.`varchar` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: varchar_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: varchar_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar_and_json` = test_json_table.`varchar` and test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a
CONTEXT:  referenced column: varchar_and_json
UPDATE test_json_type, test_json_table SET test_json_type.`varchar_or_json` = test_json_table.`varchar` or test_json_table.`json`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a
CONTEXT:  referenced column: varchar_or_json
UPDATE test_json_type, test_json_table SET test_json_type.`binary+json` = test_json_table.`binary` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: binary+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: binary+json
UPDATE test_json_type, test_json_table SET test_json_type.`binary-json` = test_json_table.`binary` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: binary-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: binary-json
UPDATE test_json_type, test_json_table SET test_json_type.`binary*json` = test_json_table.`binary` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: binary*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: binary*json
UPDATE test_json_type, test_json_table SET test_json_type.`binary/json` = test_json_table.`binary` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: binary/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: binary/json
UPDATE test_json_type, test_json_table SET test_json_type.`binary%json` = test_json_table.`binary` % test_json_table.`json`;
ERROR:  failed to find conversion function from "binary" to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`binary^json` = test_json_table.`binary` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: binary^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: binary^json
UPDATE test_json_type, test_json_table SET test_json_type.`binary>>json` = test_json_table.`binary` >> test_json_table.`json`;
ERROR:  failed to find conversion function from "binary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`binary<<json` = test_json_table.`binary` << test_json_table.`json`;
ERROR:  failed to find conversion function from "binary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`binary|json` = test_json_table.`binary` | test_json_table.`json`;
ERROR:  failed to find conversion function from "binary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`binary&json` = test_json_table.`binary` & test_json_table.`json`;
ERROR:  failed to find conversion function from "binary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`binary||json` = test_json_table.`binary` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`binary&&json` = test_json_table.`binary` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`binary_div_json` = test_json_table.`binary` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: binary_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: binary_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`binary_mod_json` = test_json_table.`binary` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: binary_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: binary_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`binary_xor_json` = test_json_table.`binary` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: binary_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: binary_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`binary_and_json` = test_json_table.`binary` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`binary_or_json` = test_json_table.`binary` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary+json` = test_json_table.`varbinary` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varbinary+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varbinary+json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary-json` = test_json_table.`varbinary` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varbinary-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varbinary-json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary*json` = test_json_table.`varbinary` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varbinary*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varbinary*json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary/json` = test_json_table.`varbinary` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varbinary/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varbinary/json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary%json` = test_json_table.`varbinary` % test_json_table.`json`;
ERROR:  failed to find conversion function from "varbinary" to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary^json` = test_json_table.`varbinary` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: varbinary^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: varbinary^json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary>>json` = test_json_table.`varbinary` >> test_json_table.`json`;
ERROR:  failed to find conversion function from "varbinary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary<<json` = test_json_table.`varbinary` << test_json_table.`json`;
ERROR:  failed to find conversion function from "varbinary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary|json` = test_json_table.`varbinary` | test_json_table.`json`;
ERROR:  failed to find conversion function from "varbinary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary&json` = test_json_table.`varbinary` & test_json_table.`json`;
ERROR:  failed to find conversion function from "varbinary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary||json` = test_json_table.`varbinary` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary&&json` = test_json_table.`varbinary` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary_div_json` = test_json_table.`varbinary` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: varbinary_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: varbinary_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary_mod_json` = test_json_table.`varbinary` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: varbinary_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: varbinary_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary_xor_json` = test_json_table.`varbinary` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: varbinary_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: varbinary_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary_and_json` = test_json_table.`varbinary` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`varbinary_or_json` = test_json_table.`varbinary` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob+json` = test_json_table.`tinyblob` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: tinyblob+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: tinyblob+json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob-json` = test_json_table.`tinyblob` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: tinyblob-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: tinyblob-json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob*json` = test_json_table.`tinyblob` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: tinyblob*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: tinyblob*json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob/json` = test_json_table.`tinyblob` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: tinyblob/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: tinyblob/json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob%json` = test_json_table.`tinyblob` % test_json_table.`json`;
ERROR:  failed to find conversion function from tinyblob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob^json` = test_json_table.`tinyblob` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: tinyblob^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: tinyblob^json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob>>json` = test_json_table.`tinyblob` >> test_json_table.`json`;
ERROR:  failed to find conversion function from tinyblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob<<json` = test_json_table.`tinyblob` << test_json_table.`json`;
ERROR:  failed to find conversion function from tinyblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob|json` = test_json_table.`tinyblob` | test_json_table.`json`;
ERROR:  failed to find conversion function from tinyblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob&json` = test_json_table.`tinyblob` & test_json_table.`json`;
ERROR:  failed to find conversion function from tinyblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob||json` = test_json_table.`tinyblob` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob&&json` = test_json_table.`tinyblob` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob_div_json` = test_json_table.`tinyblob` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: tinyblob_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: tinyblob_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob_mod_json` = test_json_table.`tinyblob` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: tinyblob_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: tinyblob_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob_xor_json` = test_json_table.`tinyblob` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: tinyblob_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: tinyblob_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob_and_json` = test_json_table.`tinyblob` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`tinyblob_or_json` = test_json_table.`tinyblob` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`blob+json` = test_json_table.`blob` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: blob+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: blob+json
UPDATE test_json_type, test_json_table SET test_json_type.`blob-json` = test_json_table.`blob` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: blob-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: blob-json
UPDATE test_json_type, test_json_table SET test_json_type.`blob*json` = test_json_table.`blob` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: blob*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: blob*json
UPDATE test_json_type, test_json_table SET test_json_type.`blob/json` = test_json_table.`blob` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: blob/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: blob/json
UPDATE test_json_type, test_json_table SET test_json_type.`blob%json` = test_json_table.`blob` % test_json_table.`json`;
ERROR:  failed to find conversion function from blob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`blob^json` = test_json_table.`blob` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: blob^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: blob^json
UPDATE test_json_type, test_json_table SET test_json_type.`blob>>json` = test_json_table.`blob` >> test_json_table.`json`;
ERROR:  failed to find conversion function from blob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`blob<<json` = test_json_table.`blob` << test_json_table.`json`;
ERROR:  failed to find conversion function from blob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`blob|json` = test_json_table.`blob` | test_json_table.`json`;
ERROR:  failed to find conversion function from blob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`blob&json` = test_json_table.`blob` & test_json_table.`json`;
ERROR:  failed to find conversion function from blob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`blob||json` = test_json_table.`blob` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`blob&&json` = test_json_table.`blob` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`blob_div_json` = test_json_table.`blob` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: blob_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: blob_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`blob_mod_json` = test_json_table.`blob` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: blob_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: blob_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`blob_xor_json` = test_json_table.`blob` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: blob_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: blob_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`blob_and_json` = test_json_table.`blob` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`blob_or_json` = test_json_table.`blob` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob+json` = test_json_table.`mediumblob` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: mediumblob+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: mediumblob+json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob-json` = test_json_table.`mediumblob` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: mediumblob-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: mediumblob-json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob*json` = test_json_table.`mediumblob` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: mediumblob*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: mediumblob*json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob/json` = test_json_table.`mediumblob` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: mediumblob/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: mediumblob/json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob%json` = test_json_table.`mediumblob` % test_json_table.`json`;
ERROR:  failed to find conversion function from mediumblob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob^json` = test_json_table.`mediumblob` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: mediumblob^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: mediumblob^json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob>>json` = test_json_table.`mediumblob` >> test_json_table.`json`;
ERROR:  failed to find conversion function from mediumblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob<<json` = test_json_table.`mediumblob` << test_json_table.`json`;
ERROR:  failed to find conversion function from mediumblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob|json` = test_json_table.`mediumblob` | test_json_table.`json`;
ERROR:  failed to find conversion function from mediumblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob&json` = test_json_table.`mediumblob` & test_json_table.`json`;
ERROR:  failed to find conversion function from mediumblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob||json` = test_json_table.`mediumblob` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob&&json` = test_json_table.`mediumblob` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob_div_json` = test_json_table.`mediumblob` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: mediumblob_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: mediumblob_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob_mod_json` = test_json_table.`mediumblob` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: mediumblob_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: mediumblob_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob_xor_json` = test_json_table.`mediumblob` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: mediumblob_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: mediumblob_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob_and_json` = test_json_table.`mediumblob` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`mediumblob_or_json` = test_json_table.`mediumblob` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`longblob+json` = test_json_table.`longblob` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: longblob+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: longblob+json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob-json` = test_json_table.`longblob` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: longblob-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: longblob-json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob*json` = test_json_table.`longblob` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: longblob*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: longblob*json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob/json` = test_json_table.`longblob` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: longblob/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: longblob/json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob%json` = test_json_table.`longblob` % test_json_table.`json`;
ERROR:  failed to find conversion function from longblob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`longblob^json` = test_json_table.`longblob` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: longblob^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: longblob^json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob>>json` = test_json_table.`longblob` >> test_json_table.`json`;
ERROR:  failed to find conversion function from longblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`longblob<<json` = test_json_table.`longblob` << test_json_table.`json`;
ERROR:  failed to find conversion function from longblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`longblob|json` = test_json_table.`longblob` | test_json_table.`json`;
ERROR:  failed to find conversion function from longblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`longblob&json` = test_json_table.`longblob` & test_json_table.`json`;
ERROR:  failed to find conversion function from longblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`longblob||json` = test_json_table.`longblob` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`longblob&&json` = test_json_table.`longblob` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`longblob_div_json` = test_json_table.`longblob` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: longblob_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: longblob_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob_mod_json` = test_json_table.`longblob` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: longblob_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: longblob_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob_xor_json` = test_json_table.`longblob` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: longblob_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: longblob_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`longblob_and_json` = test_json_table.`longblob` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`longblob_or_json` = test_json_table.`longblob` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`text+json` = test_json_table.`text` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: text+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text+json
UPDATE test_json_type, test_json_table SET test_json_type.`text-json` = test_json_table.`text` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: text-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text-json
UPDATE test_json_type, test_json_table SET test_json_type.`text*json` = test_json_table.`text` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: text*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text*json
UPDATE test_json_type, test_json_table SET test_json_type.`text/json` = test_json_table.`text` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: text/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text/json
UPDATE test_json_type, test_json_table SET test_json_type.`text%json` = test_json_table.`text` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: text%json
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text%json
UPDATE test_json_type, test_json_table SET test_json_type.`text^json` = test_json_table.`text` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: text^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text^json
UPDATE test_json_type, test_json_table SET test_json_type.`text>>json` = test_json_table.`text` >> test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: text>>json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text>>json
UPDATE test_json_type, test_json_table SET test_json_type.`text<<json` = test_json_table.`text` << test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: text<<json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: text<<json
UPDATE test_json_type, test_json_table SET test_json_type.`text|json` = test_json_table.`text` | test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: text|json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: text|json
UPDATE test_json_type, test_json_table SET test_json_type.`text&json` = test_json_table.`text` & test_json_table.`json`;
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: text&json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: text&json
UPDATE test_json_type, test_json_table SET test_json_type.`text||json` = test_json_table.`text` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`text&&json` = test_json_table.`text` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`text_div_json` = test_json_table.`text` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: text_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: text_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`text_mod_json` = test_json_table.`text` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: text_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: text_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`text_xor_json` = test_json_table.`text` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: text_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: text_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`text_and_json` = test_json_table.`text` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`text_or_json` = test_json_table.`text` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t+json` = test_json_table.`enum_t` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t+json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t-json` = test_json_table.`enum_t` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t-json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t*json` = test_json_table.`enum_t` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t*json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t/json` = test_json_table.`enum_t` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t/json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t%json` = test_json_table.`enum_t` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t%json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t^json` = test_json_table.`enum_t` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t^json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t>>json` = test_json_table.`enum_t` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t>>json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t<<json` = test_json_table.`enum_t` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: enum_t<<json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t|json` = test_json_table.`enum_t` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: enum_t|json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t&json` = test_json_table.`enum_t` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: enum_t&json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t||json` = test_json_table.`enum_t` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t&&json` = test_json_table.`enum_t` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t_div_json` = test_json_table.`enum_t` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: enum_t_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t_mod_json` = test_json_table.`enum_t` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: enum_t_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t_xor_json` = test_json_table.`enum_t` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: enum_t_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t_and_json` = test_json_table.`enum_t` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`enum_t_or_json` = test_json_table.`enum_t` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`set_t+json` = test_json_table.`set_t` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t+json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t-json` = test_json_table.`set_t` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t-json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t*json` = test_json_table.`set_t` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t*json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t/json` = test_json_table.`set_t` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t/json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t%json` = test_json_table.`set_t` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t%json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t^json` = test_json_table.`set_t` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t^json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t>>json` = test_json_table.`set_t` >> test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t>>json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t<<json` = test_json_table.`set_t` << test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: set_t<<json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t|json` = test_json_table.`set_t` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: set_t|json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t&json` = test_json_table.`set_t` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: set_t&json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t||json` = test_json_table.`set_t` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`set_t&&json` = test_json_table.`set_t` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`set_t_div_json` = test_json_table.`set_t` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(anyelement,json) line 3 at RETURN
referenced column: set_t_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t_mod_json` = test_json_table.`set_t` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(anyelement,json) line 3 at RETURN
referenced column: set_t_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t_xor_json` = test_json_table.`set_t` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(anyelement,json) line 3 at RETURN
referenced column: set_t_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`set_t_and_json` = test_json_table.`set_t` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`set_t_or_json` = test_json_table.`set_t` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+int1` = test_json_table.`json` + test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+int1
UPDATE test_json_type, test_json_table SET test_json_type.`json-int1` = test_json_table.`json` - test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-int1
UPDATE test_json_type, test_json_table SET test_json_type.`json*int1` = test_json_table.`json` * test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*int1
UPDATE test_json_type, test_json_table SET test_json_type.`json/int1` = test_json_table.`json` / test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/int1
UPDATE test_json_type, test_json_table SET test_json_type.`json%int1` = test_json_table.`json` % test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%int1
UPDATE test_json_type, test_json_table SET test_json_type.`json^int1` = test_json_table.`json` ^ test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^int1
UPDATE test_json_type, test_json_table SET test_json_type.`json>>int1` = test_json_table.`json` >> test_json_table.`int1`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>int1
UPDATE test_json_type, test_json_table SET test_json_type.`json<<int1` = test_json_table.`json` << test_json_table.`int1`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<int1
UPDATE test_json_type, test_json_table SET test_json_type.`json|int1` = test_json_table.`json` | test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json|int1
UPDATE test_json_type, test_json_table SET test_json_type.`json&int1` = test_json_table.`json` & test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json&int1
UPDATE test_json_type, test_json_table SET test_json_type.`json||int1` = test_json_table.`json` || test_json_table.`int1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&int1` = test_json_table.`json` && test_json_table.`int1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_int1` = test_json_table.`json` div test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_int1
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_int1` = test_json_table.`json` mod test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_int1
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_int1` = test_json_table.`json` xor test_json_table.`int1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_int1
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_int1` = test_json_table.`json` and test_json_table.`int1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_int1` = test_json_table.`json` or test_json_table.`int1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+uint1` = test_json_table.`json` + test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json-uint1` = test_json_table.`json` - test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json*uint1` = test_json_table.`json` * test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json/uint1` = test_json_table.`json` / test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json%uint1` = test_json_table.`json` % test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json^uint1` = test_json_table.`json` ^ test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json>>uint1` = test_json_table.`json` >> test_json_table.`uint1`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json<<uint1` = test_json_table.`json` << test_json_table.`uint1`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json|uint1` = test_json_table.`json` | test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json|uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json&uint1` = test_json_table.`json` & test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json&uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json||uint1` = test_json_table.`json` || test_json_table.`uint1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&uint1` = test_json_table.`json` && test_json_table.`uint1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_uint1` = test_json_table.`json` div test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_uint1` = test_json_table.`json` mod test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_uint1` = test_json_table.`json` xor test_json_table.`uint1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_uint1
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_uint1` = test_json_table.`json` and test_json_table.`uint1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_uint1` = test_json_table.`json` or test_json_table.`uint1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+int2` = test_json_table.`json` + test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+int2
UPDATE test_json_type, test_json_table SET test_json_type.`json-int2` = test_json_table.`json` - test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-int2
UPDATE test_json_type, test_json_table SET test_json_type.`json*int2` = test_json_table.`json` * test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*int2
UPDATE test_json_type, test_json_table SET test_json_type.`json/int2` = test_json_table.`json` / test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/int2
UPDATE test_json_type, test_json_table SET test_json_type.`json%int2` = test_json_table.`json` % test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%int2
UPDATE test_json_type, test_json_table SET test_json_type.`json^int2` = test_json_table.`json` ^ test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^int2
UPDATE test_json_type, test_json_table SET test_json_type.`json>>int2` = test_json_table.`json` >> test_json_table.`int2`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>int2
UPDATE test_json_type, test_json_table SET test_json_type.`json<<int2` = test_json_table.`json` << test_json_table.`int2`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<int2
UPDATE test_json_type, test_json_table SET test_json_type.`json|int2` = test_json_table.`json` | test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json|int2
UPDATE test_json_type, test_json_table SET test_json_type.`json&int2` = test_json_table.`json` & test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json&int2
UPDATE test_json_type, test_json_table SET test_json_type.`json||int2` = test_json_table.`json` || test_json_table.`int2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&int2` = test_json_table.`json` && test_json_table.`int2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_int2` = test_json_table.`json` div test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_int2
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_int2` = test_json_table.`json` mod test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_int2
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_int2` = test_json_table.`json` xor test_json_table.`int2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_int2
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_int2` = test_json_table.`json` and test_json_table.`int2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_int2` = test_json_table.`json` or test_json_table.`int2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+uint2` = test_json_table.`json` + test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json-uint2` = test_json_table.`json` - test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json*uint2` = test_json_table.`json` * test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json/uint2` = test_json_table.`json` / test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json%uint2` = test_json_table.`json` % test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json^uint2` = test_json_table.`json` ^ test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json>>uint2` = test_json_table.`json` >> test_json_table.`uint2`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json<<uint2` = test_json_table.`json` << test_json_table.`uint2`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json|uint2` = test_json_table.`json` | test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json|uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json&uint2` = test_json_table.`json` & test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json&uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json||uint2` = test_json_table.`json` || test_json_table.`uint2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&uint2` = test_json_table.`json` && test_json_table.`uint2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_uint2` = test_json_table.`json` div test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_uint2` = test_json_table.`json` mod test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_uint2` = test_json_table.`json` xor test_json_table.`uint2`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_uint2
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_uint2` = test_json_table.`json` and test_json_table.`uint2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_uint2` = test_json_table.`json` or test_json_table.`uint2`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+int4` = test_json_table.`json` + test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+int4
UPDATE test_json_type, test_json_table SET test_json_type.`json-int4` = test_json_table.`json` - test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-int4
UPDATE test_json_type, test_json_table SET test_json_type.`json*int4` = test_json_table.`json` * test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*int4
UPDATE test_json_type, test_json_table SET test_json_type.`json/int4` = test_json_table.`json` / test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/int4
UPDATE test_json_type, test_json_table SET test_json_type.`json%int4` = test_json_table.`json` % test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%int4
UPDATE test_json_type, test_json_table SET test_json_type.`json^int4` = test_json_table.`json` ^ test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^int4
UPDATE test_json_type, test_json_table SET test_json_type.`json>>int4` = test_json_table.`json` >> test_json_table.`int4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>int4
UPDATE test_json_type, test_json_table SET test_json_type.`json<<int4` = test_json_table.`json` << test_json_table.`int4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<int4
UPDATE test_json_type, test_json_table SET test_json_type.`json|int4` = test_json_table.`json` | test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json|int4
UPDATE test_json_type, test_json_table SET test_json_type.`json&int4` = test_json_table.`json` & test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json&int4
UPDATE test_json_type, test_json_table SET test_json_type.`json||int4` = test_json_table.`json` || test_json_table.`int4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&int4` = test_json_table.`json` && test_json_table.`int4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_int4` = test_json_table.`json` div test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_int4
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_int4` = test_json_table.`json` mod test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_int4
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_int4` = test_json_table.`json` xor test_json_table.`int4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_int4
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_int4` = test_json_table.`json` and test_json_table.`int4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_int4` = test_json_table.`json` or test_json_table.`int4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+uint4` = test_json_table.`json` + test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json-uint4` = test_json_table.`json` - test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json*uint4` = test_json_table.`json` * test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json/uint4` = test_json_table.`json` / test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json%uint4` = test_json_table.`json` % test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json^uint4` = test_json_table.`json` ^ test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json>>uint4` = test_json_table.`json` >> test_json_table.`uint4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json<<uint4` = test_json_table.`json` << test_json_table.`uint4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json|uint4` = test_json_table.`json` | test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json|uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json&uint4` = test_json_table.`json` & test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json&uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json||uint4` = test_json_table.`json` || test_json_table.`uint4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&uint4` = test_json_table.`json` && test_json_table.`uint4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_uint4` = test_json_table.`json` div test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_uint4` = test_json_table.`json` mod test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_uint4` = test_json_table.`json` xor test_json_table.`uint4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_uint4
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_uint4` = test_json_table.`json` and test_json_table.`uint4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_uint4` = test_json_table.`json` or test_json_table.`uint4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+int8` = test_json_table.`json` + test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+int8
UPDATE test_json_type, test_json_table SET test_json_type.`json-int8` = test_json_table.`json` - test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-int8
UPDATE test_json_type, test_json_table SET test_json_type.`json*int8` = test_json_table.`json` * test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*int8
UPDATE test_json_type, test_json_table SET test_json_type.`json/int8` = test_json_table.`json` / test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/int8
UPDATE test_json_type, test_json_table SET test_json_type.`json%int8` = test_json_table.`json` % test_json_table.`int8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json%int8
UPDATE test_json_type, test_json_table SET test_json_type.`json^int8` = test_json_table.`json` ^ test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^int8
UPDATE test_json_type, test_json_table SET test_json_type.`json>>int8` = test_json_table.`json` >> test_json_table.`int8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>int8
UPDATE test_json_type, test_json_table SET test_json_type.`json<<int8` = test_json_table.`json` << test_json_table.`int8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<int8
UPDATE test_json_type, test_json_table SET test_json_type.`json|int8` = test_json_table.`json` | test_json_table.`int8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|int8
UPDATE test_json_type, test_json_table SET test_json_type.`json&int8` = test_json_table.`json` & test_json_table.`int8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&int8
UPDATE test_json_type, test_json_table SET test_json_type.`json||int8` = test_json_table.`json` || test_json_table.`int8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&int8` = test_json_table.`json` && test_json_table.`int8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_int8` = test_json_table.`json` div test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_int8
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_int8` = test_json_table.`json` mod test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_int8
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_int8` = test_json_table.`json` xor test_json_table.`int8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_int8
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_int8` = test_json_table.`json` and test_json_table.`int8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_int8` = test_json_table.`json` or test_json_table.`int8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+uint8` = test_json_table.`json` + test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json-uint8` = test_json_table.`json` - test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json*uint8` = test_json_table.`json` * test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json/uint8` = test_json_table.`json` / test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json%uint8` = test_json_table.`json` % test_json_table.`uint8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json%uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json^uint8` = test_json_table.`json` ^ test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json>>uint8` = test_json_table.`json` >> test_json_table.`uint8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json<<uint8` = test_json_table.`json` << test_json_table.`uint8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json|uint8` = test_json_table.`json` | test_json_table.`uint8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json&uint8` = test_json_table.`json` & test_json_table.`uint8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json||uint8` = test_json_table.`json` || test_json_table.`uint8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&uint8` = test_json_table.`json` && test_json_table.`uint8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_uint8` = test_json_table.`json` div test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_uint8` = test_json_table.`json` mod test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_uint8` = test_json_table.`json` xor test_json_table.`uint8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_uint8
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_uint8` = test_json_table.`json` and test_json_table.`uint8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_uint8` = test_json_table.`json` or test_json_table.`uint8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+float4` = test_json_table.`json` + test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+float4
UPDATE test_json_type, test_json_table SET test_json_type.`json-float4` = test_json_table.`json` - test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-float4
UPDATE test_json_type, test_json_table SET test_json_type.`json*float4` = test_json_table.`json` * test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*float4
UPDATE test_json_type, test_json_table SET test_json_type.`json/float4` = test_json_table.`json` / test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/float4
UPDATE test_json_type, test_json_table SET test_json_type.`json%float4` = test_json_table.`json` % test_json_table.`float4`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%float4
UPDATE test_json_type, test_json_table SET test_json_type.`json^float4` = test_json_table.`json` ^ test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^float4
UPDATE test_json_type, test_json_table SET test_json_type.`json>>float4` = test_json_table.`json` >> test_json_table.`float4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>float4
UPDATE test_json_type, test_json_table SET test_json_type.`json<<float4` = test_json_table.`json` << test_json_table.`float4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<float4
UPDATE test_json_type, test_json_table SET test_json_type.`json|float4` = test_json_table.`json` | test_json_table.`float4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|float4
UPDATE test_json_type, test_json_table SET test_json_type.`json&float4` = test_json_table.`json` & test_json_table.`float4`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&float4
UPDATE test_json_type, test_json_table SET test_json_type.`json||float4` = test_json_table.`json` || test_json_table.`float4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&float4` = test_json_table.`json` && test_json_table.`float4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_float4` = test_json_table.`json` div test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_float4
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_float4` = test_json_table.`json` mod test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_float4
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_float4` = test_json_table.`json` xor test_json_table.`float4`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_float4
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_float4` = test_json_table.`json` and test_json_table.`float4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_float4` = test_json_table.`json` or test_json_table.`float4`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+float8` = test_json_table.`json` + test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+float8
UPDATE test_json_type, test_json_table SET test_json_type.`json-float8` = test_json_table.`json` - test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-float8
UPDATE test_json_type, test_json_table SET test_json_type.`json*float8` = test_json_table.`json` * test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*float8
UPDATE test_json_type, test_json_table SET test_json_type.`json/float8` = test_json_table.`json` / test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/float8
UPDATE test_json_type, test_json_table SET test_json_type.`json%float8` = test_json_table.`json` % test_json_table.`float8`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%float8
UPDATE test_json_type, test_json_table SET test_json_type.`json^float8` = test_json_table.`json` ^ test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^float8
UPDATE test_json_type, test_json_table SET test_json_type.`json>>float8` = test_json_table.`json` >> test_json_table.`float8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>float8
UPDATE test_json_type, test_json_table SET test_json_type.`json<<float8` = test_json_table.`json` << test_json_table.`float8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<float8
UPDATE test_json_type, test_json_table SET test_json_type.`json|float8` = test_json_table.`json` | test_json_table.`float8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|float8
UPDATE test_json_type, test_json_table SET test_json_type.`json&float8` = test_json_table.`json` & test_json_table.`float8`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&float8
UPDATE test_json_type, test_json_table SET test_json_type.`json||float8` = test_json_table.`json` || test_json_table.`float8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&float8` = test_json_table.`json` && test_json_table.`float8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_float8` = test_json_table.`json` div test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_float8
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_float8` = test_json_table.`json` mod test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_float8
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_float8` = test_json_table.`json` xor test_json_table.`float8`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_float8
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_float8` = test_json_table.`json` and test_json_table.`float8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_float8` = test_json_table.`json` or test_json_table.`float8`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+numeric` = test_json_table.`json` + test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json-numeric` = test_json_table.`json` - test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json*numeric` = test_json_table.`json` * test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json/numeric` = test_json_table.`json` / test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json%numeric` = test_json_table.`json` % test_json_table.`numeric`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json^numeric` = test_json_table.`json` ^ test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json>>numeric` = test_json_table.`json` >> test_json_table.`numeric`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json<<numeric` = test_json_table.`json` << test_json_table.`numeric`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json|numeric` = test_json_table.`json` | test_json_table.`numeric`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json&numeric` = test_json_table.`json` & test_json_table.`numeric`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json||numeric` = test_json_table.`json` || test_json_table.`numeric`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&numeric` = test_json_table.`json` && test_json_table.`numeric`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_numeric` = test_json_table.`json` div test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_numeric` = test_json_table.`json` mod test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_numeric` = test_json_table.`json` xor test_json_table.`numeric`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_numeric
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_numeric` = test_json_table.`json` and test_json_table.`numeric`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_numeric` = test_json_table.`json` or test_json_table.`numeric`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+bit1` = test_json_table.`json` + test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json-bit1` = test_json_table.`json` - test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json*bit1` = test_json_table.`json` * test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json/bit1` = test_json_table.`json` / test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json%bit1` = test_json_table.`json` % test_json_table.`bit1`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json^bit1` = test_json_table.`json` ^ test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json>>bit1` = test_json_table.`json` >> test_json_table.`bit1`;
ERROR:  operator does not exist: double precision >> bit
LINE 1: ...t_json_type.`json>>bit1` = test_json_table.`json` >> test_js...
                                                             ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<bit1` = test_json_table.`json` << test_json_table.`bit1`;
ERROR:  operator does not exist: double precision << bit
LINE 1: ...t_json_type.`json<<bit1` = test_json_table.`json` << test_js...
                                                             ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|bit1` = test_json_table.`json` | test_json_table.`bit1`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json&bit1` = test_json_table.`json` & test_json_table.`bit1`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json||bit1` = test_json_table.`json` || test_json_table.`bit1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&bit1` = test_json_table.`json` && test_json_table.`bit1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_bit1` = test_json_table.`json` div test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_bit1` = test_json_table.`json` mod test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_bit1` = test_json_table.`json` xor test_json_table.`bit1`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_bit1
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_bit1` = test_json_table.`json` and test_json_table.`bit1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_bit1` = test_json_table.`json` or test_json_table.`bit1`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+bit64` = test_json_table.`json` + test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json-bit64` = test_json_table.`json` - test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json*bit64` = test_json_table.`json` * test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json/bit64` = test_json_table.`json` / test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json%bit64` = test_json_table.`json` % test_json_table.`bit64`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json^bit64` = test_json_table.`json` ^ test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json>>bit64` = test_json_table.`json` >> test_json_table.`bit64`;
ERROR:  operator does not exist: double precision >> bit
LINE 1: ..._json_type.`json>>bit64` = test_json_table.`json` >> test_js...
                                                             ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<bit64` = test_json_table.`json` << test_json_table.`bit64`;
ERROR:  operator does not exist: double precision << bit
LINE 1: ..._json_type.`json<<bit64` = test_json_table.`json` << test_js...
                                                             ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|bit64` = test_json_table.`json` | test_json_table.`bit64`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json&bit64` = test_json_table.`json` & test_json_table.`bit64`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json||bit64` = test_json_table.`json` || test_json_table.`bit64`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&bit64` = test_json_table.`json` && test_json_table.`bit64`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_bit64` = test_json_table.`json` div test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_bit64` = test_json_table.`json` mod test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_bit64` = test_json_table.`json` xor test_json_table.`bit64`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_bit64
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_bit64` = test_json_table.`json` and test_json_table.`bit64`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_bit64` = test_json_table.`json` or test_json_table.`bit64`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+boolean` = test_json_table.`json` + test_json_table.`boolean`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json-boolean` = test_json_table.`json` - test_json_table.`boolean`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json*boolean` = test_json_table.`json` * test_json_table.`boolean`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json/boolean` = test_json_table.`json` / test_json_table.`boolean`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json%boolean` = test_json_table.`json` % test_json_table.`boolean`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json^boolean` = test_json_table.`json` ^ test_json_table.`boolean`;
ERROR:  failed to find conversion function from boolean to double precision
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json>>boolean` = test_json_table.`json` >> test_json_table.`boolean`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json<<boolean` = test_json_table.`json` << test_json_table.`boolean`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json|boolean` = test_json_table.`json` | test_json_table.`boolean`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json&boolean` = test_json_table.`json` & test_json_table.`boolean`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json||boolean` = test_json_table.`json` || test_json_table.`boolean`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&boolean` = test_json_table.`json` && test_json_table.`boolean`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_boolean` = test_json_table.`json` div test_json_table.`boolean`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_boolean
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_boolean` = test_json_table.`json` mod test_json_table.`boolean`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_boolean
-- UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_boolean` = test_json_table.`json` xor test_json_table.`boolean`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_boolean` = test_json_table.`json` and test_json_table.`boolean`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_boolean` = test_json_table.`json` or test_json_table.`boolean`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+date` = test_json_table.`json` + test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+date
UPDATE test_json_type, test_json_table SET test_json_type.`json-date` = test_json_table.`json` - test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-date
UPDATE test_json_type, test_json_table SET test_json_type.`json*date` = test_json_table.`json` * test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*date
UPDATE test_json_type, test_json_table SET test_json_type.`json/date` = test_json_table.`json` / test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/date
UPDATE test_json_type, test_json_table SET test_json_type.`json%date` = test_json_table.`json` % test_json_table.`date`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%date
UPDATE test_json_type, test_json_table SET test_json_type.`json^date` = test_json_table.`json` ^ test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^date
UPDATE test_json_type, test_json_table SET test_json_type.`json>>date` = test_json_table.`json` >> test_json_table.`date`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>date
UPDATE test_json_type, test_json_table SET test_json_type.`json<<date` = test_json_table.`json` << test_json_table.`date`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<date
UPDATE test_json_type, test_json_table SET test_json_type.`json|date` = test_json_table.`json` | test_json_table.`date`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|date
UPDATE test_json_type, test_json_table SET test_json_type.`json&date` = test_json_table.`json` & test_json_table.`date`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&date
UPDATE test_json_type, test_json_table SET test_json_type.`json||date` = test_json_table.`json` || test_json_table.`date`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&date` = test_json_table.`json` && test_json_table.`date`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_date` = test_json_table.`json` div test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_date
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_date` = test_json_table.`json` mod test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_date
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_date` = test_json_table.`json` xor test_json_table.`date`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_date
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_date` = test_json_table.`json` and test_json_table.`date`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_date` = test_json_table.`json` or test_json_table.`date`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+time` = test_json_table.`json` + test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+time
UPDATE test_json_type, test_json_table SET test_json_type.`json-time` = test_json_table.`json` - test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-time
UPDATE test_json_type, test_json_table SET test_json_type.`json*time` = test_json_table.`json` * test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*time
UPDATE test_json_type, test_json_table SET test_json_type.`json/time` = test_json_table.`json` / test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/time
UPDATE test_json_type, test_json_table SET test_json_type.`json%time` = test_json_table.`json` % test_json_table.`time`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%time
UPDATE test_json_type, test_json_table SET test_json_type.`json^time` = test_json_table.`json` ^ test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^time
UPDATE test_json_type, test_json_table SET test_json_type.`json>>time` = test_json_table.`json` >> test_json_table.`time`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>time
UPDATE test_json_type, test_json_table SET test_json_type.`json<<time` = test_json_table.`json` << test_json_table.`time`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<time
UPDATE test_json_type, test_json_table SET test_json_type.`json|time` = test_json_table.`json` | test_json_table.`time`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|time
UPDATE test_json_type, test_json_table SET test_json_type.`json&time` = test_json_table.`json` & test_json_table.`time`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&time
UPDATE test_json_type, test_json_table SET test_json_type.`json||time` = test_json_table.`json` || test_json_table.`time`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&time` = test_json_table.`json` && test_json_table.`time`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_time` = test_json_table.`json` div test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_time
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_time` = test_json_table.`json` mod test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_time
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_time` = test_json_table.`json` xor test_json_table.`time`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_time
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_time` = test_json_table.`json` and test_json_table.`time`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_time` = test_json_table.`json` or test_json_table.`time`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+time(4)` = test_json_table.`json` + test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json-time(4)` = test_json_table.`json` - test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json*time(4)` = test_json_table.`json` * test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json/time(4)` = test_json_table.`json` / test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json%time(4)` = test_json_table.`json` % test_json_table.`time(4)`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json^time(4)` = test_json_table.`json` ^ test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json>>time(4)` = test_json_table.`json` >> test_json_table.`time(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json<<time(4)` = test_json_table.`json` << test_json_table.`time(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json|time(4)` = test_json_table.`json` | test_json_table.`time(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json&time(4)` = test_json_table.`json` & test_json_table.`time(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json||time(4)` = test_json_table.`json` || test_json_table.`time(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&time(4)` = test_json_table.`json` && test_json_table.`time(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_time(4)` = test_json_table.`json` div test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_time(4)` = test_json_table.`json` mod test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_time(4)` = test_json_table.`json` xor test_json_table.`time(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_time(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_time(4)` = test_json_table.`json` and test_json_table.`time(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_time(4)` = test_json_table.`json` or test_json_table.`time(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+datetime` = test_json_table.`json` + test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json-datetime` = test_json_table.`json` - test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json*datetime` = test_json_table.`json` * test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json/datetime` = test_json_table.`json` / test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json%datetime` = test_json_table.`json` % test_json_table.`datetime`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json^datetime` = test_json_table.`json` ^ test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^datetime
WARNING:  integer out of range
CONTEXT:  referenced column: json^datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json>>datetime` = test_json_table.`json` >> test_json_table.`datetime`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>datetime
WARNING:  integer out of range
CONTEXT:  referenced column: json>>datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json<<datetime` = test_json_table.`json` << test_json_table.`datetime`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<datetime
WARNING:  integer out of range
CONTEXT:  referenced column: json<<datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json|datetime` = test_json_table.`json` | test_json_table.`datetime`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json&datetime` = test_json_table.`json` & test_json_table.`datetime`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json||datetime` = test_json_table.`json` || test_json_table.`datetime`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&datetime` = test_json_table.`json` && test_json_table.`datetime`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_datetime` = test_json_table.`json` div test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_datetime` = test_json_table.`json` mod test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_datetime` = test_json_table.`json` xor test_json_table.`datetime`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_datetime
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_datetime
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_datetime` = test_json_table.`json` and test_json_table.`datetime`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_datetime` = test_json_table.`json` or test_json_table.`datetime`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+datetime(4)` = test_json_table.`json` + test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json-datetime(4)` = test_json_table.`json` - test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json*datetime(4)` = test_json_table.`json` * test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json/datetime(4)` = test_json_table.`json` / test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json%datetime(4)` = test_json_table.`json` % test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json^datetime(4)` = test_json_table.`json` ^ test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^datetime(4)
WARNING:  integer out of range
CONTEXT:  referenced column: json^datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json>>datetime(4)` = test_json_table.`json` >> test_json_table.`datetime(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>datetime(4)
WARNING:  integer out of range
CONTEXT:  referenced column: json>>datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json<<datetime(4)` = test_json_table.`json` << test_json_table.`datetime(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<datetime(4)
WARNING:  integer out of range
CONTEXT:  referenced column: json<<datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json|datetime(4)` = test_json_table.`json` | test_json_table.`datetime(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json&datetime(4)` = test_json_table.`json` & test_json_table.`datetime(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json||datetime(4)` = test_json_table.`json` || test_json_table.`datetime(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&datetime(4)` = test_json_table.`json` && test_json_table.`datetime(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_datetime(4)` = test_json_table.`json` div test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_datetime(4)` = test_json_table.`json` mod test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_datetime(4)` = test_json_table.`json` xor test_json_table.`datetime(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_datetime(4)
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_datetime(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_datetime(4)` = test_json_table.`json` and test_json_table.`datetime(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_datetime(4)` = test_json_table.`json` or test_json_table.`datetime(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+timestamp` = test_json_table.`json` + test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json-timestamp` = test_json_table.`json` - test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json*timestamp` = test_json_table.`json` * test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json/timestamp` = test_json_table.`json` / test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json%timestamp` = test_json_table.`json` % test_json_table.`timestamp`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json^timestamp` = test_json_table.`json` ^ test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^timestamp
WARNING:  integer out of range
CONTEXT:  referenced column: json^timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json>>timestamp` = test_json_table.`json` >> test_json_table.`timestamp`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>timestamp
WARNING:  integer out of range
CONTEXT:  referenced column: json>>timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json<<timestamp` = test_json_table.`json` << test_json_table.`timestamp`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<timestamp
WARNING:  integer out of range
CONTEXT:  referenced column: json<<timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json|timestamp` = test_json_table.`json` | test_json_table.`timestamp`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json&timestamp` = test_json_table.`json` & test_json_table.`timestamp`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json||timestamp` = test_json_table.`json` || test_json_table.`timestamp`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&timestamp` = test_json_table.`json` && test_json_table.`timestamp`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_timestamp` = test_json_table.`json` div test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_timestamp` = test_json_table.`json` mod test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_timestamp` = test_json_table.`json` xor test_json_table.`timestamp`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_timestamp
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_timestamp
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_timestamp` = test_json_table.`json` and test_json_table.`timestamp`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_timestamp` = test_json_table.`json` or test_json_table.`timestamp`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+timestamp(4)` = test_json_table.`json` + test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json-timestamp(4)` = test_json_table.`json` - test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json*timestamp(4)` = test_json_table.`json` * test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json/timestamp(4)` = test_json_table.`json` / test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json%timestamp(4)` = test_json_table.`json` % test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json^timestamp(4)` = test_json_table.`json` ^ test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^timestamp(4)
WARNING:  integer out of range
CONTEXT:  referenced column: json^timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json>>timestamp(4)` = test_json_table.`json` >> test_json_table.`timestamp(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>timestamp(4)
WARNING:  integer out of range
CONTEXT:  referenced column: json>>timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json<<timestamp(4)` = test_json_table.`json` << test_json_table.`timestamp(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<timestamp(4)
WARNING:  integer out of range
CONTEXT:  referenced column: json<<timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json|timestamp(4)` = test_json_table.`json` | test_json_table.`timestamp(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json&timestamp(4)` = test_json_table.`json` & test_json_table.`timestamp(4)`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json||timestamp(4)` = test_json_table.`json` || test_json_table.`timestamp(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&timestamp(4)` = test_json_table.`json` && test_json_table.`timestamp(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_timestamp(4)` = test_json_table.`json` div test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_timestamp(4)` = test_json_table.`json` mod test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_timestamp(4)` = test_json_table.`json` xor test_json_table.`timestamp(4)`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_timestamp(4)
WARNING:  integer out of range
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_timestamp(4)
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_timestamp(4)` = test_json_table.`json` and test_json_table.`timestamp(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_timestamp(4)` = test_json_table.`json` or test_json_table.`timestamp(4)`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+year` = test_json_table.`json` + test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+year
UPDATE test_json_type, test_json_table SET test_json_type.`json-year` = test_json_table.`json` - test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-year
UPDATE test_json_type, test_json_table SET test_json_type.`json*year` = test_json_table.`json` * test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*year
UPDATE test_json_type, test_json_table SET test_json_type.`json/year` = test_json_table.`json` / test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/year
UPDATE test_json_type, test_json_table SET test_json_type.`json%year` = test_json_table.`json` % test_json_table.`year`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%year
UPDATE test_json_type, test_json_table SET test_json_type.`json^year` = test_json_table.`json` ^ test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^year
UPDATE test_json_type, test_json_table SET test_json_type.`json>>year` = test_json_table.`json` >> test_json_table.`year`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>year
UPDATE test_json_type, test_json_table SET test_json_type.`json<<year` = test_json_table.`json` << test_json_table.`year`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<year
UPDATE test_json_type, test_json_table SET test_json_type.`json|year` = test_json_table.`json` | test_json_table.`year`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|year
UPDATE test_json_type, test_json_table SET test_json_type.`json&year` = test_json_table.`json` & test_json_table.`year`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&year
UPDATE test_json_type, test_json_table SET test_json_type.`json||year` = test_json_table.`json` || test_json_table.`year`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&year` = test_json_table.`json` && test_json_table.`year`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_year` = test_json_table.`json` div test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_year
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_year` = test_json_table.`json` mod test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_year
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_year` = test_json_table.`json` xor test_json_table.`year`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_year
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_year` = test_json_table.`json` and test_json_table.`year`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_year` = test_json_table.`json` or test_json_table.`year`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+char` = test_json_table.`json` + test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+char
UPDATE test_json_type, test_json_table SET test_json_type.`json-char` = test_json_table.`json` - test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-char
UPDATE test_json_type, test_json_table SET test_json_type.`json*char` = test_json_table.`json` * test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*char
UPDATE test_json_type, test_json_table SET test_json_type.`json/char` = test_json_table.`json` / test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/char
UPDATE test_json_type, test_json_table SET test_json_type.`json%char` = test_json_table.`json` % test_json_table.`char`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%char
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: json%char
UPDATE test_json_type, test_json_table SET test_json_type.`json^char` = test_json_table.`json` ^ test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^char
UPDATE test_json_type, test_json_table SET test_json_type.`json>>char` = test_json_table.`json` >> test_json_table.`char`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>char
WARNING:  invalid input syntax for type integer: "1.23a"
CONTEXT:  referenced column: json>>char
UPDATE test_json_type, test_json_table SET test_json_type.`json<<char` = test_json_table.`json` << test_json_table.`char`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<char
WARNING:  invalid input syntax for type integer: "1.23a"
CONTEXT:  referenced column: json<<char
UPDATE test_json_type, test_json_table SET test_json_type.`json|char` = test_json_table.`json` | test_json_table.`char`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|char
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: json|char
UPDATE test_json_type, test_json_table SET test_json_type.`json&char` = test_json_table.`json` & test_json_table.`char`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&char
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: json&char
UPDATE test_json_type, test_json_table SET test_json_type.`json||char` = test_json_table.`json` || test_json_table.`char`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a                                                                                               
CONTEXT:  referenced column: json||char
UPDATE test_json_type, test_json_table SET test_json_type.`json&&char` = test_json_table.`json` && test_json_table.`char`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_char` = test_json_table.`json` div test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_char
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_char` = test_json_table.`json` mod test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_char
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_char` = test_json_table.`json` xor test_json_table.`char`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_char
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_char
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_char` = test_json_table.`json` and test_json_table.`char`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_char` = test_json_table.`json` or test_json_table.`char`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a                                                                                               
CONTEXT:  referenced column: json_or_char
UPDATE test_json_type, test_json_table SET test_json_type.`json+varchar` = test_json_table.`json` + test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json-varchar` = test_json_table.`json` - test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json*varchar` = test_json_table.`json` * test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json/varchar` = test_json_table.`json` / test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json%varchar` = test_json_table.`json` % test_json_table.`varchar`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%varchar
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: json%varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json^varchar` = test_json_table.`json` ^ test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json>>varchar` = test_json_table.`json` >> test_json_table.`varchar`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>varchar
WARNING:  invalid input syntax for type integer: "1.23a"
CONTEXT:  referenced column: json>>varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json<<varchar` = test_json_table.`json` << test_json_table.`varchar`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<varchar
WARNING:  invalid input syntax for type integer: "1.23a"
CONTEXT:  referenced column: json<<varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json|varchar` = test_json_table.`json` | test_json_table.`varchar`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|varchar
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: json|varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json&varchar` = test_json_table.`json` & test_json_table.`varchar`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&varchar
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: json&varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json||varchar` = test_json_table.`json` || test_json_table.`varchar`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a
CONTEXT:  referenced column: json||varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json&&varchar` = test_json_table.`json` && test_json_table.`varchar`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_varchar` = test_json_table.`json` div test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_varchar` = test_json_table.`json` mod test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_varchar` = test_json_table.`json` xor test_json_table.`varchar`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_varchar
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_varchar` = test_json_table.`json` and test_json_table.`varchar`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_varchar` = test_json_table.`json` or test_json_table.`varchar`;
WARNING:  Truncated incorrect DOUBLE value: 1.23a
CONTEXT:  referenced column: json_or_varchar
UPDATE test_json_type, test_json_table SET test_json_type.`json+binary` = test_json_table.`json` + test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+binary
UPDATE test_json_type, test_json_table SET test_json_type.`json-binary` = test_json_table.`json` - test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-binary
UPDATE test_json_type, test_json_table SET test_json_type.`json*binary` = test_json_table.`json` * test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*binary
UPDATE test_json_type, test_json_table SET test_json_type.`json/binary` = test_json_table.`json` / test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/binary
UPDATE test_json_type, test_json_table SET test_json_type.`json%binary` = test_json_table.`json` % test_json_table.`binary`;
ERROR:  failed to find conversion function from "binary" to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json^binary` = test_json_table.`json` ^ test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^binary
UPDATE test_json_type, test_json_table SET test_json_type.`json>>binary` = test_json_table.`json` >> test_json_table.`binary`;
ERROR:  failed to find conversion function from "binary" to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<binary` = test_json_table.`json` << test_json_table.`binary`;
ERROR:  failed to find conversion function from "binary" to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|binary` = test_json_table.`json` | test_json_table.`binary`;
ERROR:  failed to find conversion function from "binary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json&binary` = test_json_table.`json` & test_json_table.`binary`;
ERROR:  failed to find conversion function from "binary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json||binary` = test_json_table.`json` || test_json_table.`binary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&binary` = test_json_table.`json` && test_json_table.`binary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_binary` = test_json_table.`json` div test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_binary
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_binary` = test_json_table.`json` mod test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_binary
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_binary` = test_json_table.`json` xor test_json_table.`binary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_binary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_binary
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_binary` = test_json_table.`json` and test_json_table.`binary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_binary` = test_json_table.`json` or test_json_table.`binary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+varbinary` = test_json_table.`json` + test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json-varbinary` = test_json_table.`json` - test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json*varbinary` = test_json_table.`json` * test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json/varbinary` = test_json_table.`json` / test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json%varbinary` = test_json_table.`json` % test_json_table.`varbinary`;
ERROR:  failed to find conversion function from "varbinary" to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json^varbinary` = test_json_table.`json` ^ test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json>>varbinary` = test_json_table.`json` >> test_json_table.`varbinary`;
ERROR:  failed to find conversion function from "varbinary" to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<varbinary` = test_json_table.`json` << test_json_table.`varbinary`;
ERROR:  failed to find conversion function from "varbinary" to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|varbinary` = test_json_table.`json` | test_json_table.`varbinary`;
ERROR:  failed to find conversion function from "varbinary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json&varbinary` = test_json_table.`json` & test_json_table.`varbinary`;
ERROR:  failed to find conversion function from "varbinary" to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json||varbinary` = test_json_table.`json` || test_json_table.`varbinary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&varbinary` = test_json_table.`json` && test_json_table.`varbinary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_varbinary` = test_json_table.`json` div test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_varbinary` = test_json_table.`json` mod test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_varbinary` = test_json_table.`json` xor test_json_table.`varbinary`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_varbinary
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_varbinary
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_varbinary` = test_json_table.`json` and test_json_table.`varbinary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_varbinary` = test_json_table.`json` or test_json_table.`varbinary`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+tinyblob` = test_json_table.`json` + test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json-tinyblob` = test_json_table.`json` - test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json*tinyblob` = test_json_table.`json` * test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json/tinyblob` = test_json_table.`json` / test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json%tinyblob` = test_json_table.`json` % test_json_table.`tinyblob`;
ERROR:  failed to find conversion function from tinyblob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json^tinyblob` = test_json_table.`json` ^ test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json>>tinyblob` = test_json_table.`json` >> test_json_table.`tinyblob`;
ERROR:  failed to find conversion function from tinyblob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<tinyblob` = test_json_table.`json` << test_json_table.`tinyblob`;
ERROR:  failed to find conversion function from tinyblob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|tinyblob` = test_json_table.`json` | test_json_table.`tinyblob`;
ERROR:  failed to find conversion function from tinyblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json&tinyblob` = test_json_table.`json` & test_json_table.`tinyblob`;
ERROR:  failed to find conversion function from tinyblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json||tinyblob` = test_json_table.`json` || test_json_table.`tinyblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&tinyblob` = test_json_table.`json` && test_json_table.`tinyblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_tinyblob` = test_json_table.`json` div test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_tinyblob` = test_json_table.`json` mod test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_tinyblob` = test_json_table.`json` xor test_json_table.`tinyblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_tinyblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_tinyblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_tinyblob` = test_json_table.`json` and test_json_table.`tinyblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_tinyblob` = test_json_table.`json` or test_json_table.`tinyblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+blob` = test_json_table.`json` + test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+blob
UPDATE test_json_type, test_json_table SET test_json_type.`json-blob` = test_json_table.`json` - test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-blob
UPDATE test_json_type, test_json_table SET test_json_type.`json*blob` = test_json_table.`json` * test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*blob
UPDATE test_json_type, test_json_table SET test_json_type.`json/blob` = test_json_table.`json` / test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/blob
UPDATE test_json_type, test_json_table SET test_json_type.`json%blob` = test_json_table.`json` % test_json_table.`blob`;
ERROR:  failed to find conversion function from blob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json^blob` = test_json_table.`json` ^ test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^blob
UPDATE test_json_type, test_json_table SET test_json_type.`json>>blob` = test_json_table.`json` >> test_json_table.`blob`;
ERROR:  failed to find conversion function from blob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<blob` = test_json_table.`json` << test_json_table.`blob`;
ERROR:  failed to find conversion function from blob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|blob` = test_json_table.`json` | test_json_table.`blob`;
ERROR:  failed to find conversion function from blob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json&blob` = test_json_table.`json` & test_json_table.`blob`;
ERROR:  failed to find conversion function from blob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json||blob` = test_json_table.`json` || test_json_table.`blob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&blob` = test_json_table.`json` && test_json_table.`blob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_blob` = test_json_table.`json` div test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_blob
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_blob` = test_json_table.`json` mod test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_blob
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_blob` = test_json_table.`json` xor test_json_table.`blob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_blob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_blob
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_blob` = test_json_table.`json` and test_json_table.`blob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_blob` = test_json_table.`json` or test_json_table.`blob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+mediumblob` = test_json_table.`json` + test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json-mediumblob` = test_json_table.`json` - test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json*mediumblob` = test_json_table.`json` * test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json/mediumblob` = test_json_table.`json` / test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json%mediumblob` = test_json_table.`json` % test_json_table.`mediumblob`;
ERROR:  failed to find conversion function from mediumblob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json^mediumblob` = test_json_table.`json` ^ test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json>>mediumblob` = test_json_table.`json` >> test_json_table.`mediumblob`;
ERROR:  failed to find conversion function from mediumblob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<mediumblob` = test_json_table.`json` << test_json_table.`mediumblob`;
ERROR:  failed to find conversion function from mediumblob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|mediumblob` = test_json_table.`json` | test_json_table.`mediumblob`;
ERROR:  failed to find conversion function from mediumblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json&mediumblob` = test_json_table.`json` & test_json_table.`mediumblob`;
ERROR:  failed to find conversion function from mediumblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json||mediumblob` = test_json_table.`json` || test_json_table.`mediumblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&mediumblob` = test_json_table.`json` && test_json_table.`mediumblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_mediumblob` = test_json_table.`json` div test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_mediumblob` = test_json_table.`json` mod test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_mediumblob` = test_json_table.`json` xor test_json_table.`mediumblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_mediumblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_mediumblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_mediumblob` = test_json_table.`json` and test_json_table.`mediumblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_mediumblob` = test_json_table.`json` or test_json_table.`mediumblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+longblob` = test_json_table.`json` + test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json-longblob` = test_json_table.`json` - test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json*longblob` = test_json_table.`json` * test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json/longblob` = test_json_table.`json` / test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json%longblob` = test_json_table.`json` % test_json_table.`longblob`;
ERROR:  failed to find conversion function from longblob to numeric
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json^longblob` = test_json_table.`json` ^ test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json>>longblob` = test_json_table.`json` >> test_json_table.`longblob`;
ERROR:  failed to find conversion function from longblob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json<<longblob` = test_json_table.`json` << test_json_table.`longblob`;
ERROR:  failed to find conversion function from longblob to integer
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json|longblob` = test_json_table.`json` | test_json_table.`longblob`;
ERROR:  failed to find conversion function from longblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json&longblob` = test_json_table.`json` & test_json_table.`longblob`;
ERROR:  failed to find conversion function from longblob to bigint
CONTEXT:  referenced column: test_json_type
UPDATE test_json_type, test_json_table SET test_json_type.`json||longblob` = test_json_table.`json` || test_json_table.`longblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&longblob` = test_json_table.`json` && test_json_table.`longblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_longblob` = test_json_table.`json` div test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_longblob` = test_json_table.`json` mod test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_longblob` = test_json_table.`json` xor test_json_table.`longblob`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_longblob
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_longblob
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_longblob` = test_json_table.`json` and test_json_table.`longblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_longblob` = test_json_table.`json` or test_json_table.`longblob`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+text` = test_json_table.`json` + test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json+text
UPDATE test_json_type, test_json_table SET test_json_type.`json-text` = test_json_table.`json` - test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json-text
UPDATE test_json_type, test_json_table SET test_json_type.`json*text` = test_json_table.`json` * test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json*text
UPDATE test_json_type, test_json_table SET test_json_type.`json/text` = test_json_table.`json` / test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json/text
UPDATE test_json_type, test_json_table SET test_json_type.`json%text` = test_json_table.`json` % test_json_table.`text`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%text
WARNING:  invalid input syntax for type numeric: "1.23a"
CONTEXT:  referenced column: json%text
UPDATE test_json_type, test_json_table SET test_json_type.`json^text` = test_json_table.`json` ^ test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  referenced column: json^text
UPDATE test_json_type, test_json_table SET test_json_type.`json>>text` = test_json_table.`json` >> test_json_table.`text`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>text
WARNING:  invalid input syntax for type integer: "1.23a"
CONTEXT:  referenced column: json>>text
UPDATE test_json_type, test_json_table SET test_json_type.`json<<text` = test_json_table.`json` << test_json_table.`text`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<text
WARNING:  invalid input syntax for type integer: "1.23a"
CONTEXT:  referenced column: json<<text
UPDATE test_json_type, test_json_table SET test_json_type.`json|text` = test_json_table.`json` | test_json_table.`text`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|text
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: json|text
UPDATE test_json_type, test_json_table SET test_json_type.`json&text` = test_json_table.`json` & test_json_table.`text`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&text
WARNING:  invalid input syntax for type bigint: "1.23a"
CONTEXT:  referenced column: json&text
UPDATE test_json_type, test_json_table SET test_json_type.`json||text` = test_json_table.`json` || test_json_table.`text`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&text` = test_json_table.`json` && test_json_table.`text`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_text` = test_json_table.`json` div test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_text
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_text` = test_json_table.`json` mod test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_text
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_text` = test_json_table.`json` xor test_json_table.`text`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_text
WARNING:  invalid input syntax for type double precision: "1.23a"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_text
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_text` = test_json_table.`json` and test_json_table.`text`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_text` = test_json_table.`json` or test_json_table.`text`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+enum_t` = test_json_table.`json` + test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json-enum_t` = test_json_table.`json` - test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json*enum_t` = test_json_table.`json` * test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json/enum_t` = test_json_table.`json` / test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json%enum_t` = test_json_table.`json` % test_json_table.`enum_t`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json^enum_t` = test_json_table.`json` ^ test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json>>enum_t` = test_json_table.`json` >> test_json_table.`enum_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json<<enum_t` = test_json_table.`json` << test_json_table.`enum_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json|enum_t` = test_json_table.`json` | test_json_table.`enum_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json&enum_t` = test_json_table.`json` & test_json_table.`enum_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json||enum_t` = test_json_table.`json` || test_json_table.`enum_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&enum_t` = test_json_table.`json` && test_json_table.`enum_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_enum_t` = test_json_table.`json` div test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_enum_t` = test_json_table.`json` mod test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_enum_t` = test_json_table.`json` xor test_json_table.`enum_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_enum_t
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_enum_t` = test_json_table.`json` and test_json_table.`enum_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_enum_t` = test_json_table.`json` or test_json_table.`enum_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+set_t` = test_json_table.`json` + test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json-set_t` = test_json_table.`json` - test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json*set_t` = test_json_table.`json` * test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json/set_t` = test_json_table.`json` / test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json%set_t` = test_json_table.`json` % test_json_table.`set_t`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json^set_t` = test_json_table.`json` ^ test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json>>set_t` = test_json_table.`json` >> test_json_table.`set_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json<<set_t` = test_json_table.`json` << test_json_table.`set_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json|set_t` = test_json_table.`json` | test_json_table.`set_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json&set_t` = test_json_table.`json` & test_json_table.`set_t`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json||set_t` = test_json_table.`json` || test_json_table.`set_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&set_t` = test_json_table.`json` && test_json_table.`set_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_set_t` = test_json_table.`json` div test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,anyelement) line 3 at RETURN
referenced column: json_div_set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_set_t` = test_json_table.`json` mod test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,anyelement) line 3 at RETURN
referenced column: json_mod_set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_set_t` = test_json_table.`json` xor test_json_table.`set_t`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,anyelement) line 3 at RETURN
referenced column: json_xor_set_t
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_set_t` = test_json_table.`json` and test_json_table.`set_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_set_t` = test_json_table.`json` or test_json_table.`set_t`;
UPDATE test_json_type, test_json_table SET test_json_type.`json+json` = test_json_table.`json` + test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json+json
UPDATE test_json_type, test_json_table SET test_json_type.`json-json` = test_json_table.`json` - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json-json
UPDATE test_json_type, test_json_table SET test_json_type.`json*json` = test_json_table.`json` * test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json*json
UPDATE test_json_type, test_json_table SET test_json_type.`json/json` = test_json_table.`json` / test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json/json
UPDATE test_json_type, test_json_table SET test_json_type.`json%json` = test_json_table.`json` % test_json_table.`json`;
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%json
WARNING:  invalid input syntax for type numeric: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json%json
UPDATE test_json_type, test_json_table SET test_json_type.`json^json` = test_json_table.`json` ^ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json^json
UPDATE test_json_type, test_json_table SET test_json_type.`json>>json` = test_json_table.`json` >> test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json>>json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json>>json
UPDATE test_json_type, test_json_table SET test_json_type.`json<<json` = test_json_table.`json` << test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json<<json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: json<<json
UPDATE test_json_type, test_json_table SET test_json_type.`json|json` = test_json_table.`json` | test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json|json
UPDATE test_json_type, test_json_table SET test_json_type.`json&json` = test_json_table.`json` & test_json_table.`json`;
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&json
WARNING:  Truncated incorrect INTEGER value: '{"a": 1, "b": 2}'
CONTEXT:  referenced column: json&json
UPDATE test_json_type, test_json_table SET test_json_type.`json||json` = test_json_table.`json` || test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`json&&json` = test_json_table.`json` && test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_div_json` = test_json_table.`json` div test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,json) line 3 at RETURN
referenced column: json_div_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function "div"(json,json) line 3 at RETURN
referenced column: json_div_json
UPDATE test_json_type, test_json_table SET test_json_type.`json_mod_json` = test_json_table.`json` mod test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,json) line 3 at RETURN
referenced column: json_mod_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  PL/pgSQL function b_mod(json,json) line 3 at RETURN
referenced column: json_mod_json
UPDATE test_json_type, test_json_table SET test_json_type.`json_xor_json` = test_json_table.`json` xor test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,json) line 3 at RETURN
referenced column: json_xor_json
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  SQL statement "SELECT (select a ^ b)"
PL/pgSQL function "xor"(json,json) line 3 at RETURN
referenced column: json_xor_json
UPDATE test_json_type, test_json_table SET test_json_type.`json_and_json` = test_json_table.`json` and test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`json_or_json` = test_json_table.`json` or test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`+json` = + test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`-json` = - test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: -json
UPDATE test_json_type, test_json_table SET test_json_type.`~json` = ~ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: ~json
UPDATE test_json_type, test_json_table SET test_json_type.`@json` = @ test_json_table.`json`;
WARNING:  invalid input syntax for type double precision: "{"a": 1, "b": 2}"
CONTEXT:  referenced column: @json
UPDATE test_json_type, test_json_table SET test_json_type.`!json` = ! test_json_table.`json`;
UPDATE test_json_type, test_json_table SET test_json_type.`not_json` = not test_json_table.`json`;
\x
SELECT * FROM test_json_type;
-[ RECORD 1 ]---------+-----------------------------------------------------------------
int1+json             | 1
int1-json             | 1
int1*json             | 0
int1/json             | 
int1%json             | 
int1^json             | 1
int1>>json            | 1
int1<<json            | 1
int1|json             | 1
int1&json             | 0
int1||json            | t
int1&&json            | f
int1_div_json         | 
int1_mod_json         | 
int1_xor_json         | 1
int1_and_json         | f
int1_or_json          | t
uint1+json            | 1
uint1-json            | 1
uint1*json            | 0
uint1/json            | 
uint1%json            | 
uint1^json            | 1
uint1>>json           | 1
uint1<<json           | 1
uint1|json            | 1
uint1&json            | 0
uint1||json           | t
uint1&&json           | f
uint1_div_json        | 
uint1_mod_json        | 
uint1_xor_json        | 1
uint1_and_json        | f
uint1_or_json         | t
int2+json             | 1
int2-json             | 1
int2*json             | 0
int2/json             | 
int2%json             | 
int2^json             | 1
int2>>json            | 1
int2<<json            | 1
int2|json             | 1
int2&json             | 0
int2||json            | t
int2&&json            | f
int2_div_json         | 
int2_mod_json         | 
int2_xor_json         | 1
int2_and_json         | f
int2_or_json          | t
uint2+json            | 1
uint2-json            | 1
uint2*json            | 0
uint2/json            | 
uint2%json            | 
uint2^json            | 1
uint2>>json           | 1
uint2<<json           | 1
uint2|json            | 1
uint2&json            | 0
uint2||json           | t
uint2&&json           | f
uint2_div_json        | 
uint2_mod_json        | 
uint2_xor_json        | 1
uint2_and_json        | f
uint2_or_json         | t
int4+json             | 1
int4-json             | 1
int4*json             | 0
int4/json             | 
int4%json             | 
int4^json             | 1
int4>>json            | 1
int4<<json            | 1
int4|json             | 1
int4&json             | 0
int4||json            | t
int4&&json            | f
int4_div_json         | 
int4_mod_json         | 
int4_xor_json         | 1
int4_and_json         | f
int4_or_json          | t
uint4+json            | 1
uint4-json            | 1
uint4*json            | 0
uint4/json            | 
uint4%json            | 
uint4^json            | 1
uint4>>json           | 1
uint4<<json           | 1
uint4|json            | 1
uint4&json            | 0
uint4||json           | t
uint4&&json           | f
uint4_div_json        | 
uint4_mod_json        | 
uint4_xor_json        | 1
uint4_and_json        | f
uint4_or_json         | t
int8+json             | 1
int8-json             | 1
int8*json             | 0
int8/json             | 
int8%json             | 
int8^json             | 1
int8>>json            | 1
int8<<json            | 1
int8|json             | 1
int8&json             | 0
int8||json            | t
int8&&json            | f
int8_div_json         | 
int8_mod_json         | 
int8_xor_json         | 1
int8_and_json         | f
int8_or_json          | t
uint8+json            | 1
uint8-json            | 1
uint8*json            | 0
uint8/json            | 
uint8%json            | 
uint8^json            | 1
uint8>>json           | 1
uint8<<json           | 1
uint8|json            | 1
uint8&json            | 0
uint8||json           | t
uint8&&json           | f
uint8_div_json        | 
uint8_mod_json        | 
uint8_xor_json        | 1
uint8_and_json        | f
uint8_or_json         | t
float4+json           | 1
float4-json           | 1
float4*json           | 0
float4/json           | 
float4%json           | 
float4^json           | 1
float4>>json          | 1
float4<<json          | 1
float4|json           | 1
float4&json           | 0
float4||json          | t
float4&&json          | f
float4_div_json       | 
float4_mod_json       | 
float4_xor_json       | 1
float4_and_json       | f
float4_or_json        | t
float8+json           | 1
float8-json           | 1
float8*json           | 0
float8/json           | 
float8%json           | 
float8^json           | 1
float8>>json          | 1
float8<<json          | 1
float8|json           | 1
float8&json           | 0
float8||json          | t
float8&&json          | f
float8_div_json       | 
float8_mod_json       | 
float8_xor_json       | 1
float8_and_json       | f
float8_or_json        | t
numeric+json          | 1
numeric-json          | 1
numeric*json          | 0
numeric/json          | 
numeric%json          | 
numeric^json          | 1
numeric>>json         | 1
numeric<<json         | 1
numeric|json          | 1
numeric&json          | 0
numeric||json         | t
numeric&&json         | f
numeric_div_json      | 
numeric_mod_json      | 
numeric_xor_json      | 1
numeric_and_json      | f
numeric_or_json       | t
bit1+json             | 1
bit1-json             | 1
bit1*json             | 0
bit1/json             | 
bit1%json             | 
bit1^json             | 1
bit1>>json            | 1
bit1<<json            | 1
bit1|json             | 1
bit1&json             | 0
bit1||json            | t
bit1&&json            | f
bit1_div_json         | 
bit1_mod_json         | 
bit1_xor_json         | 1
bit1_and_json         | f
bit1_or_json          | t
bit64+json            | 7
bit64-json            | 7
bit64*json            | 0
bit64/json            | 
bit64%json            | 
bit64^json            | 7
bit64>>json           | 0000000000000000000000000000000000000000000000000000000000000111
bit64<<json           | 0000000000000000000000000000000000000000000000000000000000000111
bit64|json            | 7
bit64&json            | 0
bit64||json           | t
bit64&&json           | f
bit64_div_json        | 
bit64_mod_json        | 
bit64_xor_json        | 7
bit64_and_json        | f
bit64_or_json         | t
boolean+json          | 1
boolean-json          | 1
boolean*json          | 0
boolean/json          | 
boolean%json          | 
boolean>>json         | 1
boolean<<json         | 1
boolean|json          | 1
boolean&json          | 0
boolean||json         | t
boolean&&json         | f
boolean_div_json      | 
boolean_mod_json      | 
boolean_and_json      | f
boolean_or_json       | t
date+json             | 20230205
date-json             | 20230205
date*json             | 0
date/json             | 
date%json             | 
date^json             | 20230205
date>>json            | 20230205
date<<json            | 20230205
date|json             | 20230205
date&json             | 0
date||json            | t
date&&json            | f
date_div_json         | 
date_mod_json         | 
date_xor_json         | 20230205
date_and_json         | f
date_or_json          | t
time+json             | 191050
time-json             | 191050
time*json             | 0
time/json             | 
time%json             | 
time^json             | 191050
time>>json            | 191050
time<<json            | 191050
time|json             | 191050
time&json             | 0
time||json            | t
time&&json            | f
time_div_json         | 
time_mod_json         | 
time_xor_json         | 191050
time_and_json         | f
time_or_json          | t
time(4)+json          | 191050.3456
time(4)-json          | 191050.3456
time(4)*json          | 0
time(4)/json          | 
time(4)%json          | 
time(4)^json          | 191050
time(4)>>json         | 191050
time(4)<<json         | 191050
time(4)|json          | 191050
time(4)&json          | 0
time(4)||json         | t
time(4)&&json         | f
time(4)_div_json      | 
time(4)_mod_json      | 
time(4)_xor_json      | 191050
time(4)_and_json      | f
time(4)_or_json       | t
datetime+json         | 20230205191050
datetime-json         | 20230205191050
datetime*json         | 0
datetime/json         | 
datetime%json         | 
datetime^json         | 2147483647
datetime>>json        | 20230205191050
datetime<<json        | 20230205191050
datetime|json         | 20230205191050
datetime&json         | 0
datetime||json        | t
datetime&&json        | f
datetime_div_json     | 
datetime_mod_json     | 
datetime_xor_json     | 2147483647
datetime_and_json     | f
datetime_or_json      | t
datetime(4)+json      | 20230205191050.5
datetime(4)-json      | 20230205191050.5
datetime(4)*json      | 0
datetime(4)/json      | 
datetime(4)%json      | 
datetime(4)^json      | 2147483647
datetime(4)>>json     | 20230205191050
datetime(4)<<json     | 20230205191050
datetime(4)|json      | 20230205191050
datetime(4)&json      | 0
datetime(4)||json     | t
datetime(4)&&json     | f
datetime(4)_div_json  | 
datetime(4)_mod_json  | 
datetime(4)_xor_json  | 2147483647
datetime(4)_and_json  | f
datetime(4)_or_json   | t
timestamp+json        | 20230205191050
timestamp-json        | 20230205191050
timestamp*json        | 0
timestamp/json        | 
timestamp%json        | 
timestamp^json        | 2147483647
timestamp>>json       | 20230205191050
timestamp<<json       | 20230205191050
timestamp|json        | 20230205191050
timestamp&json        | 0
timestamp||json       | t
timestamp&&json       | f
timestamp_div_json    | 
timestamp_mod_json    | 
timestamp_xor_json    | 2147483647
timestamp_and_json    | f
timestamp_or_json     | t
timestamp(4)+json     | 20230205191050.5
timestamp(4)-json     | 20230205191050.5
timestamp(4)*json     | 0
timestamp(4)/json     | 
timestamp(4)%json     | 
timestamp(4)^json     | 2147483647
timestamp(4)>>json    | 20230205191050
timestamp(4)<<json    | 20230205191050
timestamp(4)|json     | 20230205191050
timestamp(4)&json     | 0
timestamp(4)||json    | t
timestamp(4)&&json    | f
timestamp(4)_div_json | 
timestamp(4)_mod_json | 
timestamp(4)_xor_json | 2147483647
timestamp(4)_and_json | f
timestamp(4)_or_json  | t
year+json             | 2023
year-json             | 2023
year*json             | 0
year/json             | 
year%json             | 
year^json             | 2023
year>>json            | 2023
year<<json            | 2023
year|json             | 2023
year&json             | 0
year||json            | t
year&&json            | f
year_div_json         | 
year_mod_json         | 
year_xor_json         | 2023
year_and_json         | f
year_or_json          | t
char+json             | 1.23
char-json             | 1.23
char*json             | 0
char/json             | 
char%json             | 
char^json             | 1
char>>json            | 1
char<<json            | 1
char|json             | 1
char&json             | 0
char||json            | t
char&&json            | f
char_div_json         | 
char_mod_json         | 
char_xor_json         | 1
char_and_json         | f
char_or_json          | t
varchar+json          | 1.23
varchar-json          | 1.23
varchar*json          | 0
varchar/json          | 
varchar%json          | 
varchar^json          | 1
varchar>>json         | 1
varchar<<json         | 1
varchar|json          | 1
varchar&json          | 0
varchar||json         | t
varchar&&json         | f
varchar_div_json      | 
varchar_mod_json      | 
varchar_xor_json      | 1
varchar_and_json      | f
varchar_or_json       | t
binary+json           | 1.23
binary-json           | 1.23
binary*json           | 0
binary/json           | 
binary^json           | 1
binary||json          | t
binary&&json          | f
binary_div_json       | 
binary_mod_json       | 
binary_xor_json       | 1
binary_and_json       | f
binary_or_json        | t
varbinary+json        | 1.23
varbinary-json        | 1.23
varbinary*json        | 0
varbinary/json        | 
varbinary^json        | 1
varbinary||json       | t
varbinary&&json       | f
varbinary_div_json    | 
varbinary_mod_json    | 
varbinary_xor_json    | 1
varbinary_and_json    | f
varbinary_or_json     | t
tinyblob+json         | 1.23
tinyblob-json         | 1.23
tinyblob*json         | 0
tinyblob/json         | 
tinyblob^json         | 1
tinyblob||json        | t
tinyblob&&json        | f
tinyblob_div_json     | 
tinyblob_mod_json     | 
tinyblob_xor_json     | 1
tinyblob_and_json     | f
tinyblob_or_json      | t
blob+json             | 1.23
blob-json             | 1.23
blob*json             | 0
blob/json             | 
blob^json             | 1
blob||json            | t
blob&&json            | f
blob_div_json         | 
blob_mod_json         | 
blob_xor_json         | 1
blob_and_json         | f
blob_or_json          | t
mediumblob+json       | 1.23
mediumblob-json       | 1.23
mediumblob*json       | 0
mediumblob/json       | 
mediumblob^json       | 1
mediumblob||json      | t
mediumblob&&json      | f
mediumblob_div_json   | 
mediumblob_mod_json   | 
mediumblob_xor_json   | 1
mediumblob_and_json   | f
mediumblob_or_json    | t
longblob+json         | 1.23
longblob-json         | 1.23
longblob*json         | 0
longblob/json         | 
longblob^json         | 1
longblob||json        | t
longblob&&json        | f
longblob_div_json     | 
longblob_mod_json     | 
longblob_xor_json     | 1
longblob_and_json     | f
longblob_or_json      | t
text+json             | 1.23
text-json             | 1.23
text*json             | 0
text/json             | 
text%json             | 
text^json             | 1
text>>json            | 1
text<<json            | 1
text|json             | 1
text&json             | 0
text||json            | t
text&&json            | f
text_div_json         | 
text_mod_json         | 
text_xor_json         | 1
text_and_json         | f
text_or_json          | t
enum_t+json           | 1
enum_t-json           | 1
enum_t*json           | 0
enum_t/json           | 
enum_t%json           | 
enum_t^json           | 1
enum_t>>json          | 1
enum_t<<json          | 1
enum_t|json           | 1
enum_t&json           | 0
enum_t||json          | t
enum_t&&json          | f
enum_t_div_json       | 
enum_t_mod_json       | 
enum_t_xor_json       | 1
enum_t_and_json       | f
enum_t_or_json        | t
set_t+json            | 5
set_t-json            | 5
set_t*json            | 0
set_t/json            | 
set_t%json            | 
set_t^json            | 5
set_t>>json           | 5
set_t<<json           | 5
set_t|json            | 5
set_t&json            | 0
set_t||json           | t
set_t&&json           | f
set_t_div_json        | 
set_t_mod_json        | 
set_t_xor_json        | 5
set_t_and_json        | f
set_t_or_json         | t
json+int1             | 1
json-int1             | -1
json*int1             | 0
json/int1             | 0
json%int1             | 0
json^int1             | 1
json>>int1            | 0
json<<int1            | 0
json|int1             | 1
json&int1             | 0
json||int1            | t
json&&int1            | f
json_div_int1         | 0
json_mod_int1         | 0
json_xor_int1         | 1
json_and_int1         | f
json_or_int1          | t
json+uint1            | 1
json-uint1            | -1
json*uint1            | 0
json/uint1            | 0
json%uint1            | 0
json^uint1            | 1
json>>uint1           | 0
json<<uint1           | 0
json|uint1            | 1
json&uint1            | 0
json||uint1           | t
json&&uint1           | f
json_div_uint1        | 0
json_mod_uint1        | 0
json_xor_uint1        | 1
json_and_uint1        | f
json_or_uint1         | t
json+int2             | 1
json-int2             | -1
json*int2             | 0
json/int2             | 0
json%int2             | 0
json^int2             | 1
json>>int2            | 0
json<<int2            | 0
json|int2             | 1
json&int2             | 0
json||int2            | t
json&&int2            | f
json_div_int2         | 0
json_mod_int2         | 0
json_xor_int2         | 1
json_and_int2         | f
json_or_int2          | t
json+uint2            | 1
json-uint2            | -1
json*uint2            | 0
json/uint2            | 0
json%uint2            | 0
json^uint2            | 1
json>>uint2           | 0
json<<uint2           | 0
json|uint2            | 1
json&uint2            | 0
json||uint2           | t
json&&uint2           | f
json_div_uint2        | 0
json_mod_uint2        | 0
json_xor_uint2        | 1
json_and_uint2        | f
json_or_uint2         | t
json+int4             | 1
json-int4             | -1
json*int4             | 0
json/int4             | 0
json%int4             | 0
json^int4             | 1
json>>int4            | 0
json<<int4            | 0
json|int4             | 1
json&int4             | 0
json||int4            | t
json&&int4            | f
json_div_int4         | 0
json_mod_int4         | 0
json_xor_int4         | 1
json_and_int4         | f
json_or_int4          | t
json+uint4            | 1
json-uint4            | -1
json*uint4            | 0
json/uint4            | 0
json%uint4            | 0
json^uint4            | 1
json>>uint4           | 0
json<<uint4           | 0
json|uint4            | 1
json&uint4            | 0
json||uint4           | t
json&&uint4           | f
json_div_uint4        | 0
json_mod_uint4        | 0
json_xor_uint4        | 1
json_and_uint4        | f
json_or_uint4         | t
json+int8             | 1
json-int8             | -1
json*int8             | 0
json/int8             | 0
json%int8             | 0
json^int8             | 1
json>>int8            | 0
json<<int8            | 0
json|int8             | 1
json&int8             | 0
json||int8            | t
json&&int8            | f
json_div_int8         | 0
json_mod_int8         | 0
json_xor_int8         | 1
json_and_int8         | f
json_or_int8          | t
json+uint8            | 1
json-uint8            | -1
json*uint8            | 0
json/uint8            | 0
json%uint8            | 0
json^uint8            | 1
json>>uint8           | 0
json<<uint8           | 0
json|uint8            | 1
json&uint8            | 0
json||uint8           | t
json&&uint8           | f
json_div_uint8        | 0
json_mod_uint8        | 0
json_xor_uint8        | 1
json_and_uint8        | f
json_or_uint8         | t
json+float4           | 1
json-float4           | -1
json*float4           | 0
json/float4           | 0
json%float4           | 0
json^float4           | 1
json>>float4          | 0
json<<float4          | 0
json|float4           | 1
json&float4           | 0
json||float4          | t
json&&float4          | f
json_div_float4       | 0
json_mod_float4       | 0
json_xor_float4       | 1
json_and_float4       | f
json_or_float4        | t
json+float8           | 1
json-float8           | -1
json*float8           | 0
json/float8           | 0
json%float8           | 0
json^float8           | 1
json>>float8          | 0
json<<float8          | 0
json|float8           | 1
json&float8           | 0
json||float8          | t
json&&float8          | f
json_div_float8       | 0
json_mod_float8       | 0
json_xor_float8       | 1
json_and_float8       | f
json_or_float8        | t
json+numeric          | 1
json-numeric          | -1
json*numeric          | 0
json/numeric          | 0
json%numeric          | 0.000000
json^numeric          | 1
json>>numeric         | 0
json<<numeric         | 0
json|numeric          | 1
json&numeric          | 0
json||numeric         | t
json&&numeric         | f
json_div_numeric      | 0
json_mod_numeric      | 0
json_xor_numeric      | 1
json_and_numeric      | f
json_or_numeric       | t
json+bit1             | 1
json-bit1             | -1
json*bit1             | 0
json/bit1             | 0
json%bit1             | 0
json^bit1             | 1
json|bit1             | 1
json&bit1             | 0
json||bit1            | t
json&&bit1            | f
json_div_bit1         | 0
json_mod_bit1         | 0
json_xor_bit1         | 1
json_and_bit1         | f
json_or_bit1          | t
json+bit64            | 7
json-bit64            | -7
json*bit64            | 0
json/bit64            | 0
json%bit64            | 0
json^bit64            | 7
json|bit64            | 7
json&bit64            | 0
json||bit64           | t
json&&bit64           | f
json_div_bit64        | 0
json_mod_bit64        | 0
json_xor_bit64        | 7
json_and_bit64        | f
json_or_bit64         | t
json+boolean          | 1
json-boolean          | -1
json*boolean          | 0
json/boolean          | 0
json%boolean          | 0
json>>boolean         | 0
json<<boolean         | 0
json|boolean          | 1
json&boolean          | 0
json||boolean         | t
json&&boolean         | f
json_div_boolean      | 0
json_mod_boolean      | 0
json_and_boolean      | f
json_or_boolean       | t
json+date             | 20230205
json-date             | -20230205
json*date             | 0
json/date             | 0
json%date             | 0
json^date             | 20230205
json>>date            | 0
json<<date            | 0
json|date             | 20230205
json&date             | 0
json||date            | t
json&&date            | f
json_div_date         | 0
json_mod_date         | 0
json_xor_date         | 20230205
json_and_date         | f
json_or_date          | t
json+time             | 191050
json-time             | -191050
json*time             | 0
json/time             | 0
json%time             | 0
json^time             | 191050
json>>time            | 0
json<<time            | 0
json|time             | 191050
json&time             | 0
json||time            | t
json&&time            | f
json_div_time         | 0
json_mod_time         | 0
json_xor_time         | 191050
json_and_time         | f
json_or_time          | t
json+time(4)          | 191050.3456
json-time(4)          | -191050.3456
json*time(4)          | 0
json/time(4)          | 0
json%time(4)          | 0.000000
json^time(4)          | 191050
json>>time(4)         | 0
json<<time(4)         | 0
json|time(4)          | 191050
json&time(4)          | 0
json||time(4)         | t
json&&time(4)         | f
json_div_time(4)      | 0
json_mod_time(4)      | 0.0000
json_xor_time(4)      | 191050
json_and_time(4)      | f
json_or_time(4)       | t
json+datetime         | 20230205191050
json-datetime         | -20230205191050
json*datetime         | 0
json/datetime         | 0
json%datetime         | 0
json^datetime         | 2147483647
json>>datetime        | 0
json<<datetime        | 0
json|datetime         | 20230205191050
json&datetime         | 0
json||datetime        | t
json&&datetime        | f
json_div_datetime     | 0
json_mod_datetime     | 0
json_xor_datetime     | 2147483647
json_and_datetime     | f
json_or_datetime      | t
json+datetime(4)      | 20230205191050.5
json-datetime(4)      | -20230205191050.5
json*datetime(4)      | 0
json/datetime(4)      | 0
json%datetime(4)      | 0.000000
json^datetime(4)      | 2147483647
json>>datetime(4)     | 0
json<<datetime(4)     | 0
json|datetime(4)      | 20230205191050
json&datetime(4)      | 0
json||datetime(4)     | t
json&&datetime(4)     | f
json_div_datetime(4)  | 0
json_mod_datetime(4)  | 0.0
json_xor_datetime(4)  | 2147483647
json_and_datetime(4)  | f
json_or_datetime(4)   | t
json+timestamp        | 20230205191050
json-timestamp        | -20230205191050
json*timestamp        | 0
json/timestamp        | 0
json%timestamp        | 0
json^timestamp        | 2147483647
json>>timestamp       | 0
json<<timestamp       | 0
json|timestamp        | 20230205191050
json&timestamp        | 0
json||timestamp       | t
json&&timestamp       | f
json_div_timestamp    | 0
json_mod_timestamp    | 0
json_xor_timestamp    | 2147483647
json_and_timestamp    | f
json_or_timestamp     | t
json+timestamp(4)     | 20230205191050.5
json-timestamp(4)     | -20230205191050.5
json*timestamp(4)     | 0
json/timestamp(4)     | 0
json%timestamp(4)     | 0.000000
json^timestamp(4)     | 2147483647
json>>timestamp(4)    | 0
json<<timestamp(4)    | 0
json|timestamp(4)     | 20230205191050
json&timestamp(4)     | 0
json||timestamp(4)    | t
json&&timestamp(4)    | f
json_div_timestamp(4) | 0
json_mod_timestamp(4) | 0.0
json_xor_timestamp(4) | 2147483647
json_and_timestamp(4) | f
json_or_timestamp(4)  | t
json+year             | 2023
json-year             | -2023
json*year             | 0
json/year             | 0
json%year             | 0
json^year             | 2023
json>>year            | 0
json<<year            | 0
json|year             | 2023
json&year             | 0
json||year            | t
json&&year            | f
json_div_year         | 0
json_mod_year         | 0
json_xor_year         | 2023
json_and_year         | f
json_or_year          | t
json+char             | 1.23
json-char             | -1.23
json*char             | 0
json/char             | 0
json%char             | 0.00
json^char             | 1
json>>char            | 0
json<<char            | 0
json|char             | 1
json&char             | 0
json||char            | t
json&&char            | f
json_div_char         | 0
json_mod_char         | 0.00
json_xor_char         | 1
json_and_char         | f
json_or_char          | t
json+varchar          | 1.23
json-varchar          | -1.23
json*varchar          | 0
json/varchar          | 0
json%varchar          | 0.00
json^varchar          | 1
json>>varchar         | 0
json<<varchar         | 0
json|varchar          | 1
json&varchar          | 0
json||varchar         | t
json&&varchar         | f
json_div_varchar      | 0
json_mod_varchar      | 0.00
json_xor_varchar      | 1
json_and_varchar      | f
json_or_varchar       | t
json+binary           | 1.23
json-binary           | -1.23
json*binary           | 0
json/binary           | 0
json^binary           | 1
json||binary          | t
json&&binary          | f
json_div_binary       | 0
json_mod_binary       | 0.00
json_xor_binary       | 1
json_and_binary       | f
json_or_binary        | t
json+varbinary        | 1.23
json-varbinary        | -1.23
json*varbinary        | 0
json/varbinary        | 0
json^varbinary        | 1
json||varbinary       | t
json&&varbinary       | f
json_div_varbinary    | 0
json_mod_varbinary    | 0.00
json_xor_varbinary    | 1
json_and_varbinary    | f
json_or_varbinary     | t
json+tinyblob         | 1.23
json-tinyblob         | -1.23
json*tinyblob         | 0
json/tinyblob         | 0
json^tinyblob         | 1
json||tinyblob        | t
json&&tinyblob        | f
json_div_tinyblob     | 0
json_mod_tinyblob     | 0.00
json_xor_tinyblob     | 1
json_and_tinyblob     | f
json_or_tinyblob      | t
json+blob             | 1.23
json-blob             | -1.23
json*blob             | 0
json/blob             | 0
json^blob             | 1
json||blob            | t
json&&blob            | f
json_div_blob         | 0
json_mod_blob         | 0.00
json_xor_blob         | 1
json_and_blob         | f
json_or_blob          | t
json+mediumblob       | 1.23
json-mediumblob       | -1.23
json*mediumblob       | 0
json/mediumblob       | 0
json^mediumblob       | 1
json||mediumblob      | t
json&&mediumblob      | f
json_div_mediumblob   | 0
json_mod_mediumblob   | 0.00
json_xor_mediumblob   | 1
json_and_mediumblob   | f
json_or_mediumblob    | t
json+longblob         | 1.23
json-longblob         | -1.23
json*longblob         | 0
json/longblob         | 0
json^longblob         | 1
json||longblob        | t
json&&longblob        | f
json_div_longblob     | 0
json_mod_longblob     | 0.00
json_xor_longblob     | 1
json_and_longblob     | f
json_or_longblob      | t
json+text             | 1.23
json-text             | -1.23
json*text             | 0
json/text             | 0
json%text             | 0.00
json^text             | 1
json>>text            | 0
json<<text            | 0
json|text             | 1
json&text             | 0
json||text            | t
json&&text            | f
json_div_text         | 0
json_mod_text         | 0.00
json_xor_text         | 1
json_and_text         | f
json_or_text          | t
json+enum_t           | 1
json-enum_t           | -1
json*enum_t           | 0
json/enum_t           | 0
json%enum_t           | 0
json^enum_t           | 1
json>>enum_t          | 0
json<<enum_t          | 0
json|enum_t           | 1
json&enum_t           | 0
json||enum_t          | t
json&&enum_t          | f
json_div_enum_t       | 0
json_mod_enum_t       | 0
json_xor_enum_t       | 1
json_and_enum_t       | f
json_or_enum_t        | t
json+set_t            | 5
json-set_t            | -5
json*set_t            | 0
json/set_t            | 0
json%set_t            | 0
json^set_t            | 5
json>>set_t           | 0
json<<set_t           | 0
json|set_t            | 5
json&set_t            | 0
json||set_t           | t
json&&set_t           | f
json_div_set_t        | 0
json_mod_set_t        | 0
json_xor_set_t        | 5
json_and_set_t        | f
json_or_set_t         | t
json+json             | 0
json-json             | 0
json*json             | 0
json/json             | 
json%json             | 
json^json             | 0
json>>json            | 0
json<<json            | 0
json|json             | 0
json&json             | 0
json||json            | f
json&&json            | f
json_div_json         | 
json_mod_json         | 
json_xor_json         | 0
json_and_json         | f
json_or_json          | f
+json                 | {"a": 1, "b": 2}
-json                 | 0
~json                 | 18446744073709551615
@json                 | 0
!json                 | t
not_json              | t

---------- tail ----------
drop schema json_operator_test_schema cascade;
NOTICE:  drop cascades to 4 other objects
--?.*
drop cascades to type test_json_table_set_t_set
drop cascades to table test_json_table
drop cascades to table test_json_type
reset current_schema;
