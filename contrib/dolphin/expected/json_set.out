create schema test_json_set;
set current_schema to 'test_json_set';
select json_set('{"1":2}','$."1"',6);
 json_set 
----------
 {"1": 6}
(1 row)

select json_set('{"1":2,"b":"r","q":0}','$.b',6);
         json_set         
--------------------------
 {"1": 2, "b": 6, "q": 0}
(1 row)

select json_set('[1,2,[3,4,5]]','$[2]',9,'$[3]','[1,2]');
      json_set      
--------------------
 [1, 2, 9, "[1,2]"]
(1 row)

select json_set('[1,2,[3,4,5]]','$[1]',9,'$[2][3]',22);
       json_set        
-----------------------
 [1, 9, [3, 4, 5, 22]]
(1 row)

select json_set('[1,2,[3,4,5]]','$[2]',9,'$[2][3]',22);
    json_set     
-----------------
 [1, 2, [9, 22]]
(1 row)

select json_set('{"student":{"id":1,"gender":"man"}}','$.age',23);
                      json_set                      
----------------------------------------------------
 {"age": 23, "student": {"id": 1, "gender": "man"}}
(1 row)

select json_set('{"student":{"id":1,"gender":"man"}}','$.student.age',23);
                      json_set                      
----------------------------------------------------
 {"student": {"id": 1, "age": 23, "gender": "man"}}
(1 row)

select json_set('{"student":{"id":1,"gender":"man"}}','$.age',23,'$.student.id',3);
                      json_set                      
----------------------------------------------------
 {"age": 23, "student": {"id": 3, "gender": "man"}}
(1 row)

select json_set('[1,2]','$.[1]');
ERROR:  Incorrect parameter count in the call to native function 'JSON_SET'
CONTEXT:  referenced column: json_set
select json_set(null);
ERROR:  Incorrect parameter count in the call to native function 'JSON_SET'
CONTEXT:  referenced column: json_set
select json_set('{"name":"lc"}',2,3);
ERROR:  Invalid JSON path expression. The error is around argument 1.
CONTEXT:  referenced column: json_set
select json_set(null,2,2);
 json_set 
----------
 
(1 row)

select json_set(null,2);
ERROR:  Incorrect parameter count in the call to native function 'JSON_SET'
CONTEXT:  referenced column: json_set
select json_set('{"name":"lc"}','$.name','lcc','$.id',45);
         json_set          
---------------------------
 {"id": 45, "name": "lcc"}
(1 row)

select json_set('x',2,2);
ERROR:  Invalid JSON text in argument 1 to function json_set.
CONTEXT:  referenced column: json_set
select json_set('{"s":2}','$**.s',4);
ERROR:  In this situation, path expressions may not contain the * and ** tokens.
CONTEXT:  referenced column: json_set
select json_set('{"s":3}',null,4);
 json_set 
----------
 
(1 row)

select json_set('{"s":3}','$.s',null);
  json_set   
-------------
 {"s": null}
(1 row)

select json_set('{"s":3}','$.s','d');
  json_set  
------------
 {"s": "d"}
(1 row)

select json_set('{"s":3}','$.s',341522654875451.12345678901234567890123456789012345678901234567890);
                                 json_set                                  
---------------------------------------------------------------------------
 {"s": 341522654875451.12345678901234567890123456789012345678901234567890}
(1 row)

create table dataa(name VARCHAR(20) PRIMARY KEY);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "dataa_pkey" for table "dataa"
insert into dataa (name) value(json_set('{"s":1}','$.s',3,'$.w',5));
select name from dataa;
       name       
------------------
 {"s": 3, "w": 5}
(1 row)

drop table dataa;
create table t1_z (jdoc JSON);
insert into t1_z select ('{' || string_agg('"key' || i || '": "value' || i || '"', ',') || '}')::json from generate_series(1,10) as i;
select json_set(jdoc,'$.key09','test09','$.key1','test1') from t1_z;
                                                                                                 json_set                                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"key1": "test1", "key2": "value2", "key3": "value3", "key4": "value4", "key5": "value5", "key6": "value6", "key7": "value7", "key8": "value8", "key9": "value9", "key09": "test09", "key10": "value10"}
(1 row)

drop table t1_z;
drop schema test_json_set cascade;
reset current_schema;
