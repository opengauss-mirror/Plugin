create database envision with dbcompatibility 'b';
\c envision
create schema envision;
set current_schema TO envision;

CREATE TABLE IF NOT EXISTS `yx_channel` (
  `yx_id` bigint NOT NULL,
  `channel` tinyint unsigned NOT NULL,
  `raw_data` tinyint unsigned DEFAULT NULL,
  `q` bigint DEFAULT NULL,
  `ld_alias` varchar(64) DEFAULT NULL,
  `order_no` smallint DEFAULT '-1',
  `gin` bigint DEFAULT NULL,
  `source_mode` tinyint unsigned DEFAULT NULL,
  `change_time` bigint DEFAULT '0',
  PRIMARY KEY (`yx_id`,`channel`),
  Unique KEY `i_yx_channel_1` (`ld_alias`,`channel`,`order_no`)
) ;

CREATE or replace FUNCTION "ti_yx_channel_trigger_function"() RETURNS "trigger"
    LANGUAGE "plpgsql" NOT SHIPPABLE
AS $$
DECLARE
    num1 INTEGER;
BEGIN
    IF NEW.ld_alias IS NOT NULL AND NEW.order_no >= 0 THEN
        SELECT COUNT(*) INTO num1 FROM yx_channel
          WHERE channel = NEW.channel AND ld_alias = NEW.ld_alias AND order_no = NEW.order_no ;
        IF num1 > 0 THEN
        END IF ;
    END IF ;
    RETURN NEW;
END$$;

CREATE TRIGGER "ti_yx_channel" BEFORE INSERT ON "yx_channel" FOR EACH ROW EXECUTE PROCEDURE "ti_yx_channel_trigger_function"();

-- schema
\! @abs_bindir@/gs_dump -p @portstring@ -s -E=utf8 -n envision --lock-wait-timeout=300000 -c envision -f @abs_bindir@/gs_dump_unique_key.sql >/dev/null 2>&1; echo $?
\! @abs_bindir@/gsql -d envision -p @portstring@ -f "@abs_bindir@/gs_dump_unique_key.sql";

drop schema envision cascade;
\c postgres
drop database envision;
