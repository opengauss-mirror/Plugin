DROP DATABASE IF EXISTS test_db;
CREATE DATABASE test_db DBCOMPATIBILITY 'B';
CREATE USER "Root_Test" WITH PASSWORD 'openGauss@123';
GRANT ALL PRIVILEGES TO "Root_Test";
\c test_db
SET ROLE "Root_Test" PASSWORD 'openGauss@123';
CREATE USER "Test_User" with password 'openGauss@123';
CREATE VIEW definer_test_view1 AS SELECT log(10, 100);
CREATE DEFINER="Test_User" VIEW definer_test_view2 AS SELECT log(10, 100);
CREATE OR REPLACE DEFINER="Test_User" VIEW definer_test_view3 AS SELECT log(10, 100);
GRANT ALL PRIVILEGES TO "Test_User";
CREATE DEFINER="Test_User" VIEW definer_test_view2 AS SELECT log(10, 100);
CREATE OR REPLACE DEFINER="Test_User" VIEW definer_test_view3 AS SELECT log(10, 100);

SELECT c.relname as view_name, u.usename as rolname FROM pg_class c, pg_user u WHERE u.usesysid = c.relowner AND relname like '%definer_test_view%' order by view_name;

CREATE USER test_user2 with password 'openGauss@123';
SELECT * FROM definer_test_view1;
ALTER VIEW definer_test_view1 AS SELECT log(10, 1000);
SELECT * FROM definer_test_view1;
ALTER DEFINER=test_user2 VIEW definer_test_view2 AS SELECT log(10, 100);
create table tab_1107262(id int,c1 int);
create or replace procedure pro_1107262(n int)
as
begin
repeat
insert into tab_1107262 values(n,n*2);
n:=n+1;
until n>10 end repeat;
end;
/

SELECT c.relname as view_name, u.usename as rolname FROM pg_class c, pg_user u WHERE u.usesysid = c.relowner AND relname like '%definer_test_view%' order by view_name;

-- dump all views
\! @abs_bindir@/gs_dump test_db -p @portstring@ --include-depend-objs --exclude-self --disable-progress | grep -vE '^SET|^REVOKE|^GRANT|^--|^gs_dump|^COMMENT|^DROP'| tr -s '\n' > @abs_bindir@/definer_view_dump.sql 2>&1
\! cat @abs_bindir@/definer_view_dump.sql
\! @abs_bindir@/gs_dump test_db -p @portstring@ -F c -f @abs_bindir@/definer_view_dump.dmp --disable-progress
CREATE DATABASE target DBCOMPATIBILITY 'B';

\! @abs_bindir@/gs_restore -d target -p @portstring@ @abs_bindir@/definer_view_dump.dmp --disable-progress

SELECT * FROM definer_test_view1;
SELECT * FROM definer_test_view2;
SELECT * FROM definer_test_view3;

SELECT c.relname as view_name, u.usename as rolname FROM pg_class c, pg_user u WHERE u.usesysid = c.relowner AND relname like '%definer_test_view%' order by view_name;

RESET ROLE;

create database test_1;
\c test_1
create table startwith_t(id int, level int, connect_by_isleaf int, connect_by_iscycle int);
create view startwith_v as select id, connect_by_isleaf as level, level as connect_by_isleaf from startwith_t;

\! @abs_bindir@/gs_dump test_1 -p @portstring@ -f @abs_bindir@/dump_postgres.sql --disable-progress
drop database if exists test_2;
create database test_2;
\! @abs_bindir@/gsql -d test_2 -p @portstring@ -f @abs_bindir@/dump_postgres.sql
\! @abs_bindir@/gsql -d test_2 -p @portstring@ -c "select * from startwith_v;"

\c test_db
create user use_a_1144425 identified by 'A@123456';
create user use_b_1144425 identified by 'A@123456';
create table sql_security_1144425(id int,cal int);
insert into sql_security_1144425 values(1,1);
insert into sql_security_1144425 values(2,2);
insert into sql_security_1144425 values(3,3);
--user a can create view in shcema
grant all on schema public to use_a_1144425;

-- definer 
create definer=use_a_1144425 sql security definer view v_1144425_2 as select * from sql_security_1144425;
-- invoker 
create definer=use_a_1144425 sql security invoker view v_1144425_1 as select * from sql_security_1144425;

--user a call view shoule be failed cause table operation
set role use_a_1144425 password 'A@123456';
select * from sql_security_1144425 order by 1,2;
-- call definer\invoker  view shoule be failed
select * from v_1144425_2 order by 1,2;
select * from v_1144425_1 order by 1,2;
-- root user shoule success in invoker ,failed in definer
reset role;
select * from v_1144425_2 order by 1,2;
select * from v_1144425_1 order by 1,2;
--user b call view shoule filed , no view permission both
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
select * from v_1144425_1 order by 1,2;
--give user b permission of view , no table permission both
reset role;
grant all on table v_1144425_2 to use_b_1144425;
grant all on table v_1144425_1 to use_b_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
select * from v_1144425_1 order by 1,2;
-- give user b permission of table , invoker success 
reset role;
grant all on table sql_security_1144425 to use_b_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
select * from v_1144425_1 order by 1,2;
-- give user a permission of table , definer  success 
reset role;
grant all on table sql_security_1144425 to use_a_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
-- revoke user b permision of table , definer success, invoker failed
reset role;
revoke all on table sql_security_1144425 from use_b_1144425;
set role use_b_1144425 password 'A@123456';
select * from v_1144425_2 order by 1,2;
select * from v_1144425_1 order by 1,2;
reset role;
-- test auth passdown for multi view;
--clear all 
drop table sql_security_1144425 cascade;
drop user use_a_1144425 cascade;
drop user use_b_1144425 cascade;

create user use_a_1144425 identified by 'A@123456';
create user use_b_1144425 identified by 'A@123456';
create table sql_security_1144425(id int,cal int);
insert into sql_security_1144425 values(1,1);
--user a can create view in shcema
grant all on schema public to use_a_1144425;
-- definer view v_d_inner
create definer=use_a_1144425 sql security definer view v_d_inner as select * from sql_security_1144425;
-- invoker view v_i_inner
create definer=use_a_1144425 sql security invoker view v_i_inner as select * from sql_security_1144425;
-- definer view v_d_d_outer
create definer=use_a_1144425 sql security definer view v_d_d_outer as select * from v_d_inner;
-- definer view v_d_i_outer
create definer=use_a_1144425 sql security definer view v_d_i_outer as select * from v_i_inner;
-- definer view v_i_d_outer
create definer=use_a_1144425 sql security invoker view v_i_d_outer as select * from v_d_inner;
-- definer view v_i_i_outer
create definer=use_a_1144425 sql security invoker view v_i_i_outer as select * from v_i_inner;
-- root could only success in vii 
select * from v_i_i_outer;
select * from v_i_d_outer;
select * from v_d_i_outer;
select * from v_d_d_outer;
-- give user b permisson of view;
grant all on table v_i_i_outer to use_b_1144425;
grant all on table v_i_d_outer to use_b_1144425;
grant all on table v_d_i_outer to use_b_1144425;
grant all on table v_d_d_outer to use_b_1144425;
-- user b got error of table ,in vdi ,vdd. vii ,vid got view error
set role use_b_1144425 password 'A@123456';
select * from v_i_i_outer;
select * from v_i_d_outer;
select * from v_d_i_outer;
select * from v_d_d_outer;
--now give user a permission of table 
reset role;
grant all on table sql_security_1144425 to use_a_1144425;
-- root could  success in all 
select * from v_i_i_outer;
select * from v_i_d_outer;
select * from v_d_i_outer;
select * from v_d_d_outer;
-- user b only success in  vdd , vdi
set role use_b_1144425 password 'A@123456';
select * from v_i_i_outer;
select * from v_i_d_outer;
select * from v_d_i_outer;
select * from v_d_d_outer;
reset role;
-- coverage test
create view v1 as select * from sql_security_1144425;
create or replace view v1 as select * from sql_security_1144425;
create or replace definer=use_a_1144425 view v1 as select * from sql_security_1144425;
create sql security invoker view v2 as select * from sql_security_1144425;
create or replace sql security invoker view v2 as select * from sql_security_1144425;
create or replace definer=use_a_1144425 sql security invoker view v2 as select * from sql_security_1144425;
alter view v1 as select * from sql_security_1144425;
alter definer=use_a_1144425 view v1 as select * from sql_security_1144425;
alter sql security definer view v2 as select * from sql_security_1144425;
alter definer=use_a_1144425 sql security definer view v2 as select * from sql_security_1144425;
alter sql security definer view v1 as select * from sql_security_1144425;
alter definer=use_a_1144425 sql security definer view v1 as select * from sql_security_1144425;

--pg_dump test 
--see view_definer_test.source

--clear all 
drop table sql_security_1144425 cascade;
drop user use_a_1144425 cascade;
drop user use_b_1144425 cascade;

\c contrib_regression
drop database test_db;
drop database test_1;
drop database test_2;
drop database target;
DROP USER "Test_User";
DROP USER test_user2;
DROP USER "Root_Test" CASCADE;
