// This is a generated file

#include "comps.h"

#ifndef _FUNCSCOMPS_H
#define _FUNCSCOMPS_H

#define HASH_TRACE_CONFIG "3f878f095ee251a1236fc52c1a0eb6be0861c4a0e138957844f6674b6b5b4b87"

struct comp_func {
   uint32_t comp;
   uint32_t func_num;
   const char **func_names;
};

struct comp_name {
    uint32_t comp;
    const char *compName;
};


static const char* GS_TRC_COMMON_FUNC_NAMES[] =
{
    "",
    "charshow_estimated_time",
    "charshow_datasize",
    "UpdateDBStateFile"
};

static const char* GS_TRC_LIBPQ_FUNC_NAMES[] =
{
    "",
    "StreamServerPort",
    "StreamConnection",
    "StreamClose",
    "TouchSocketFile",
    "pq_init",
    "pq_comm_reset",
    "pq_getbytes",
    "pq_getstring",
    "pq_getmessage",
    "pq_getbyte",
    "pq_peekbyte",
    "pq_getbyte_if_available",
    "pq_putbytes",
    "pq_flush",
    "pq_flush_if_writable",
    "pq_flush_timedwait",
    "pq_is_send_pending",
    "pq_putmessage",
    "pq_putmessage_noblock",
    "pq_startcopyout",
    "pq_endcopyout",
    "pq_select"
};

static const char* GS_TRC_PG_CTL_FUNC_NAMES[] =
{
    "",
    "ReceiveXlogStream",
    "get_replconn_number",
    "ParseReplConnInfo"
};

static const char* GS_TRC_ACCESS_FUNC_NAMES[] =
{
    "",
    "heap_compute_data_size",
    "heap_fill_tuple",
    "heap_attisnull",
    "nocache_cmprs_get_attr",
    "nocachegetattr",
    "heap_getsysattr",
    "heap_copytuple",
    "heapCopyCompressedTuple",
    "heapCopyTuple",
    "heap_copytuple_with_tuple",
    "heap_form_tuple",
    "heap_form_cmprs_tuple",
    "heap_modify_tuple",
    "heap_deform_cmprs_tuple",
    "heap_deform_tuple",
    "heap_deform_tuple2",
    "heap_deform_tuple3",
    "heap_formtuple",
    "heap_modifytuple",
    "heap_deformtuple",
    "heap_freetuple",
    "heap_form_minimal_tuple",
    "heap_free_minimal_tuple",
    "heap_copy_minimal_tuple",
    "heap_tuple_from_minimal_tuple",
    "minimal_tuple_from_heap_tuple",
    "heapGetInitDefVal",
    "relationAttIsNull",
    "heapFormMinimalTuple",
    "XLogInsertRecord",
    "XLogFlush",
    "XLogBackgroundFlush",
    "XLogNeedsFlush",
    "XLogFileInit",
    "XLogFileOpen",
    "CheckXLogRemoved",
    "XLogSetAsyncXactLSN",
    "XLogSetReplicationSlotMinimumLSN",
    "XLogSetReplicationSlotMaximumLSN",
    "XLogGetReplicationSlotMaximumLSN",
    "xlog_redo",
    "xlog_desc",
    "issue_xlog_fsync",
    "RecoveryInProgress",
    "HotStandbyActive",
    "HotStandbyActiveInReplay",
    "XLogInsertAllowed",
    "GetXLogReceiptTime",
    "GetXLogReplayRecPtr",
    "GetXLogReplayRecPtrInPending",
    "GetStandbyFlushRecPtr",
    "GetXLogInsertRecPtr",
    "GetXLogWriteRecPtr",
    "RecoveryIsPaused",
    "SetRecoveryPause",
    "GetLatestXTime",
    "GetCurrentChunkReplayStartTime",
    "GetXlogRecordCrc",
    "UpdateControlFile",
    "GetSystemIdentifier",
    "SetSystemIdentifier",
    "GetThisTimeID",
    "SetThisTimeID",
    "XLOGShmemSize",
    "XLOGShmemInit",
    "BootStrapXLOG",
    "StartupXLOG",
    "ShutdownXLOG",
    "InitXLOGAccess",
    "StartupDummyStandby",
    "CreateCheckPoint",
    "CreateRestartPoint",
    "CheckPointGuts",
    "XLogPutNextOid",
    "XLogRestorePoint",
    "UpdateFullPageWrites",
    "GetFullPageWriteInfo",
    "GetRedoRecPtr",
    "GetInsertRecPtr",
    "GetFlushRecPtr",
    "GetNextXidAndEpoch",
    "GetRecoveryTargetTLI",
    "DummyStandbySetRecoveryTargetTLI",
    "CheckPromoteSignal",
    "CheckPrimarySignal",
    "CheckStandbySignal",
    "CheckSwitchoverSignal",
    "ReadLsnXlogFlushChkFile",
    "WakeupRecovery",
    "WakeupDataRecovery",
    "SetWalWriterSleeping",
    "CheckFpwBeforeFirstCkpt",
    "DisableFpwBeforeFirstCkpt",
    "UpdateLsnXlogFlushChkFile",
    "LsnXlogFlushChkShmemSize",
    "LsnXlogFlushChkShmInit",
    "IfLsnXlogFlushChkFileExist",
    "heap_xlog_logical_new_page",
    "StartTransaction",
    "KeepLogSeg",
    "RemoveOldXlogFiles",
    "dw_truncate",
    "heap_change_xidbase_after_freeze",
    "heap_page_prepare_for_xid",
    "ExtendCSNLOG",
    "freeze_single_heap_page",
    "heap_page_prune",
    "heap_prune_chain",
    "PreallocXlogFiles",
    "do_pg_stop_backup",
    "do_pg_start_backup"
};

static const char* GS_TRC_BOOTSTRAP_FUNC_NAMES[] =
{
    "",
    "AuxiliaryProcessMain",
    "err_out",
    "closerel",
    "boot_openrel",
    "DefineAttr",
    "InsertOneTuple",
    "InsertOneValue",
    "InsertOneNull",
    "MapArrayTypeName",
    "index_register",
    "build_indices",
    "boot_get_type_io_data",
    "boot_yyparse",
    "boot_yylex",
    "boot_yyerror"
};

static const char* GS_TRC_CATALOG_FUNC_NAMES[] =
{
    "",
    "forkname_to_number",
    "forkname_chars",
    "relpathbackend",
    "GetDatabasePath",
    "relpath_to_filenode",
    "IsSystemRelation",
    "IsToastRelation",
    "IsSystemClass",
    "IsToastClass",
    "IsSystemNamespace",
    "IsToastNamespace",
    "IsCStoreNamespace",
    "IsReservedName",
    "IsSharedRelation",
    "GetNewOid",
    "GetNewOidWithIndex",
    "GetNewRelFileNode",
    "heap_truncate",
    "heap_truncate_one_rel",
    "heap_truncate_check_FKs",
    "heap_truncate_find_FKs",
    "InsertPgAttributeTuple",
    "InsertPgClassTuple",
    "AddRelationNewConstraints",
    "AddRelClusterConstraints",
    "StoreAttrDefault",
    "cookDefault",
    "DeleteRelationTuple",
    "DeleteAttributeTuples",
    "DeleteSystemAttributeTuples",
    "RemoveAttributeById",
    "RemoveAttrDefault",
    "RemoveAttrDefaultById",
    "RemoveStatistics",
    "SystemAttributeDefinition",
    "SystemAttributeByName",
    "CheckAttributeNamesTypes",
    "CheckAttributeType",
    "AddRelationDistribution",
    "GetRelationDistributionItems",
    "GetRelationDistributionNodes",
    "BuildRelationDistributionNodes",
    "SortRelationDistributionNodes",
    "SetRelHasClusterKey"
};

static const char* GS_TRC_PARSER_FUNC_NAMES[] =
{
    "",
    "make_parsestate",
    "free_parsestate",
    "parser_errposition",
    "setup_parser_errposition_callback",
    "cancel_parser_errposition_callback",
    "make_var",
    "transformArrayType",
    "transformArraySubscripts",
    "make_const",
    "scanner_init",
    "scanner_finish",
    "core_yylex",
    "scanner_errposition",
    "scanner_yyerror"
};

static const char* GS_TRC_COMMANDS_FUNC_NAMES[] =
{
    "",
    "createdb",
    "dropdb",
    "RenameDatabase",
    "AlterDatabase",
    "AlterDatabaseSet",
    "AlterDatabaseOwner",
    "get_database_oid",
    "get_database_name",
    "dbase_redo",
    "dbase_desc",
    "check_encoding_locale_matches",
    "IsSetTableSpace",
    "errdetail_busy_db",
    "PreCleanAndCheckConns",
    "vacuum",
    "vac_open_indexes",
    "vac_close_indexes",
    "vac_estimate_reltuples",
    "vac_update_relstats",
    "vacuum_set_xid_limits",
    "vac_update_datfrozenxid",
    "vacuum_delay_point",
    "analyze_rel",
    "buildTempSampleTable",
    "dropSampleTable",
    "DefineRelation",
    "RemoveRelations",
    "AlterTableLookupRelation",
    "AlterTable",
    "AlterTableGetLockLevel",
    "ATExecChangeOwner",
    "AlterTableInternal",
    "AlterTableNamespace",
    "AlterTableNamespaceInternal",
    "AlterRelationNamespaceInternal",
    "vacuum_rel",
    "cluster_rel",
    "lazy_scan_heap",
    "lazy_vacuum_rel",
    "lazy_vacuum_index",
    "lazy_vacuum_heap",
    "lazy_truncate_heap",
    "lazy_cleanup_index"
};

static const char* GS_TRC_EXECUTER_FUNC_NAMES[] =
{
    "",
    "execTuplesMatch",
    "execTuplesUnequal",
    "execTuplesMatchPrepare",
    "execTuplesHashPrepare",
    "BuildTupleHashTable",
    "LookupTupleHashEntry",
    "FindTupleHashEntry",
    "ExecInitJunkFilter",
    "ExecInitJunkFilterConversion",
    "ExecFindJunkAttribute",
    "ExecFindJunkAttributeInTlist",
    "ExecGetJunkAttribute",
    "ExecFilterJunk",
    "ExecSetjunkFilteDescriptor",
    "ExecFindJunkPrimaryKeys",
    "BatchExecFilterJunk",
    "BatchCheckNodeIdentifier",
    "ExecGetPlanNodeid",
    "ExecutorStart",
    "standard_ExecutorStart",
    "ExecutorRun",
    "standard_ExecutorRun",
    "ExecutorFinish",
    "standard_ExecutorFinish",
    "ExecutorEnd",
    "standard_ExecutorEnd",
    "ExecutorRewind",
    "ExecCheckRTPerms",
    "CheckValidResultRel",
    "InitResultRelInfo",
    "ExecGetTriggerResultRel",
    "ExecContextForcesOids",
    "ExecConstraints",
    "ExecFindRowMark",
    "ExecBuildAuxRowMark",
    "EvalPlanQual",
    "EvalPlanQualFetch",
    "EvalPlanQualInit",
    "EvalPlanQualSetPlan",
    "EvalPlanQualSetTuple",
    "EvalPlanQualGetTuple",
    "EvalPlanQualFetchRowMarks",
    "EvalPlanQualNext",
    "EvalPlanQualBegin",
    "EvalPlanQualEnd",
    "ExecInitNode",
    "ExecProcNode",
    "MultiExecProcNode",
    "ExecEndNode",
    "ExecGetPlanMemCost",
    "GetAttributeByNum",
    "GetAttributeByName",
    "ExecMakeTableFunctionResult",
    "ExecEvalExprSwitchContext",
    "ExecInitExpr",
    "ExecPrepareExpr",
    "ExecQual",
    "ExecTargetListLength",
    "ExecCleanTargetListLength",
    "ExecProject",
    "ExecScan",
    "ExecAssignScanProjectionInfo",
    "ExecScanReScan",
    "ExecInitResultTupleSlot",
    "ExecInitScanTupleSlot",
    "ExecInitExtraTupleSlot",
    "ExecInitNullTupleSlot",
    "ExecTypeFromTL",
    "ExecCleanTypeFromTL",
    "ExecTypeFromExprList",
    "UpdateChangedParamSet",
    "begin_tup_output_tupdesc",
    "do_tup_output",
    "do_text_output_multiline",
    "end_tup_output",
    "InitPlan",
    "ExecCheckRTEPerms",
    "ExecInitIndexScan",
    "BypassExecutor",
    "UheapgettupPagemode",
    "Uheapgetpage"
};

static const char* GS_TRC_VECEXECUTOR_FUNC_NAMES[] =
{
    "",
    "VectorEngine",
    "ExecVecProject",
    "ExecInitVecExpr",
    "ExecAssignVecScanProjectionInfo",
    "ExecVecMarkPos",
    "ExecVecRestrPos",
    "VecExecReScan"
};

static const char* GS_TRC_OPTIMIZER_FUNC_NAMES[] =
{
    "",
    "clauselist_selectivity",
    "clause_selectivity",
    "set_rel_width",
    "restore_hashjoin_cost",
    "finalize_dml_cost",
    "copy_mem_info",
    "columnar_get_col_width",
    "get_path_actual_total_width",
    "query_planner",
    "preprocess_minmax_aggregates",
    "optimize_minmax_aggregates",
    "set_plan_rows",
    "create_plan",
    "disuse_physical_tlist",
    "copy_plan_costsize",
    "make_subqueryscan",
    "make_foreignscan",
    "make_append",
    "make_recursive_union",
    "make_sort_from_pathkeys",
    "make_sort_from_sortclauses",
    "make_sort_from_groupcols",
    "make_sort_from_targetlist",
    "make_sort",
    "make_agg",
    "make_windowagg",
    "make_group",
    "materialize_finished_plan",
    "make_unique",
    "make_lockrows",
    "make_limit",
    "make_stream_limit",
    "compare_path_costs",
    "compare_fractional_path_costs",
    "set_cheapest",
    "get_cheapest_path",
    "find_hinted_path",
    "add_path",
    "add_path_precheck",
    "create_seqscan_path",
    "create_cstorescan_path",
    "create_index_path",
    "build_seqScanPath_by_indexScanPath",
    "check_bitmap_heap_path_index_unusable",
    "is_partitionIndex_Subpath",
    "is_pwj_path",
    "create_bitmap_heap_path"
};

static const char* GS_TRC_POSTMASTER_FUNC_NAMES[] =
{
    "",
    "PostmasterMain",
    "ClosePostmasterPorts",
    "MaxLivePostmasterChildren",
    "HaShmemSize",
    "HaShmemInit",
    "postmaster_forkexec",
    "stream_forkexec",
    "WLMProcessForkExec",
    "SubPostmasterMain",
    "ShmemBackendArraySize",
    "ShmemBackendArrayAllocation",
    "SysLogger_Start",
    "SysLoggerClose",
    "write_syslogger_file",
    "AioCompltrMain",
    "AioCompltrStop",
    "AioCompltrStart",
    "AioCompltrIsReady",
    "CompltrContext",
    "CompltrPriority",
    "AutoVacuumingActive",
    "IsAutoVacuumLauncherProcess",
    "IsAutoVacuumWorkerProcess",
    "autovac_init",
    "StartAutoVacLauncher",
    "StartAutoVacWorker",
    "AutoVacWorkerFailed",
    "AutoVacuumUpdateDelay",
    "AutoVacLauncherMain",
    "AutoVacWorkerMain",
    "AutovacuumWorkerIAm",
    "AutovacuumLauncherIAm",
    "HandleStartupProcInterrupts",
    "StartupProcessMain",
    "PreRestoreCommand",
    "PostRestoreCommand",
    "IsFailoverTriggered",
    "IsSwitchoverTriggered",
    "IsPrimaryTriggered",
    "ResetSwitchoverTriggered",
    "ResetFailoverTriggered",
    "ResetPrimaryTriggered",
    "NotifySignalShmemSize",
    "NotifySignalShmemInit",
    "SendNotifySignal",
    "CheckNotifySignal",
    "BackgroundWriterMain",
    "CheckpointerMain",
    "RequestCheckpoint",
    "CheckpointWriteDelay",
    "ForwardFsyncRequest",
    "AbsorbFsyncRequests",
    "CheckpointerShmemSize",
    "CheckpointerShmemInit",
    "FirstCallSinceLastCheckpoint",
    "IsBgwriterProcess",
    "isDirExist",
    "startAlarmChecker",
    "AlarmCheckerMain",
    "fork_process",
    "WalWriterMain",
    "ckpt_try_prune_dirty_page_queue"
};

static const char* GS_TRC_REPLICATION_FUNC_NAMES[] =
{
    "",
    "WalReceiverMain",
    "walrcvWriterMain",
    "WalRcvShmemSize",
    "WalRcvShmemInit",
    "ShutdownWalRcv",
    "WalRcvInProgress",
    "connect_dn_str",
    "RequestXLogStreaming",
    "get_rcv_slot_name",
    "GetWalRcvWriteRecPtr",
    "GetReplicationApplyDelay",
    "GetReplicationTransferLatency",
    "GetWalRcvDummyStandbySyncPercent",
    "SetWalRcvDummyStandbySyncPercent",
    "getCurrentWalRcvCtlBlock",
    "walRcvWrite",
    "WalRcvXLogClose",
    "WalRcvIsShutdown",
    "ProcessRmXLog",
    "SetWalRcvWriterPID",
    "WalRcvWriterInProgress",
    "walRcvCtlBlockIsEmpty",
    "GetRepConnArray",
    "get_sync_percent",
    "wal_get_role_string",
    "pg_stat_get_stream_replications",
    "DataReceiverMain",
    "DataRcvShmemSize",
    "DataRcvShmemInit",
    "DataRcvInProgress",
    "ShutdownDataRcv",
    "StartupDataStreaming",
    "RequestDataStreaming",
    "InitDummyDataNum",
    "WakeupDataRcvWriter",
    "DataRcvWriterInProgress",
    "DataRcvDataCleanup",
    "DataRcvWriterMain",
    "DataRcvWrite",
    "SetDataRcvDummyStandbySyncPercent",
    "GetDataRcvDummyStandbySyncPercent",
    "SetDataRcvWriterPID",
    "ProcessDataRcvInterrupts",
    "CloseDataFile",
    "WalSenderMain",
    "WalSndSignals",
    "WalSndShmemSize",
    "WalSndShmemInit",
    "WalSndWakeup",
    "WalSndRqstFileReload",
    "WalSndInProgress",
    "StandbyOrSecondaryIsAlive"
};

static const char* GS_TRC_REWRITE_FUNC_NAMES[] =
{
    "",
    "OffsetVarNodes",
    "ChangeVarNodes",
    "IncrementVarSublevelsUp",
    "IncrementVarSublevelsUp_rtable",
    "rangeTableEntry_used",
    "attribute_used",
    "getInsertSelectQuery",
    "AddQual",
    "AddInvertedQual",
    "contain_aggs_of_level",
    "checkExprHasAggs",
    "checkExprHasWindowFuncs",
    "checkExprHasSubLink"
};

static const char* GS_TRC_STORAGE_FUNC_NAMES[] =
{
    "",
    "InitBufferPool",
    "InitBufferPoolAccess",
    "InitBufferPoolBackend",
    "AtEOXact_Buffers",
    "PrintBufferLeakWarning",
    "CheckPointBuffers",
    "RelationGetNumberOfBlocksInFork",
    "FlushRelationBuffers",
    "FlushDatabaseBuffers",
    "DropRelFileNodeBuffers",
    "DropRelFileNodeAllBuffers",
    "DropDatabaseBuffers",
    "ProcArrayShmemSize",
    "ProcArrayAdd",
    "ProcArrayRemove",
    "ProcArrayEndTransaction",
    "ProcArrayClearTransaction",
    "SetGlobalSnapshotData",
    "UnsetGlobalSnapshotData",
    "ReloadConnInfoOnBackends",
    "DumpMemoryCtxOnBackend",
    "ProcArrayInitRecovery",
    "ProcArrayApplyRecoveryInfo",
    "ProcArrayApplyXidAssignment",
    "RecordKnownAssignedTransactionIds",
    "ExpireTreeKnownAssignedTransactionIds",
    "ExpireAllKnownAssignedTransactionIds",
    "ExpireOldKnownAssignedTransactionIds",
    "GetMaxSnapshotXidCount",
    "GetMaxSnapshotSubxidCount",
    "smgrinit",
    "smgropen",
    "smgrexists",
    "smgrsetowner",
    "smgrclearowner",
    "smgrclose",
    "smgrcloseall",
    "smgrclosenode",
    "smgrcreate",
    "smgrdounlink",
    "smgrdounlinkfork",
    "smgrextend",
    "smgrprefetch",
    "smgrread",
    "smgrwrite",
    "smgrwriteback",
    "smgrnblocks",
    "smgrtruncate",
    "smgrimmedsync",
    "smgrpreckpt",
    "smgrsync",
    "smgrpostckpt",
    "AtEOXact_SMgr",
    "BufferAlloc",
    "SyncLocalXidWait",
    "BufferSync",
    "BgBufferSync",
    "fsm_vacuum_page",
    "fsm_search",
    "fsm_set_and_search"
};

static const char* GS_TRC_TCOP_FUNC_NAMES[] =
{
    "",
    "BeginCommand",
    "CreateDestReceiver",
    "CreateReceiverForMerge",
    "EndCommand",
    "EndCommand_noblock",
    "ProcessUtility",
    "standard_ProcessUtility",
    "UtilityReturnsTuples",
    "UtilityTupleDescriptor",
    "UtilityContainsQuery",
    "CreateCommandTag",
    "GetCommandLogLevel",
    "CommandIsReadOnly",
    "CheckRelationOwnership",
    "pg_parse_query",
    "pg_analyze_and_rewrite",
    "pg_analyze_and_rewrite_params",
    "pg_plan_query",
    "pg_plan_queries",
    "check_max_stack_depth",
    "assign_max_stack_depth",
    "die",
    "quickdie",
    "StatementCancelHandler",
    "FloatExceptionHandler",
    "RecoveryConflictInterrupt",
    "prepare_for_client_read",
    "client_read_ended",
    "prepare_for_logic_conn_read",
    "logic_conn_read_check_ended",
    "process_postgres_switches",
    "PostgresMain",
    "StreamMain",
    "get_stack_depth_rlimit",
    "ResetUsage",
    "ShowUsage",
    "check_log_duration",
    "set_debug_options",
    "set_plan_disabling_options",
    "get_stats_option_name",
    "exec_parse_message",
    "exec_bind_message",
    "exec_execute_message",
    "PortalStart",
    "PortalRun"
};

static const char* GS_TRC_TSEARCH_FUNC_NAMES[] =
{
    "",
    "init_tsvector_parser",
    "reset_tsvector_parser",
    "gettoken_tsvector",
    "close_tsvector_parser"
};

static const char* GS_TRC_UTILS_FUNC_NAMES[] =
{
    "",
    "has_any_column_privilege_name_name",
    "has_any_column_privilege_name_id",
    "has_any_column_privilege_id_name",
    "has_any_column_privilege_id_id",
    "has_any_column_privilege_name",
    "has_any_column_privilege_id",
    "has_column_privilege_name_name_name",
    "has_column_privilege_name_name_attnum",
    "has_column_privilege_name_id_name",
    "has_column_privilege_name_id_attnum",
    "has_column_privilege_id_name_name",
    "has_column_privilege_id_name_attnum",
    "has_column_privilege_id_id_name",
    "has_column_privilege_id_id_attnum",
    "has_column_privilege_name_name",
    "has_column_privilege_name_attnum",
    "has_column_privilege_id_name",
    "has_column_privilege_id_attnum",
    "has_table_privilege_name_name",
    "has_table_privilege_name_id",
    "has_table_privilege_id_name",
    "has_table_privilege_id_id",
    "has_table_privilege_name",
    "has_table_privilege_id",
    "has_sequence_privilege_name_name",
    "has_sequence_privilege_name_id",
    "has_sequence_privilege_id_name",
    "has_sequence_privilege_id_id",
    "has_sequence_privilege_name",
    "has_sequence_privilege_id",
    "has_database_privilege_name_name",
    "has_database_privilege_name_id",
    "has_database_privilege_id_name",
    "has_database_privilege_id_id",
    "has_database_privilege_name",
    "has_database_privilege_id",
    "has_foreign_data_wrapper_privilege_name_name",
    "has_foreign_data_wrapper_privilege_name_id",
    "has_foreign_data_wrapper_privilege_id_name",
    "has_foreign_data_wrapper_privilege_id_id",
    "has_foreign_data_wrapper_privilege_name",
    "has_foreign_data_wrapper_privilege_id",
    "has_function_privilege_name_name",
    "has_function_privilege_name_id",
    "has_function_privilege_id_name",
    "has_function_privilege_id_id",
    "has_function_privilege_name",
    "has_function_privilege_id",
    "has_language_privilege_name_name",
    "has_language_privilege_name_id",
    "has_language_privilege_id_name",
    "has_language_privilege_id_id",
    "has_language_privilege_name",
    "has_language_privilege_id",
    "has_nodegroup_privilege_name_name",
    "has_nodegroup_privilege_name_id",
    "has_nodegroup_privilege_id_name",
    "has_nodegroup_privilege_id_id",
    "has_nodegroup_privilege_name",
    "has_nodegroup_privilege_id",
    "has_schema_privilege_name_name",
    "has_schema_privilege_name_id",
    "has_schema_privilege_id_name",
    "has_schema_privilege_id_id",
    "has_schema_privilege_name",
    "has_schema_privilege_id",
    "has_server_privilege_name_name",
    "has_server_privilege_name_id",
    "has_server_privilege_id_name",
    "has_server_privilege_id_id",
    "has_server_privilege_name",
    "has_server_privilege_id",
    "has_tablespace_privilege_name_name",
    "has_tablespace_privilege_name_id",
    "has_tablespace_privilege_id_name",
    "has_tablespace_privilege_id_id",
    "has_tablespace_privilege_name",
    "has_tablespace_privilege_id",
    "has_type_privilege_name_name",
    "has_type_privilege_name_id",
    "has_type_privilege_id_name",
    "has_type_privilege_id_id",
    "has_type_privilege_name",
    "has_type_privilege_id",
    "pg_has_role_name_name",
    "pg_has_role_name_id",
    "pg_has_role_id_name",
    "pg_has_role_id_id",
    "pg_has_role_name",
    "pg_has_role_id",
    "GetConfigOption",
    "GetConfigOptionResetString",
    "ProcessConfigFile",
    "InitializeGUCOptions",
    "init_sync_guc_variables",
    "repair_guc_variables",
    "SelectConfigFiles",
    "ResetAllOptions",
    "AtStart_GUC",
    "NewGUCNestLevel",
    "AtEOXact_GUC",
    "BeginReportingGUCOptions",
    "ParseLongOption",
    "set_config_option",
    "GetConfigOptionByName",
    "GetConfigOptionByNum",
    "GetNumConfigOptions",
    "SetPGVariable",
    "GetPGVariable",
    "GetPGVariableResultDesc",
    "RewriteBeginQuery",
    "ExecSetVariableStmt",
    "ExtractSetVariableArgs",
    "RelationIdGetRelation",
    "RelationClose",
    "PartitionGetPartIndexList",
    "RelationGetIndexList",
    "RelationGetIndexNum",
    "RelationGetOidIndex",
    "RelationGetIndexExpressions",
    "RelationGetIndexPredicate",
    "RelationGetIndexAttrBitmap",
    "RelationGetExclusionInfo"
};

static const char* GS_TRC_WLM_FUNC_NAMES[] =
{
    "",
    "WLMIsSimpleQuery"
};

static const char* GS_TRC_SYSTEM_FUNC_NAMES[] =
{
    "",
    "TRY_CATCH"
};

static struct comp_func GS_TRC_FUNC_NAMES_BY_COMP[] =
{
    {0, 0, NULL},
    {COMP_COMMON, 4, GS_TRC_COMMON_FUNC_NAMES},
    {COMP_LIBPQ, 23, GS_TRC_LIBPQ_FUNC_NAMES},
    {COMP_PG_CTL, 4, GS_TRC_PG_CTL_FUNC_NAMES},
    {COMP_ACCESS, 112, GS_TRC_ACCESS_FUNC_NAMES},
    {COMP_BOOTSTRAP, 16, GS_TRC_BOOTSTRAP_FUNC_NAMES},
    {COMP_CATALOG, 45, GS_TRC_CATALOG_FUNC_NAMES},
    {COMP_PARSER, 15, GS_TRC_PARSER_FUNC_NAMES},
    {COMP_COMMANDS, 44, GS_TRC_COMMANDS_FUNC_NAMES},
    {COMP_EXECUTER, 82, GS_TRC_EXECUTER_FUNC_NAMES},
    {COMP_VECEXECUTOR, 8, GS_TRC_VECEXECUTOR_FUNC_NAMES},
    {COMP_OPTIMIZER, 48, GS_TRC_OPTIMIZER_FUNC_NAMES},
    {COMP_POSTMASTER, 63, GS_TRC_POSTMASTER_FUNC_NAMES},
    {COMP_REPLICATION, 53, GS_TRC_REPLICATION_FUNC_NAMES},
    {COMP_REWRITE, 14, GS_TRC_REWRITE_FUNC_NAMES},
    {COMP_STORAGE, 61, GS_TRC_STORAGE_FUNC_NAMES},
    {COMP_TCOP, 46, GS_TRC_TCOP_FUNC_NAMES},
    {COMP_TSEARCH, 5, GS_TRC_TSEARCH_FUNC_NAMES},
    {COMP_UTILS, 124, GS_TRC_UTILS_FUNC_NAMES},
    {COMP_WLM, 2, GS_TRC_WLM_FUNC_NAMES},
    {COMP_SYSTEM, 2, GS_TRC_SYSTEM_FUNC_NAMES}
};

static struct comp_name GS_TRC_COMP_NAMES_BY_COMP[] =
{
    {0, NULL},
    {COMP_COMMON, "common"},
    {COMP_LIBPQ, "libpq"},
    {COMP_PG_CTL, "pg_ctl"},
    {COMP_ACCESS, "access"},
    {COMP_BOOTSTRAP, "bootstrap"},
    {COMP_CATALOG, "catalog"},
    {COMP_PARSER, "parser"},
    {COMP_COMMANDS, "commands"},
    {COMP_EXECUTER, "executer"},
    {COMP_VECEXECUTOR, "vecexecutor"},
    {COMP_OPTIMIZER, "optimizer"},
    {COMP_POSTMASTER, "postmaster"},
    {COMP_REPLICATION, "replication"},
    {COMP_REWRITE, "rewrite"},
    {COMP_STORAGE, "storage"},
    {COMP_TCOP, "tcop"},
    {COMP_TSEARCH, "tsearch"},
    {COMP_UTILS, "utils"},
    {COMP_WLM, "wlm"},
    {COMP_SYSTEM, "system"}
};

#endif