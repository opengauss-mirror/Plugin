-- This file and its contents are licensed under the Apache License 2.0.
-- Please see the included NOTICE for copyright information and
-- LICENSE-APACHE for a copy of the license.
-- disable background workers to make results reproducible
\c :TEST_DBNAME :ROLE_SUPERUSER
SELECT _timescaledb_internal.stop_background_workers();
 stop_background_workers 
-------------------------
 t
(1 row)

\c :TEST_DBNAME :ROLE_DEFAULT_PERM_USER
-- look at postgres version to decide whether we run with analyze or without
SELECT
  CASE WHEN current_setting('server_version_num')::int >= 100000
    THEN 'EXPLAIN (analyze, costs off, timing off, summary off)'
    ELSE 'EXPLAIN (costs off)'
  END AS "PREFIX"
\gset
CREATE TABLE metrics(f1 int, f2 int, time timestamptz NOT NULL, device_id int, value float);
SELECT create_hypertable('metrics','time');
  create_hypertable   
----------------------
 (1,public,metrics,t)
(1 row)

ALTER TABLE metrics DROP COLUMN f1;
INSERT INTO metrics(time, device_id, value) SELECT '2000-01-01'::timestamptz, device_id, 0.5 FROM generate_series(1,3) g(device_id);
--
-- test switching continuous agg view between different modes
--
-- check default view for new continuous aggregate
CREATE VIEW metrics_summary
  WITH (timescaledb.continuous)
AS
  SELECT time_bucket('1d',time), avg(value) FROM metrics GROUP BY 1;
ALTER TABLE metrics DROP COLUMN f2;
-- this should be union view
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | f
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_2.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_2.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_2                                                                                                                                         +
   WHERE _materialized_hypertable_2.time_bucket < COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('2'::oid)), '-infinity'::timestamp with time zone)             +
   GROUP BY _materialized_hypertable_2.time_bucket                                                                                                                                                +
 UNION ALL                                                                                                                                                                                        +
  SELECT time_bucket('@ 1 day'::interval, metrics."time") AS time_bucket,                                                                                                                         +
     avg(metrics.value) AS avg                                                                                                                                                                    +
    FROM metrics                                                                                                                                                                                  +
   WHERE metrics."time" >= COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('2'::oid)), '-infinity'::timestamp with time zone)                                    +
   GROUP BY (time_bucket('@ 1 day'::interval, metrics."time"));
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- downgrade view to non-union view
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=true);
-- this should be view without union
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | t
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_2.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_2.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_2                                                                                                                                         +
   GROUP BY _materialized_hypertable_2.time_bucket;
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
 time_bucket | avg 
-------------+-----
(0 rows)

-- upgrade view to union view again
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=false);
-- this should be union view
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | f
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_2.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_2.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_2                                                                                                                                         +
   WHERE _materialized_hypertable_2.time_bucket < COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('2'::oid)), '-infinity'::timestamp with time zone)             +
   GROUP BY _materialized_hypertable_2.time_bucket                                                                                                                                                +
 UNION ALL                                                                                                                                                                                        +
  SELECT time_bucket('@ 1 day'::interval, metrics."time") AS time_bucket,                                                                                                                         +
     avg(metrics.value) AS avg                                                                                                                                                                    +
    FROM metrics                                                                                                                                                                                  +
   WHERE metrics."time" >= COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('2'::oid)), '-infinity'::timestamp with time zone)                                    +
   GROUP BY (time_bucket('@ 1 day'::interval, metrics."time"));
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- try upgrade view to union view that is already union view
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=false);
-- this should be union view
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | f
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_2.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_2.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_2                                                                                                                                         +
   WHERE _materialized_hypertable_2.time_bucket < COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('2'::oid)), '-infinity'::timestamp with time zone)             +
   GROUP BY _materialized_hypertable_2.time_bucket                                                                                                                                                +
 UNION ALL                                                                                                                                                                                        +
  SELECT time_bucket('@ 1 day'::interval, metrics."time") AS time_bucket,                                                                                                                         +
     avg(metrics.value) AS avg                                                                                                                                                                    +
    FROM metrics                                                                                                                                                                                  +
   WHERE metrics."time" >= COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('2'::oid)), '-infinity'::timestamp with time zone)                                    +
   GROUP BY (time_bucket('@ 1 day'::interval, metrics."time"));
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- refresh
REFRESH MATERIALIZED VIEW metrics_summary;
-- result should not change after refresh for union view
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- downgrade view to non-union view
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=true);
-- this should be view without union
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | t
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_2.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_2.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_2                                                                                                                                         +
   GROUP BY _materialized_hypertable_2.time_bucket;
(1 row)

-- view should have results now after refresh
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

DROP VIEW metrics_summary CASCADE;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_2_2_chunk
-- check default view for new continuous aggregate with materialized_only to true
CREATE VIEW metrics_summary
  WITH (timescaledb.continuous, timescaledb.materialized_only=true)
AS
  SELECT time_bucket('1d',time), avg(value) FROM metrics GROUP BY 1;
-- this should be view without union
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | t
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_3.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_3.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_3                                                                                                                                         +
   GROUP BY _materialized_hypertable_3.time_bucket;
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
 time_bucket | avg 
-------------+-----
(0 rows)

-- upgrade view to union view
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=false);
-- this should be union view
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | f
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_3.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_3.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_3                                                                                                                                         +
   WHERE _materialized_hypertable_3.time_bucket < COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('3'::oid)), '-infinity'::timestamp with time zone)             +
   GROUP BY _materialized_hypertable_3.time_bucket                                                                                                                                                +
 UNION ALL                                                                                                                                                                                        +
  SELECT time_bucket('@ 1 day'::interval, metrics."time") AS time_bucket,                                                                                                                         +
     avg(metrics.value) AS avg                                                                                                                                                                    +
    FROM metrics                                                                                                                                                                                  +
   WHERE metrics."time" >= COALESCE(_timescaledb_internal.to_timestamp(_timescaledb_internal.cagg_watermark('3'::oid)), '-infinity'::timestamp with time zone)                                    +
   GROUP BY (time_bucket('@ 1 day'::interval, metrics."time"));
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- downgrade view to non-union view
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=true);
-- this should be view without union
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | t
(1 row)

SELECT pg_get_viewdef('metrics_summary',true);
                                                                                          pg_get_viewdef                                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  SELECT _materialized_hypertable_3.time_bucket,                                                                                                                                                  +
     _timescaledb_internal.finalize_agg('avg(double precision)'::text, NULL::name, NULL::name, '{{pg_catalog,float8}}'::name[], _materialized_hypertable_3.agg_2_2, NULL::double precision) AS avg+
    FROM _timescaledb_internal._materialized_hypertable_3                                                                                                                                         +
   GROUP BY _materialized_hypertable_3.time_bucket;
(1 row)

SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
 time_bucket | avg 
-------------+-----
(0 rows)

DROP VIEW metrics_summary CASCADE;
--
-- test queries on union view
--
CREATE VIEW metrics_summary
  WITH (timescaledb.continuous, timescaledb.materialized_only=true)
AS
  SELECT time_bucket('1d',time), avg(value) FROM metrics GROUP BY 1;
-- should be marked as materialized_only in catalog
SELECT user_view_name, materialized_only FROM _timescaledb_catalog.continuous_agg WHERE user_view_name='metrics_summary';
 user_view_name  | materialized_only 
-----------------+-------------------
 metrics_summary | t
(1 row)

-- query should not have results since cagg is materialized only and no refresh has happened yet
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
 time_bucket | avg 
-------------+-----
(0 rows)

ALTER VIEW metrics_summary SET (timescaledb.materialized_only=false);
-- after switch to union view all results should be returned
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

REFRESH MATERIALIZED VIEW metrics_summary;
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=true);
-- materialized only view should return data now too because refresh has happened
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- add some more data
INSERT INTO metrics(time, device_id, value) SELECT '2000-02-01'::timestamptz, device_id, device_id/10.0 FROM generate_series(1,3) g(device_id);
-- materialized only view should not have new data yet
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- but union view should
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=false);
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
 Mon Jan 31 16:00:00 2000 PST | 0.2
(2 rows)

-- and after refresh non union view should have new data too
REFRESH MATERIALIZED VIEW metrics_summary;
WARNING:  REFRESH did not materialize the entire range since it was limited by the max_interval_per_job setting
ALTER VIEW metrics_summary SET (timescaledb.materialized_only=true);
SELECT time_bucket,avg FROM metrics_summary ORDER BY 1;
         time_bucket          | avg 
------------------------------+-----
 Fri Dec 31 16:00:00 1999 PST | 0.5
(1 row)

-- hardcoding now to 50 will lead to 30 watermark
CREATE OR REPLACE FUNCTION boundary_test_int_now()
  RETURNS INT LANGUAGE SQL STABLE AS
$BODY$
  SELECT 50;
$BODY$;
-- test watermark interaction with just in time aggregates
CREATE TABLE boundary_test(time int, value float);
SELECT create_hypertable('boundary_test','time',chunk_time_interval:=10);
NOTICE:  adding not-null constraint to column "time"
     create_hypertable      
----------------------------
 (5,public,boundary_test,t)
(1 row)

SELECT set_integer_now_func('boundary_test','boundary_test_int_now');
 set_integer_now_func 
----------------------
 
(1 row)

CREATE VIEW boundary_view
  WITH (timescaledb.continuous)
AS
  SELECT time_bucket(10,time), avg(value) FROM boundary_test GROUP BY 1;
INSERT INTO boundary_test SELECT i, i*10 FROM generate_series(10,40,10) AS g(i);
-- watermark should be NULL
SELECT _timescaledb_internal.cagg_watermark(6);
 cagg_watermark 
----------------
               
(1 row)

-- first UNION child should have no rows because no materialization has happened yet and 2nd child should have 4 rows
:PREFIX SELECT * FROM boundary_view;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  HashAggregate
         Group Key: time_bucket
         ->  Result
               One-Time Filter: false
   ->  HashAggregate
         Group Key: (time_bucket(10, boundary_test."time"))
         ->  Custom Scan (ChunkAppend) on boundary_test
               Chunks excluded during startup: 0
               ->  Index Scan Backward using _hyper_5_5_chunk_boundary_test_time_idx on _hyper_5_5_chunk
                     Index Cond: ("time" >= COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
               ->  Index Scan Backward using _hyper_5_6_chunk_boundary_test_time_idx on _hyper_5_6_chunk
                     Index Cond: ("time" >= COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
               ->  Index Scan Backward using _hyper_5_7_chunk_boundary_test_time_idx on _hyper_5_7_chunk
                     Index Cond: ("time" >= COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
               ->  Index Scan Backward using _hyper_5_8_chunk_boundary_test_time_idx on _hyper_5_8_chunk
                     Index Cond: ("time" >= COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
(17 rows)

-- result should have 4 rows
SELECT * FROM boundary_view ORDER BY time_bucket;
 time_bucket | avg 
-------------+-----
          10 | 100
          20 | 200
          30 | 300
          40 | 400
(4 rows)

REFRESH MATERIALIZED VIEW boundary_view;
-- watermark should be 30
SELECT _timescaledb_internal.cagg_watermark(6);
 cagg_watermark 
----------------
             30
(1 row)

-- both sides of the UNION should return 2 rows
:PREFIX SELECT * FROM boundary_view;
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  HashAggregate
         Group Key: _materialized_hypertable_6.time_bucket
         ->  Custom Scan (ChunkAppend) on _materialized_hypertable_6
               Chunks excluded during startup: 0
               ->  Index Scan Backward using _hyper_6_9_chunk__materialized_hypertable_6_time_bucket_idx on _hyper_6_9_chunk
                     Index Cond: (time_bucket < COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
   ->  HashAggregate
         Group Key: (time_bucket(10, boundary_test."time"))
         ->  Custom Scan (ChunkAppend) on boundary_test
               Chunks excluded during startup: 2
               ->  Index Scan Backward using _hyper_5_7_chunk_boundary_test_time_idx on _hyper_5_7_chunk
                     Index Cond: ("time" >= COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
               ->  Index Scan Backward using _hyper_5_8_chunk_boundary_test_time_idx on _hyper_5_8_chunk
                     Index Cond: ("time" >= COALESCE((_timescaledb_internal.cagg_watermark('6'::oid))::integer, '-2147483648'::integer))
(15 rows)

-- result should have 4 rows
SELECT * FROM boundary_view ORDER BY time_bucket;
 time_bucket | avg 
-------------+-----
          10 | 100
          20 | 200
          30 | 300
          40 | 400
(4 rows)

---- TEST union view with WHERE, GROUP BY and HAVING clause ----
create table ht_intdata (a integer, b integer, c integer);
select table_name FROM create_hypertable('ht_intdata', 'a', chunk_time_interval=> 10);
NOTICE:  adding not-null constraint to column "a"
 table_name 
------------
 ht_intdata
(1 row)

INSERT into ht_intdata values( 3 , 16 , 20);
INSERT into ht_intdata values( 1 , 10 , 20);
INSERT into ht_intdata values( 1 , 11 , 20);
INSERT into ht_intdata values( 1 , 12 , 20);
INSERT into ht_intdata values( 1 , 13 , 20);
INSERT into ht_intdata values( 1 , 14 , 20);
INSERT into ht_intdata values( 2 , 14 , 20);
INSERT into ht_intdata values( 2 , 15 , 20);
INSERT into ht_intdata values( 2 , 16 , 20);
INSERT into ht_intdata values( 20 , 16 , 20);
INSERT into ht_intdata values( 20 , 26 , 20);
INSERT into ht_intdata values( 20 , 16 , 20);
INSERT into ht_intdata values( 21 , 15 , 30);
INSERT into ht_intdata values( 21 , 15 , 30);
INSERT into ht_intdata values( 21 , 15 , 30);
CREATE OR REPLACE FUNCTION integer_now_ht_intdata() returns int LANGUAGE SQL STABLE as $$ SELECT coalesce(max(a), 0) FROM ht_intdata $$;
SELECT set_integer_now_func('ht_intdata', 'integer_now_ht_intdata');
 set_integer_now_func 
----------------------
 
(1 row)

CREATE OR REPLACE VIEW mat_m1( a, countb, sumbc, spreadcb, avgc )
WITH (timescaledb.continuous, timescaledb.refresh_lag = 10)
AS
SELECT time_bucket(1, a), count(*), sum(b+c), max(c)-min(b), avg(c)::int
FROM ht_intdata
WHERE b < 16
GROUP BY time_bucket(1, a)
HAVING sum(c) > 50;
REFRESH MATERIALIZED VIEW mat_m1;
SELECT view_name, completed_threshold from timescaledb_information.continuous_aggregate_stats
WHERE view_name::text like 'mat_m1';
 view_name | completed_threshold 
-----------+---------------------
 mat_m1    | 11
(1 row)

--results from real time cont.agg and direct query should match
SELECT time_bucket(1, a), count(*), sum(b+c), max(c)-min(b), avg(c)::int
FROM ht_intdata
WHERE b < 16
GROUP BY time_bucket(1, a)
HAVING sum(c) > 50
ORDER BY 1;
 time_bucket | count | sum | ?column? | avg 
-------------+-------+-----+----------+-----
           1 |     5 | 160 |       10 |  20
          21 |     3 | 135 |       15 |  30
(2 rows)

SELECT * FROM mat_m1 ORDER BY 1;
 a  | countb | sumbc | spreadcb | avgc 
----+--------+-------+----------+------
  1 |      5 |   160 |       10 |   20
 21 |      3 |   135 |       15 |   30
(2 rows)

--verify that materialized only doesn't have rows with a> 20
ALTER VIEW mat_m1 SET(timescaledb.materialized_only = true);
SELECT * FROM mat_m1 ORDER BY 1;
 a | countb | sumbc | spreadcb | avgc 
---+--------+-------+----------+------
 1 |      5 |   160 |       10 |   20
(1 row)

--again revert the view to include real time aggregates
ALTER VIEW mat_m1 SET(timescaledb.materialized_only = false);
INSERT into ht_intdata values( 31 , 15 , 30);
INSERT into ht_intdata values( 31 , 14 , 70);
--cagg was not refreshed, should include all rows
SELECT * FROM mat_m1 ORDER BY 1;
 a  | countb | sumbc | spreadcb | avgc 
----+--------+-------+----------+------
  1 |      5 |   160 |       10 |   20
 21 |      3 |   135 |       15 |   30
 31 |      2 |   129 |       56 |   50
(3 rows)

REFRESH MATERIALIZED VIEW mat_m1;
SELECT view_name, completed_threshold from timescaledb_information.continuous_aggregate_stats
WHERE view_name::text like 'mat_m1';
 view_name | completed_threshold 
-----------+---------------------
 mat_m1    | 21
(1 row)

SELECT * FROM mat_m1 ORDER BY 1;
 a  | countb | sumbc | spreadcb | avgc 
----+--------+-------+----------+------
  1 |      5 |   160 |       10 |   20
 21 |      3 |   135 |       15 |   30
 31 |      2 |   129 |       56 |   50
(3 rows)

--the selects against mat_m1 before and after refresh should match this query
SELECT time_bucket(1, a), count(*), sum(b+c), max(c)-min(b), avg(c)::int
FROM ht_intdata
WHERE b < 16
GROUP BY time_bucket(1, a)
HAVING sum(c) > 50
ORDER BY 1;
 time_bucket | count | sum | ?column? | avg 
-------------+-------+-----+----------+-----
           1 |     5 | 160 |       10 |  20
          21 |     3 | 135 |       15 |  30
          31 |     2 | 129 |       56 |  50
(3 rows)

DROP VIEW mat_m1 cascade;
NOTICE:  drop cascades to table _timescaledb_internal._hyper_8_12_chunk
--- TEST union view with multiple WHERE and HAVING clauses
CREATE VIEW mat_m1
WITH (timescaledb.continuous, timescaledb.refresh_lag = 10,
      timescaledb.max_interval_per_job = 100)
AS
SELECT time_bucket(5, a), sum(b+c)
FROM ht_intdata
WHERE b < 16 and c > 20
GROUP BY time_bucket(5, a)
HAVING sum(c) > 50 and avg(b)::int > 12 ;
INSERT into ht_intdata values( 42 , 15 , 80);
INSERT into ht_intdata values( 42 , 15 , 18);
INSERT into ht_intdata values( 41 , 18 , 21);
REFRESH MATERIALIZED VIEW mat_m1;
SELECT view_name, completed_threshold from timescaledb_information.continuous_aggregate_stats
WHERE view_name::text like 'mat_m1';
 view_name | completed_threshold 
-----------+---------------------
 mat_m1    | 30
(1 row)

--view and direct query should return same results
SELECT * from mat_m1 ORDER BY 1;
 time_bucket | sum 
-------------+-----
          20 | 135
          30 | 129
          40 |  95
(3 rows)

SELECT time_bucket(5, a), sum(b+c)
FROM ht_intdata
WHERE b < 16 and c > 20
GROUP BY time_bucket(5, a)
HAVING sum(c) > 50 and avg(b)::int > 12
ORDER by 1; 
 time_bucket | sum 
-------------+-----
          20 | 135
          30 | 129
          40 |  95
(3 rows)

-- plan output
:PREFIX SELECT * FROM mat_m1 ORDER BY 1;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: _hyper_9_15_chunk.time_bucket
   ->  GroupAggregate
         Group Key: _hyper_9_15_chunk.time_bucket
         Filter: ((_timescaledb_internal.finalize_agg('sum(integer)'::text, NULL::name, NULL::name, '{{pg_catalog,int4}}'::name[], _hyper_9_15_chunk.agg_0_3, NULL::bigint) > 50) AND ((_timescaledb_internal.finalize_agg('avg(integer)'::text, NULL::name, NULL::name, '{{pg_catalog,int4}}'::name[], _hyper_9_15_chunk.agg_0_4, NULL::numeric))::integer > 12))
         ->  Merge Append
               Sort Key: _hyper_9_15_chunk.time_bucket
               ->  Index Scan Backward using _hyper_9_15_chunk__materialized_hypertable_9_time_bucket_idx on _hyper_9_15_chunk
                     Index Cond: (time_bucket < COALESCE((_timescaledb_internal.cagg_watermark('9'::oid))::integer, '-2147483648'::integer))
   ->  GroupAggregate
         Group Key: (time_bucket(5, ht_intdata.a))
         Filter: ((sum(ht_intdata.c) > 50) AND ((avg(ht_intdata.b))::integer > 12))
         ->  Custom Scan (ConstraintAwareAppend)
               Hypertable: ht_intdata
               Chunks left after exclusion: 2
               ->  Merge Append
                     Sort Key: (time_bucket(5, _hyper_7_13_chunk.a))
                     ->  Index Scan Backward using _hyper_7_13_chunk_ht_intdata_a_idx on _hyper_7_13_chunk
                           Index Cond: (a >= COALESCE((_timescaledb_internal.cagg_watermark('9'::oid))::integer, '-2147483648'::integer))
                           Filter: ((b < 16) AND (c > 20))
                     ->  Index Scan Backward using _hyper_7_14_chunk_ht_intdata_a_idx on _hyper_7_14_chunk
                           Index Cond: (a >= COALESCE((_timescaledb_internal.cagg_watermark('9'::oid))::integer, '-2147483648'::integer))
                           Filter: ((b < 16) AND (c > 20))
(23 rows)

