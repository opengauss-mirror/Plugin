select plvstr.normalize('Just   do    it!');
  normalize  
-------------
 Just do it!
(1 row)

select plvstr.instr('TestABC', 'ABC');
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', 1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', 6);
 instr 
-------
     0
(1 row)

select plvstr.instr('TestABC', 'ABC', 1, 1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', 6, 1);
 instr 
-------
     0
(1 row)

select plvstr.instr('TestABC', 'ABC', -1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', -6);
 instr 
-------
     0
(1 row)

select plvstr.instr('TestABC', 'ABC', -1, 1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', -6, 1);
 instr 
-------
     0
(1 row)

select plvstr.is_prefix('TestABC', 'Test');
 is_prefix 
-----------
 t
(1 row)

select plvstr.is_prefix('TestABC', 'ABC');
 is_prefix 
-----------
 f
(1 row)

select plvstr.is_prefix('TestABC', 'Test', true);
 is_prefix 
-----------
 t
(1 row)

select plvstr.is_prefix('TestABC', 'Test', false);
 is_prefix 
-----------
 t
(1 row)

select plvstr.is_prefix('TestABC', 'ABC', true);
 is_prefix 
-----------
 f
(1 row)

select plvstr.is_prefix('TestABC', 'ABC', false);
 is_prefix 
-----------
 f
(1 row)

select plvstr.is_prefix(123456, 123);
 is_prefix 
-----------
 t
(1 row)

select plvstr.is_prefix(123456, 456);
 is_prefix 
-----------
 f
(1 row)

select plvstr.is_prefix(123456::int8, 123::int8);
 is_prefix 
-----------
 t
(1 row)

select plvstr.is_prefix(123456::int8, 456::int8);
 is_prefix 
-----------
 f
(1 row)

select plvstr.substr('abcdefg', 2);
 substr 
--------
 bcdefg
(1 row)

select plvstr.substr('abcdefg', 2, 3);
 substr 
--------
 bcd
(1 row)

select plvstr.lpart('ABC.DEF', '.');
 lpart 
-------
 ABC
(1 row)

select plvstr.rpart('ABC.DEF', '.');
 rpart 
-------
 DEF
(1 row)

select plvstr.lpart('ABC.DEF.GHI.JKL.MNO', '.', 5);
  lpart  
---------
 ABC.DEF
(1 row)

select plvstr.rpart('ABC.DEF.GHI.JKL.MNO', '.', 5);
    rpart    
-------------
 GHI.JKL.MNO
(1 row)

select plvstr.lpart('ABC.DEF.GHI.JKL.MNO', '.', 5, 2);
    lpart    
-------------
 ABC.DEF.GHI
(1 row)

select plvstr.rpart('ABC.DEF.GHI.JKL.MNO', '.', 5, 2);
  rpart  
---------
 JKL.MNO
(1 row)

select plvstr.lpart('ABCDEFGHIJKLMNO', '.', 5, 2, true);
      lpart      
-----------------
 ABCDEFGHIJKLMNO
(1 row)

select plvstr.rpart('ABCDEFGHIJKLMNO', '.', 5, 2, true);
      rpart      
-----------------
 ABCDEFGHIJKLMNO
(1 row)

select plvstr.lpart('ABCDEFGHIJKLMNO', '.', 5, 2, false);
 lpart 
-------
 
(1 row)

select plvstr.rpart('ABCDEFGHIJKLMNO', '.', 5, 2, false);
 rpart 
-------
 
(1 row)

select plvstr.left('Příliš žluťoučký kůň',4) = pg_catalog.substr('Příl', 1, 4);
 ?column? 
----------
 t
(1 row)

select plvstr.right('Příliš žluťoučký kůň',4) = pg_catalog.substr('Příl', 17, 4);
 ?column? 
----------
 
(1 row)

select plvchr.first('ABCDEFG');
 first 
-------
 A
(1 row)

select plvchr.last('ABCDEFG');
 last 
------
 G
(1 row)

-- kind: 1 blank, 2 digit, 3 quote, 4 other, 5 letter
select plvchr._is_kind(' ', 1);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind('1', 2);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind(E'\'', 3);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind('%', 4);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind('a', 5);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind(ascii(' '), 1);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind(ascii('1'), 2);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind(ascii(E'\''), 3);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind(ascii('%'), 4);
 _is_kind 
----------
 t
(1 row)

select plvchr._is_kind(ascii('a'), 5);
 _is_kind 
----------
 t
(1 row)

select plvstr.lstrip('abc1abc2abc', 'abc');
  lstrip  
----------
 1abc2abc
(1 row)

select plvstr.rstrip('abc1abc2abc', 'abc');
  rstrip  
----------
 abc1abc2
(1 row)

select plvstr.lstrip('abc1abc2abc', 'abc', 2);
  lstrip  
----------
 1abc2abc
(1 row)

select plvstr.rstrip('abc1abc2abc', 'abc', 2);
  rstrip  
----------
 abc1abc2
(1 row)

select plvstr.swap('abcdef', 'ghi');
  swap  
--------
 ghidef
(1 row)

select plvstr.swap('abcdef', 'ghi', 3);
ERROR:  function plvstr.swap(unknown, unknown, integer) does not exist
LINE 1: select plvstr.swap('abcdef', 'ghi', 3);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: swap
select plvstr.swap('abcdef', 'ghi', 3, 3);
  swap  
--------
 abghif
(1 row)

select plvstr.swap('abcdef', 'ghi', 3, 4);
ERROR:  The substring to be replaced exceeds the end of the source string
CONTEXT:  referenced column: swap
select plvstr.swap('abcdef', 'ghi', 3, 5);
ERROR:  The substring to be replaced exceeds the end of the source string
CONTEXT:  referenced column: swap
select plvstr.swap('abcdefghijklmnopq', 'rst', 3, 8);
     swap     
--------------
 abrstklmnopq
(1 row)

-- test about SQL_ASCII
DROP DATABASE IF EXISTS instr_test;
NOTICE:  database "instr_test" does not exist, skipping
CREATE DATABASE instr_test WITH TEMPLATE = template0 ENCODING='SQL_ASCII' LC_COLLATE='C' LC_CTYPE='C';
\c instr_test
CREATE EXTENSION whale;
select plvstr.instr('TestABC', 'ABC');
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', 1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', 6);
 instr 
-------
     0
(1 row)

select plvstr.instr('TestABC', 'ABC', 1, 1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', 6, 1);
 instr 
-------
     0
(1 row)

select plvstr.instr('TestABC', 'ABC', -1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', -6);
 instr 
-------
     0
(1 row)

select plvstr.instr('TestABC', 'ABC', -1, 1);
 instr 
-------
     5
(1 row)

select plvstr.instr('TestABC', 'ABC', -6, 1);
 instr 
-------
     0
(1 row)

